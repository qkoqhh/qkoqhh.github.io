<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>test</title>
      <link href="/test-1/"/>
      <url>/test-1/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>gym102428F(DP)</title>
      <link href="/gym102428F/"/>
      <url>/gym102428F/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://codeforces.com/gym/102428/problem/F" target="_blank" rel="noopener">https://codeforces.com/gym/102428/problem/F</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定 $m$ 个砖块，要把这些砖块放入 $n$ 列中，其中每列最少有一个砖块，且排布上不能出现凹陷之处(即最多只有一个单峰)</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>场上用了个傻逼方法推了贼久。。</p><p>如果没有单峰显然是个分拆数，有单峰的话需要修改一下 DP 方程</p><p>考虑两种操作，在两侧就加 $1$ 和整体加一，那么很容易得到转移</p><p>可是对 $1$ $2$ $1$ 这种数据，会计重，因此需要减去同时在两侧加上 $1$ 的情况，最后</p><script type="math/tex; mode=display">d[i][j]=d[i][j-i]+d[i-1][j-1]\times2-d[i-2][j-2]</script><p>如果一开始是空的，加 $1$ 的方案就只有一种，因此需要特判 $d[i][i]=1$</p><h4 id="另一种解法："><a href="#另一种解法：" class="headerlink" title="另一种解法："></a>另一种解法：</h4><p>网友们似乎都是从低向上叠的，考虑 $d[i][j]$ 为 剩下 $i$ 个砖块，底层是 $j$ 的方案数</p><p>那么，可以直接往上叠，也可以去掉最左边的底或者最右边的底，同样会出现 $1$ $2$ $1$ 这中情况，需要去重，有</p><script type="math/tex; mode=display">d[i][j]=d[i-j][j]+2*d[i][j-1]-d[i][j-2]</script><p>先放砖块后转移就可以了</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>解法一：</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 5005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 505</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><span class="hljs-keyword">int</span> n,m;<br>ll d[NM][NM];<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();m=read();<br>    d[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    inc(i,<span class="hljs-number">1</span>,n)&#123;<br>d[i][i]=<span class="hljs-number">1</span>;<br>inc(j,i+<span class="hljs-number">1</span>,m)<span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">1</span>&amp;&amp;j&gt;<span class="hljs-number">1</span>)d[i][j]=(d[i][j-i]+<span class="hljs-number">2</span>*d[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>]-d[i<span class="hljs-number">-2</span>][j<span class="hljs-number">-2</span>]+inf)%inf;<br><span class="hljs-keyword">else</span> d[i][j]=(d[i][j-i]+<span class="hljs-number">2</span>*d[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>])%inf;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>*<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,d[n][m]);<br>&#125;<br></code></pre></td></tr></table></figure><p>解法二：</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 5005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 505</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><span class="hljs-keyword">int</span> n,m;<br>ll d[NM][NM];<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();m=read();m-=n;<br>    inc(i,<span class="hljs-number">0</span>,n)d[<span class="hljs-number">0</span>][i]=<span class="hljs-number">1</span>;<br>    inc(i,<span class="hljs-number">1</span>,m)inc(j,<span class="hljs-number">1</span>,n)<br><span class="hljs-keyword">if</span>(j&gt;<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">if</span>(i&gt;=j)d[i][j]=(d[i-j][j]+d[i][j<span class="hljs-number">-1</span>]*<span class="hljs-number">2</span>-d[i][j<span class="hljs-number">-2</span>]+inf)%inf;<br>    <span class="hljs-keyword">else</span> d[i][j]=(d[i][j<span class="hljs-number">-1</span>]*<span class="hljs-number">2</span>-d[i][j<span class="hljs-number">-2</span>]+inf)%inf;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i&gt;=j)d[i][j]=(d[i-j][j]+d[i][j<span class="hljs-number">-1</span>]*<span class="hljs-number">2</span>)%inf;<br><span class="hljs-keyword">else</span> d[i][j]=d[i][j<span class="hljs-number">-1</span>]*<span class="hljs-number">2</span>%inf;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,d[m][n]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uoj185(DP+容斥)</title>
      <link href="/uoj185/"/>
      <url>/uoj185/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://uoj.ac/problem/185" target="_blank" rel="noopener">http://uoj.ac/problem/185</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>要找到一一对应的关系是比较难的，如果我们只保证映射上的点之间有对应边的存在，而不考虑他们必须一一对应，那么情况就会简单很多了。。</p><p>设 $d[i][j]$ 为 $i$ 子树映射的方案数，其中 $i$ 点映射在 $j$ 上，那么有</p><script type="math/tex; mode=display">d[i][j]=\prod_{son} \sum_{(j,k)\in E} d[son][k]</script><p>结合一下分配律可知复杂度为 $O(nm)$</p><p>然后接下来考虑一一对应的限制，其实只要让他们的映射集合为全集就可以了，这很显然容斥一下就可以。。</p><p>因此总复杂度为 $O(nm2^n)$</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp make_pair</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 18</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 289</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span>&#123;</span><span class="hljs-keyword">int</span> t;edge*next;&#125;e[nm],*h[NM],*o=e;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;o-&gt;t=y;o-&gt;next=h[x];h[x]=o++;&#125;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;vec,ed[NM];<br><span class="hljs-keyword">int</span> n,m,_x,_y,tot;<br>ll ans,d[NM][NM];<br><span class="hljs-keyword">bool</span> v[NM];<br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> f=<span class="hljs-number">0</span>)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span>&amp;i:vec)d[x][i]=<span class="hljs-number">1</span>;<br>    link(x)<span class="hljs-keyword">if</span>(j-&gt;t!=f)&#123;<br>dfs(j-&gt;t,x);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span>&amp;i:vec)&#123;<br>    ll s=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span>&amp;k:ed[i])<span class="hljs-keyword">if</span>(v[k])s+=d[j-&gt;t][k];<br>    d[x][i]=d[x][i]*s;<br>&#125;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();m=read();<br>    <span class="hljs-keyword">while</span>(m--)&#123;<br>_x=read();_y=read();<br>ed[_x].push_back(_y);<br>ed[_y].push_back(_x);<br>    &#125;<br>    inc(i,<span class="hljs-number">2</span>,n)&#123;<br>_x=read();_y=read();<br>add(_x,_y);add(_y,_x);<br>    &#125;<br>    tot=succ(n)<span class="hljs-number">-1</span>;<br>    inc(i,<span class="hljs-number">1</span>,tot)&#123;<br>vec.clear();mem(v);<br>inc(j,<span class="hljs-number">1</span>,n)<span class="hljs-keyword">if</span>(i&gt;&gt;(j<span class="hljs-number">-1</span>)&amp;<span class="hljs-number">1</span>)vec.push_back(j),v[j]++;<br>dfs(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span>&amp;j:vec)<br>    <span class="hljs-keyword">if</span>(__builtin_popcount(i^tot)&amp;<span class="hljs-number">1</span>)ans-=d[<span class="hljs-number">1</span>][j];<br>    <span class="hljs-keyword">else</span> ans+=d[<span class="hljs-number">1</span>][j];<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 组合数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>luogu4336(矩阵树定理+容斥)</title>
      <link href="/luogu4336/"/>
      <url>/luogu4336/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.org/problem/P4336" target="_blank" rel="noopener">https://www.luogu.org/problem/P4336</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>虽然生成树计数确实会想到矩阵树定理，不过因为感觉用不上去于是走在了状压的不归路上QAQ</p><p>如果硬套矩阵树定理会发现可能会出现一个人占据多条边的情况，其实这意味着有些人没有支配着边，所以只需要排除掉非全集的情况就可以了，容斥也就显而易见。。</p><p>还是太菜了。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 18</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 20000005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reduce</span><span class="hljs-params">(ll&amp;x)</span></span>&#123;x+=x&gt;&gt;<span class="hljs-number">63</span>&amp;inf;&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">qpow</span><span class="hljs-params">(ll x,ll t)</span></span>&#123;<br>    ll s=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(;t;t&gt;&gt;=<span class="hljs-number">1</span>,x=x*x%inf)<span class="hljs-keyword">if</span>(t&amp;<span class="hljs-number">1</span>)s=s*x%inf;<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br><span class="hljs-keyword">int</span> n,tot,_x,_y;<br>ll a[NM][NM];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">P</span>&#123;</span><span class="hljs-keyword">int</span> x,y;&#125;;<br><span class="hljs-built_in">vector</span>&lt;P&gt;vec[NM];<br>ll ans;<br><br><br><span class="hljs-function">ll <span class="hljs-title">cal</span><span class="hljs-params">()</span></span>&#123;<br>    ll s=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> cnt=<span class="hljs-number">0</span>;<br>    inc(i,<span class="hljs-number">1</span>,n)inc(j,<span class="hljs-number">1</span>,n)reduce(a[i][j]);<br>    inc(i,<span class="hljs-number">1</span>,n)inc(j,i+<span class="hljs-number">1</span>,n)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> x=i,y=j;a[y][i];swap(x,y))&#123;<br>    ll t=a[x][i]*qpow(a[y][i],inf<span class="hljs-number">-2</span>)%inf;<br>    inc(k,i,n)reduce(a[x][k]-=t*a[y][k]%inf);<br>&#125;<br><span class="hljs-keyword">if</span>(!a[i][i])swap(a[i],a[j]),cnt^=<span class="hljs-number">1</span>;<br>    &#125;<br>    inc(i,<span class="hljs-number">1</span>,n)s=s*a[i][i]%inf;<br>    <span class="hljs-keyword">if</span>(cnt)reduce(s=-s);<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read()<span class="hljs-number">-1</span>;tot=succ(n)<span class="hljs-number">-1</span>;<br>    inc(i,<span class="hljs-number">1</span>,n)&#123;<br><span class="hljs-keyword">int</span> m=read();<br><span class="hljs-keyword">while</span>(m--)&#123;<br>    _x=read();_y=read();<br>    vec[i].push_back(&#123;_x,_y&#125;);<br>&#125;<br>    &#125;<br>    inc(i,<span class="hljs-number">0</span>,tot)&#123;<br>mem(a);<br>inc(j,<span class="hljs-number">1</span>,n)<span class="hljs-keyword">if</span>(i&gt;&gt;(j<span class="hljs-number">-1</span>)&amp;<span class="hljs-number">1</span>)<span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp;k:vec[j])&#123;<br>    a[k.x][k.y]--;a[k.y][k.x]--;<br>    a[k.x][k.x]++;a[k.y][k.y]++;<br>&#125;<br><span class="hljs-keyword">if</span>(__builtin_popcount(i^tot)&amp;<span class="hljs-number">1</span>)reduce(ans-=cal());<br><span class="hljs-keyword">else</span> reduce(ans+=cal()-inf);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 组合数学 </tag>
            
            <tag> 矩阵树定理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>loj2002(倍增)</title>
      <link href="/loj2002/"/>
      <url>/loj2002/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://loj.ac/problem/2002" target="_blank" rel="noopener">https://loj.ac/problem/2002</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>感觉就是做 $n$ 次模卷积，由于模数比较小，所以直接倍增暴力就可以。。</p><p>对于要求至少一个质数先用上全部的减去用上非质数即可。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 100005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 20000005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">20170408</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><span class="hljs-keyword">int</span> n,m,p,_m;<br>ll d[<span class="hljs-number">32</span>][NM],ans[NM],_ans,tmp[NM];<br><span class="hljs-keyword">bool</span> v[nm];<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();_m=m=read();p=read();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>;i&lt;=m;i++)<span class="hljs-keyword">if</span>(!v[i])<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=i&lt;&lt;<span class="hljs-number">1</span>;j&lt;=m;j+=i)v[j]++;<br>    inc(i,<span class="hljs-number">0</span>,p<span class="hljs-number">-1</span>)d[<span class="hljs-number">0</span>][i]=m/p;<br>    m%=p;<br>    inc(i,<span class="hljs-number">1</span>,m)d[<span class="hljs-number">0</span>][i]++;<br>    m=p<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;succ(i)&lt;=n;i++)<br>inc(j,<span class="hljs-number">0</span>,m)inc(k,<span class="hljs-number">0</span>,m)(d[i][(j+k)%p]+=d[i<span class="hljs-number">-1</span>][j]*d[i<span class="hljs-number">-1</span>][k])%=inf;<br>    ans[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;succ(i)&lt;=n;i++)<span class="hljs-keyword">if</span>(n&gt;&gt;i&amp;<span class="hljs-number">1</span>)&#123;<br><span class="hljs-built_in">memcpy</span>(tmp,ans,<span class="hljs-keyword">sizeof</span>(ans));mem(ans);<br>inc(j,<span class="hljs-number">0</span>,m)inc(k,<span class="hljs-number">0</span>,m)(ans[(j+k)%p]+=tmp[j]*d[i][k])%=inf;<br>    &#125;<br>    _ans=ans[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>;i&lt;=_m;i++)<span class="hljs-keyword">if</span>(!v[i])d[<span class="hljs-number">0</span>][i%p]--;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;succ(i)&lt;=n;i++)&#123;<br>mem(d[i]);<br>inc(j,<span class="hljs-number">0</span>,m)inc(k,<span class="hljs-number">0</span>,m)(d[i][(j+k)%p]+=d[i<span class="hljs-number">-1</span>][j]*d[i<span class="hljs-number">-1</span>][k])%=inf;<br>    &#125;<br>    mem(ans);ans[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;succ(i)&lt;=n;i++)<span class="hljs-keyword">if</span>(n&gt;&gt;i&amp;<span class="hljs-number">1</span>)&#123;<br><span class="hljs-built_in">memcpy</span>(tmp,ans,<span class="hljs-keyword">sizeof</span>(ans));mem(ans);<br>inc(j,<span class="hljs-number">0</span>,m)inc(k,<span class="hljs-number">0</span>,m)(ans[(j+k)%p]+=tmp[j]*d[i][k])%=inf;<br>    &#125;<br>    _ans+=inf-ans[<span class="hljs-number">0</span>];_ans%=inf;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,_ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 组合数学 </tag>
            
            <tag> unclassified </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>luogu2150(状压DP)</title>
      <link href="/luogu2150/"/>
      <url>/luogu2150/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.org/problem/P2150" target="_blank" rel="noopener">https://www.luogu.org/problem/P2150</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>写了上个题感觉这道相对还是好写得多。。但是还是很麻烦。。</p><p>同样对最大的质数排序，然后根据最大质数分段考虑。。</p><p>对 $\sqrt n$ 以内的质数三进制状压，代表该质数没选或者是被谁选中，再设一维表示当前质数是否被选，然后分类讨论转移即可。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 505</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 256</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> p[]=&#123;<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">11</span>,<span class="hljs-number">13</span>,<span class="hljs-number">17</span>,<span class="hljs-number">19</span>&#125;;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> m=<span class="hljs-number">7</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> tot=succ(<span class="hljs-number">8</span>)<span class="hljs-number">-1</span>;<br>ll inf;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reduce</span><span class="hljs-params">(ll&amp;x)</span></span>&#123;x+=x&gt;&gt;<span class="hljs-number">63</span>&amp;inf;&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">upd</span><span class="hljs-params">(ll&amp;x,ll y)</span></span>&#123;reduce(x+=y-inf);&#125;<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-keyword">int</span> mn[NM],c[NM],<span class="hljs-keyword">_t</span>,tmp[NM];<br>ll d[<span class="hljs-number">2</span>][nm][nm][<span class="hljs-number">3</span>],ans;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<span class="hljs-keyword">return</span> mn[x]&lt;mn[y];&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();inf=read();<br>    inc(i,<span class="hljs-number">2</span>,n)<span class="hljs-keyword">if</span>(!mn[i])<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=i;j&lt;=n;j+=i)mn[j]=i;<br>    inc(i,<span class="hljs-number">2</span>,n)inc(j,<span class="hljs-number">0</span>,m)<span class="hljs-keyword">if</span>(i%p[j]==<span class="hljs-number">0</span>)c[i]|=succ(j);<br>    inc(i,<span class="hljs-number">2</span>,n)<span class="hljs-keyword">if</span>(mn[i]&lt;=<span class="hljs-number">19</span>)mn[i]=<span class="hljs-number">0</span>;<br>    inc(i,<span class="hljs-number">2</span>,n)tmp[i]=i;<br>    sort(tmp+<span class="hljs-number">2</span>,tmp+<span class="hljs-number">1</span>+n,cmp);<br>    d[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    inc(_k,<span class="hljs-number">2</span>,n)&#123;<br><span class="hljs-keyword">int</span> i=tmp[_k];<br><span class="hljs-keyword">_t</span>^=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(mn[i]==mn[tmp[_k<span class="hljs-number">-1</span>]])&#123;<br>    <span class="hljs-keyword">if</span>(mn[i])&#123;<br>inc(j,<span class="hljs-number">0</span>,tot)<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=j;;k=(k<span class="hljs-number">-1</span>)&amp;j)&#123;<br>    inc(v,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)d[<span class="hljs-keyword">_t</span>][j][k][v]=d[<span class="hljs-keyword">_t</span>^<span class="hljs-number">1</span>][j][k][v];<br>    <span class="hljs-keyword">if</span>(k==<span class="hljs-number">0</span>)<span class="hljs-keyword">break</span>;<br>&#125;<br>inc(j,<span class="hljs-number">0</span>,tot)<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=j;;k=(k<span class="hljs-number">-1</span>)&amp;j)&#123;<br>    inc(v,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)&#123;<br><span class="hljs-keyword">if</span>((k&amp;c[i])==<span class="hljs-number">0</span>&amp;&amp;v!=<span class="hljs-number">2</span>)<br>    upd(d[<span class="hljs-keyword">_t</span>][j|c[i]][k][<span class="hljs-number">1</span>],d[<span class="hljs-keyword">_t</span>^<span class="hljs-number">1</span>][j][k][v]);<br><span class="hljs-keyword">if</span>(((k^j)&amp;c[i])==<span class="hljs-number">0</span>&amp;&amp;v!=<span class="hljs-number">1</span>)<br>    upd(d[<span class="hljs-keyword">_t</span>][j|c[i]][k|c[i]][<span class="hljs-number">2</span>],d[<span class="hljs-keyword">_t</span>^<span class="hljs-number">1</span>][j][k][v]);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(k==<span class="hljs-number">0</span>)<span class="hljs-keyword">break</span>;<br>&#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>inc(j,<span class="hljs-number">0</span>,tot)<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=j;;k=(k<span class="hljs-number">-1</span>)&amp;j)&#123;<br>    d[<span class="hljs-keyword">_t</span>][j][k][<span class="hljs-number">0</span>]=d[<span class="hljs-keyword">_t</span>^<span class="hljs-number">1</span>][j][k][<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">if</span>(k==<span class="hljs-number">0</span>)<span class="hljs-keyword">break</span>;<br>&#125;<br>inc(j,<span class="hljs-number">0</span>,tot)<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=j;;k=(k<span class="hljs-number">-1</span>)&amp;j)&#123;<br>    <span class="hljs-keyword">if</span>((k&amp;c[i])==<span class="hljs-number">0</span>)<br>upd(d[<span class="hljs-keyword">_t</span>][j|c[i]][k][<span class="hljs-number">0</span>],d[<span class="hljs-keyword">_t</span>^<span class="hljs-number">1</span>][j][k][<span class="hljs-number">0</span>]);<br>    <span class="hljs-keyword">if</span>(((k^j)&amp;c[i])==<span class="hljs-number">0</span>)<br>upd(d[<span class="hljs-keyword">_t</span>][j|c[i]][k|c[i]][<span class="hljs-number">0</span>],d[<span class="hljs-keyword">_t</span>^<span class="hljs-number">1</span>][j][k][<span class="hljs-number">0</span>]);<br>    <span class="hljs-keyword">if</span>(k==<span class="hljs-number">0</span>)<span class="hljs-keyword">break</span>;<br>&#125;<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    inc(j,<span class="hljs-number">0</span>,tot)<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=j;;k=(k<span class="hljs-number">-1</span>)&amp;j)&#123;<br>inc(v,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)d[<span class="hljs-keyword">_t</span>][j][k][v]=<span class="hljs-number">0</span>;<br>inc(v,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)upd(d[<span class="hljs-keyword">_t</span>][j][k][<span class="hljs-number">0</span>],d[<span class="hljs-keyword">_t</span>^<span class="hljs-number">1</span>][j][k][v]);<br><span class="hljs-keyword">if</span>(k==<span class="hljs-number">0</span>)<span class="hljs-keyword">break</span>;<br>    &#125;<br>    inc(j,<span class="hljs-number">0</span>,tot)<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=j;;k=(k<span class="hljs-number">-1</span>)&amp;j)&#123;<br><span class="hljs-keyword">if</span>((k&amp;c[i])==<span class="hljs-number">0</span>)<br>inc(v,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)<br>    upd(d[<span class="hljs-keyword">_t</span>][j|c[i]][k][<span class="hljs-number">1</span>],d[<span class="hljs-keyword">_t</span>^<span class="hljs-number">1</span>][j][k][v]);<br><span class="hljs-keyword">if</span>(((k^j)&amp;c[i])==<span class="hljs-number">0</span>)<br>inc(v,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)<br>    upd(d[<span class="hljs-keyword">_t</span>][j|c[i]][k|c[i]][<span class="hljs-number">2</span>],d[<span class="hljs-keyword">_t</span>^<span class="hljs-number">1</span>][j][k][v]);<br><span class="hljs-keyword">if</span>(k==<span class="hljs-number">0</span>)<span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br>    &#125;<br>    inc(j,<span class="hljs-number">0</span>,tot)<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=j;;k=(k<span class="hljs-number">-1</span>)&amp;j)&#123;<br>inc(v,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)upd(ans,d[<span class="hljs-keyword">_t</span>][j][k][v]);<br><span class="hljs-keyword">if</span>(k==<span class="hljs-number">0</span>)<span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>luogu5616(状压DP)</title>
      <link href="/luogu5616/"/>
      <url>/luogu5616/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.org/problem/P5616" target="_blank" rel="noopener">https://www.luogu.org/problem/P5616</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p> 这个题让窝想到了 NOI 的寿司晚宴，然后发现那题窝还没补(X)</p><p>那么同样很容易想到对小于 $\sqrt{300}$ 的数进行状压，然后再考虑大质数的贡献。。</p><p>然后就没想到怎么处理大质数的贡献了。。</p><p>题解是对所有数按最大素因子进行排序，然后分段考虑当前质数有没有取到，这样就可以把大质数的问题解决了。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1ll&lt;&lt;(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 305</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 300005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> p[]=&#123;<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">11</span>,<span class="hljs-number">13</span>,<span class="hljs-number">17</span>&#125;;<br>ll pre[<span class="hljs-number">7</span>][<span class="hljs-number">9</span>];<br>ll inf;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reduce</span><span class="hljs-params">(ll&amp;x)</span></span>&#123;x+=x&gt;&gt;<span class="hljs-number">63</span>&amp;inf;&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">upd</span><span class="hljs-params">(ll&amp;x,ll y)</span></span>&#123;reduce(x+=y-inf);&#125;<br><span class="hljs-keyword">int</span> a[NM],tmp[NM],c[<span class="hljs-number">7</span>],<span class="hljs-keyword">_t</span>,mn[NM],n;<br>ll p2[nm],d[<span class="hljs-number">2</span>][<span class="hljs-number">9</span>][<span class="hljs-number">6</span>][<span class="hljs-number">4</span>][<span class="hljs-number">3</span>][<span class="hljs-number">3</span>][<span class="hljs-number">3</span>][<span class="hljs-number">3</span>][<span class="hljs-number">2</span>],ans;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> _=read();inf=read();<br>    p2[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;inc(i,<span class="hljs-number">1</span>,_)p2[i]=p2[i<span class="hljs-number">-1</span>]*<span class="hljs-number">2</span>%inf;<br>    <span class="hljs-keyword">while</span>(_--)a[read()]++;<br>    n=<span class="hljs-number">300</span>;<br>    inc(i,<span class="hljs-number">1</span>,n)tmp[i]=i;<br>    mn[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    inc(i,<span class="hljs-number">2</span>,n)<span class="hljs-keyword">if</span>(!mn[i])<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=i;j&lt;=n;j+=i)mn[j]=i;<br>    sort(tmp+<span class="hljs-number">1</span>,tmp+<span class="hljs-number">1</span>+n,[&amp;](<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)&#123;<span class="hljs-keyword">return</span> mn[x]&lt;mn[y];&#125;);<br>    d[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    inc(i,<span class="hljs-number">1</span>,n)<span class="hljs-keyword">if</span>(mn[i]&lt;=<span class="hljs-number">17</span>)mn[i]=<span class="hljs-number">0</span>;<br>    inc(k,<span class="hljs-number">1</span>,n)&#123;<br><span class="hljs-keyword">int</span> i=tmp[k];<br><span class="hljs-keyword">_t</span>^=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(mn[i]==mn[tmp[k<span class="hljs-number">-1</span>]])<span class="hljs-built_in">memcpy</span>(d[<span class="hljs-keyword">_t</span>],d[<span class="hljs-keyword">_t</span>^<span class="hljs-number">1</span>],<span class="hljs-keyword">sizeof</span>(d[<span class="hljs-keyword">_t</span>^<span class="hljs-number">1</span>]));<br><span class="hljs-keyword">else</span>&#123;<br>    mem(d[<span class="hljs-keyword">_t</span>]);<br>    inc(t0,<span class="hljs-number">0</span>,<span class="hljs-number">8</span>)inc(t1,<span class="hljs-number">0</span>,<span class="hljs-number">5</span>)inc(t2,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>)inc(t3,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)inc(t4,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)inc(t5,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)inc(t6,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)inc(v,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)<br>upd(d[<span class="hljs-keyword">_t</span>][t0][t1][t2][t3][t4][t5][t6][<span class="hljs-number">0</span>],d[<span class="hljs-keyword">_t</span>^<span class="hljs-number">1</span>][t0][t1][t2][t3][t4][t5][t6][v]);<br>&#125;<br>mem(c);<br>inc(j,<span class="hljs-number">0</span>,<span class="hljs-number">6</span>)<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> t=i;t%p[j]==<span class="hljs-number">0</span>;t/=p[j])c[j]++;<br><span class="hljs-keyword">if</span>(mn[i]!=mn[tmp[k<span class="hljs-number">-1</span>]])&#123;<br>    inc(t0,<span class="hljs-number">0</span>,<span class="hljs-number">8</span>)inc(t1,<span class="hljs-number">0</span>,<span class="hljs-number">5</span>)inc(t2,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>)inc(t3,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)inc(t4,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)inc(t5,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)inc(t6,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)inc(v,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)<br>upd(d[<span class="hljs-keyword">_t</span>][max(t0,c[<span class="hljs-number">0</span>])][max(t1,c[<span class="hljs-number">1</span>])][max(t2,c[<span class="hljs-number">2</span>])][max(t3,c[<span class="hljs-number">3</span>])][max(t4,c[<span class="hljs-number">4</span>])][max(t5,c[<span class="hljs-number">5</span>])][max(t6,c[<span class="hljs-number">6</span>])][<span class="hljs-number">1</span>]<br>,d[<span class="hljs-keyword">_t</span>^<span class="hljs-number">1</span>][t0][t1][t2][t3][t4][t5][t6][v]*(p2[a[i]]<span class="hljs-number">-1</span>+inf)%inf*mn[i]%inf);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    inc(t0,<span class="hljs-number">0</span>,<span class="hljs-number">8</span>)inc(t1,<span class="hljs-number">0</span>,<span class="hljs-number">5</span>)inc(t2,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>)inc(t3,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)inc(t4,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)inc(t5,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)inc(t6,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)<br>upd(d[<span class="hljs-keyword">_t</span>][max(t0,c[<span class="hljs-number">0</span>])][max(t1,c[<span class="hljs-number">1</span>])][max(t2,c[<span class="hljs-number">2</span>])][max(t3,c[<span class="hljs-number">3</span>])][max(t4,c[<span class="hljs-number">4</span>])][max(t5,c[<span class="hljs-number">5</span>])][max(t6,c[<span class="hljs-number">6</span>])][<span class="hljs-number">1</span>]<br>,d[<span class="hljs-keyword">_t</span>^<span class="hljs-number">1</span>][t0][t1][t2][t3][t4][t5][t6][<span class="hljs-number">0</span>]*(p2[a[i]]<span class="hljs-number">-1</span>+inf)%inf*mn[i]%inf);<br>    inc(t0,<span class="hljs-number">0</span>,<span class="hljs-number">8</span>)inc(t1,<span class="hljs-number">0</span>,<span class="hljs-number">5</span>)inc(t2,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>)inc(t3,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)inc(t4,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)inc(t5,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)inc(t6,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)<br>upd(d[<span class="hljs-keyword">_t</span>][max(t0,c[<span class="hljs-number">0</span>])][max(t1,c[<span class="hljs-number">1</span>])][max(t2,c[<span class="hljs-number">2</span>])][max(t3,c[<span class="hljs-number">3</span>])][max(t4,c[<span class="hljs-number">4</span>])][max(t5,c[<span class="hljs-number">5</span>])][max(t6,c[<span class="hljs-number">6</span>])][<span class="hljs-number">1</span>]<br>,d[<span class="hljs-keyword">_t</span>^<span class="hljs-number">1</span>][t0][t1][t2][t3][t4][t5][t6][<span class="hljs-number">1</span>]*(p2[a[i]]<span class="hljs-number">-1</span>+inf)%inf);<br>&#125;<br>    &#125;<br>    inc(i,<span class="hljs-number">0</span>,<span class="hljs-number">6</span>)&#123;pre[i][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;inc(j,<span class="hljs-number">1</span>,<span class="hljs-number">8</span>)pre[i][j]=pre[i][j<span class="hljs-number">-1</span>]*p[i];&#125;<br>    inc(t0,<span class="hljs-number">0</span>,<span class="hljs-number">8</span>)inc(t1,<span class="hljs-number">0</span>,<span class="hljs-number">5</span>)inc(t2,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>)inc(t3,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)inc(t4,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)inc(t5,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)inc(t6,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)inc(v,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)<br>upd(ans,d[<span class="hljs-keyword">_t</span>][t0][t1][t2][t3][t4][t5][t6][v]*pre[<span class="hljs-number">0</span>][t0]*pre[<span class="hljs-number">1</span>][t1]*pre[<span class="hljs-number">2</span>][t2]%inf*pre[<span class="hljs-number">3</span>][t3]*pre[<span class="hljs-number">4</span>][t4]*pre[<span class="hljs-number">5</span>][t5]%inf*pre[<span class="hljs-number">6</span>][t6]%inf);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uoj104(wqs二分+斜率优化)</title>
      <link href="/uoj104/"/>
      <url>/uoj104/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://uoj.ac/problem/104" target="_blank" rel="noopener">http://uoj.ac/problem/104</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>主要学习 $wqs$ 二分求解时的方案输出，处理起来还是比较麻烦的。。</p><p>当二分到需要的权值时，用这个权值再做一次 $DP$ ，并记录<strong>所有</strong>转移路径，并维护转移到当前点所需要经过的最少的边和最多的边，然后从后往前搜，当当前需要的转移数加在两个最值之间，这个一定可以作为一个转移点，那么直接选择这个转移点往下搜就可以了。。</p><p>这个算法唯一的问题就是转移的边可能会很多。。但是想把这个卡 T 这个数据实在是不太好造(至少窝觉得这对出题人来说是个非常有挑战性的构造题)，所以窝萌就把他忽略了吧。。</p><p>有个细节是，当窝在二分时将 转移次数 $\ge k$ 作为二分判断条件时会在边界求解不出真正的解，这是因为在 $DP$ 的时候窝优先取前面的决策点(因为窝还要将后面的决策点保留到队列中以记录转移路径)。因此在遇到边界条件(凸包上平的那一段)窝会优先选择区间划分数较小的一段，所以如果当用 转移次数 $\ge k$ 时除非转移次数等于 $k$ 否则该权值下没有窝萌需要的答案。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1ll&lt;&lt;(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 100005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 10005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">998244353</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><span class="hljs-keyword">int</span> n,m;<br>ll d[NM],ans,a[NM];<br><span class="hljs-keyword">int</span> p[NM],q[NM],qh,qt,mmax[NM],mmin[NM],c[NM];<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;pre[NM];<br><br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">slope</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(a[x]==a[y])<span class="hljs-keyword">return</span> d[x]&gt;d[y]?inf:-inf;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1.0</span>*(d[x]-d[y])/(a[y]-a[x])+a[x]+a[y];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(ll t)</span></span>&#123;<br>    q[qh=qt=<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br>    inc(i,<span class="hljs-number">1</span>,n)&#123;<br><span class="hljs-keyword">while</span>(qh&lt;qt&amp;&amp;slope(q[qh],q[qh+<span class="hljs-number">1</span>])&lt;a[i])qh++;<br>d[i]=d[q[qh]]+(a[i]-a[q[qh]])*a[q[qh]]-t;<br>p[i]=p[q[qh]]+<span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span>(qh&lt;qt&amp;&amp;slope(q[qt<span class="hljs-number">-1</span>],q[qt])&gt;slope(q[qt],i))qt--;<br>q[++qt]=i;<br>    &#125;<br>    <span class="hljs-keyword">return</span> p[n]&lt;=m+<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">void</span> _check(ll <span class="hljs-keyword">_t</span>)&#123;<br>    q[qh=qt=<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br>    inc(i,<span class="hljs-number">1</span>,n)&#123;<br><span class="hljs-keyword">while</span>(qh&lt;qt&amp;&amp;slope(q[qh],q[qh+<span class="hljs-number">1</span>])&lt;a[i])qh++;<br>d[i]=d[q[qh]]+(a[i]-a[q[qh]])*a[q[qh]]-<span class="hljs-keyword">_t</span>;<br>mmin[i]=n+<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=qh,t=q[qh];k&lt;=qt&amp;&amp;d[i]+<span class="hljs-keyword">_t</span>==d[t]+(a[i]-a[t])*a[t];t=q[++k])&#123;<br>    pre[i].push_back(t);<br>    mmax[i]=max(mmax[i],mmax[t]+<span class="hljs-number">1</span>);<br>    mmin[i]=min(mmin[i],mmin[t]+<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">while</span>(qh&lt;qt&amp;&amp;slope(q[qt<span class="hljs-number">-1</span>],q[qt])&gt;slope(q[qt],i))qt--;<br>q[++qt]=i;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,d[n]+ans*(m+<span class="hljs-number">1</span>));<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> x=n,t=m;t;)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp;j:pre[x])<span class="hljs-keyword">if</span>(mmin[j]&lt;=t&amp;&amp;t&lt;=mmax[j])&#123;<br>    x=c[t]=j;<br>    t--;<br>    <span class="hljs-keyword">break</span>;<br>&#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();m=read();<br>    inc(i,<span class="hljs-number">1</span>,n)a[i]=read()+a[i<span class="hljs-number">-1</span>];<br>    <span class="hljs-keyword">for</span>(ll x=<span class="hljs-number">0</span>,y=a[n]*a[n];x&lt;=y;)<br><span class="hljs-keyword">if</span>(check(mid))&#123;<span class="hljs-comment">//&lt;=k</span><br>    ans=mid;y=mid<span class="hljs-number">-1</span>;<br>&#125;<span class="hljs-keyword">else</span> x=mid+<span class="hljs-number">1</span>;<br>    _check(ans);<br>    inc(i,<span class="hljs-number">1</span>,m)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d%c"</span>,c[i],<span class="hljs-string">" \n"</span>[i==m]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cf1250G(贪心)</title>
      <link href="/cf1250G/"/>
      <url>/cf1250G/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://codeforces.com/contest/1250/problem/G" target="_blank" rel="noopener">https://codeforces.com/contest/1250/problem/G</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>两个人玩 $n$ 轮游戏，初始每人的分数 $x,y$ 为 $0$ ，每轮 $x$ 加上 $a_i$ ，$y$ 加上 $b_i$ ，若有人分数超过 $k$ 则该人输，同时超过 $k$ 为平局</p><p>$x$ 在每轮可以选择一次操作，令 $x’=\max(0,x-y),y’=\max(0,y-x)$ ，问最少操作次数，使得 $x$ 获胜</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>由于在第 $i$ 轮操作的时候后，当前的分数是固定的，考虑维护 $d_i$ 表示在 $i$ 轮操作时保证 $x$ 不输的最少操作次数</p><p>由于 $d_i$ 是单调递增的，所以维护的时候上一次操作应该尽量靠前，因此可以直接二分决策点。。</p><p>然后维护出 $d_i$ 之后考虑在那个地方获胜，然后就能推出操作时的截断长度区间，根据这个区间直接二分，也是取靠前的决策点。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1ll&lt;&lt;(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 200005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 131072</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">998244353</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><span class="hljs-keyword">int</span> ans,n,_ans,p[NM],d[NM];<br>ll m,a[NM],b[NM],c[NM];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> _=read();<span class="hljs-keyword">while</span>(_--)&#123;<br>n=read();m=read();<br>inc(i,<span class="hljs-number">1</span>,n)a[i]=read()+a[i<span class="hljs-number">-1</span>];<br>inc(i,<span class="hljs-number">1</span>,n)b[i]=read()+b[i<span class="hljs-number">-1</span>];<br>inc(i,<span class="hljs-number">1</span>,n)c[i]=min(a[i],b[i]);<br>inc(i,<span class="hljs-number">1</span>,n)&#123;<br>    <span class="hljs-keyword">int</span> t=upper_bound(c,c+i,a[i]-m)-c;<br>    <span class="hljs-keyword">if</span>(t==i)&#123;n=i<span class="hljs-number">-1</span>;<span class="hljs-keyword">break</span>;&#125;<br>    d[i]=d[t]+<span class="hljs-number">1</span>;<br>    p[i]=t;<br>&#125;<br>ans=inf;_ans=<span class="hljs-number">0</span>;<br><span class="hljs-comment">//inc(i,1,n)printf("%d ",p[i]);putchar('\n');</span><br>inc(i,<span class="hljs-number">1</span>,n)<span class="hljs-keyword">if</span>(a[i]&lt;b[i])&#123;<br>    <span class="hljs-keyword">int</span> t=p[i];<br>    <span class="hljs-keyword">if</span>(b[i]-c[t]&gt;=m&amp;&amp;d[t]&lt;ans)ans=d[t],_ans=t;<br>&#125;<br><span class="hljs-keyword">if</span>(ans&lt;inf)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,ans);<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"-1\n"</span>);<br>    <span class="hljs-keyword">continue</span>;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> t=_ans;t;t=p[t])&#123;<br>    <span class="hljs-keyword">if</span>(t!=_ans)<span class="hljs-built_in">putchar</span>(<span class="hljs-string">' '</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d"</span>,t);<br>&#125;<br><span class="hljs-built_in">putchar</span>(<span class="hljs-string">'\n'</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cf1250E(二分图)</title>
      <link href="/cf1250E/"/>
      <url>/cf1250E/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://codeforces.com/contest/1250/problem/E" target="_blank" rel="noopener">https://codeforces.com/contest/1250/problem/E</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定 $n$ 个 $01$ 串，可以对其中若干个串进行前后翻转，问用最少的翻转次数，使得这些串两两之间的相似度大于 $k$ 。相似度定义为两个串做同或的 $1$ 的个数</p><p>$n\le50,|S|\le 50$</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>显然一个串只有两种状态，所以要决策将这个串放入哪个集合，使得两两之间不会发生冲突(相似度小于 $k$ )，很容易联想到最小割之类的东西。。。</p><p>那么考虑两个串 $S,T$ 之间可能出现的关系</p><p>若 $S$ 和 $T$ 冲突且 $S$ 和 $rev(T)$ 也会冲突，那么必然不会存在合法方案</p><p>若 $S$ 和 $T$ 冲突且 $S$ 和 $rev(T)$ 不冲突，那么 $S$ 和 $T$ 必然得在同一个集合中，我们考虑将这两个点合并</p><p>若 $S$ 和 $T$ 不冲突且 $S$ 和 $rev(T)$ 冲突，那么这两个串必然存在于不同集合中，连边</p><p>若 $S$ 和 $T$ 不冲突且 $S$ 和 $rev(T)$ 也不冲突，那么这两个串之间独立</p><p>另外，在合并完节点之后需要保证这些点之间的原串是不冲突的，因为同一集合这个限制条件没有传递性</p><p>然后考虑当前建的图，对每个联通块，如果不是二分图，那么显然也是不存在合法方案的。如果是二分图，选择点数较少的一侧翻转</p><p>然后就没了。。$O(n^2)$ <code>50ms 200KB</code> 你敢信？</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1ll&lt;&lt;(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 55</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 10005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">998244353</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span>&#123;</span><span class="hljs-keyword">int</span> t;edge*next;&#125;e[nm],*h[NM],*o=e;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;o-&gt;t=y;o-&gt;next=h[x];h[x]=o++;&#125;<br><span class="hljs-keyword">int</span> n,m,_p,f[NM],tot,c[NM];<br><span class="hljs-keyword">bool</span> a[NM][NM];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<span class="hljs-keyword">return</span> f[x]==x?x:f[x]=find(f[x]);&#125;<br><span class="hljs-keyword">char</span> str[NM][NM],_str[NM][NM];<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(<span class="hljs-keyword">char</span>*x,<span class="hljs-keyword">char</span>*y)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> s=<span class="hljs-number">0</span>;<br>    inc(i,<span class="hljs-number">0</span>,m<span class="hljs-number">-1</span>)<span class="hljs-keyword">if</span>(x[i]==y[i])s++;<br>    <span class="hljs-keyword">return</span> s&lt;_p;<br>&#125;<br><br><span class="hljs-keyword">bool</span> v[NM];<br><span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt;q;<br><span class="hljs-keyword">int</span> d[NM];<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;cnt[<span class="hljs-number">2</span>],ans;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;vec[NM];<br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    mem(v);mem(d);mem(h);o=e;<br>    ans.clear();<br>    <span class="hljs-keyword">while</span>(!q.empty())q.pop();<br>    n=read();m=read();_p=read();<br>    inc(i,<span class="hljs-number">1</span>,n)&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>,str[i]);<br>reverse_copy(str[i],str[i]+<span class="hljs-built_in">strlen</span>(str[i]),_str[i]);<br>    &#125;<br>    inc(i,<span class="hljs-number">1</span>,n)f[i]=i;<br>    inc(i,<span class="hljs-number">1</span>,n)inc(j,i+<span class="hljs-number">1</span>,n)&#123;<br><span class="hljs-keyword">if</span>(cmp(str[i],str[j]))&#123;<br>    <span class="hljs-keyword">if</span>(cmp(str[i],_str[j]))&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"-1\n"</span>);<span class="hljs-keyword">return</span>;&#125;<br>    a[i][j]=a[j][i]=<span class="hljs-literal">true</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    a[i][j]=a[j][i]=<span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">if</span>(cmp(str[i],_str[j]))<br>f[find(i)]=find(j);<br>&#125;<br>    &#125;<br>    tot=<span class="hljs-number">0</span>;<br>    inc(i,<span class="hljs-number">1</span>,n)<span class="hljs-keyword">if</span>(find(i)==i)c[i]=++tot;<br>    inc(i,<span class="hljs-number">1</span>,tot)vec[i].clear();<br>    inc(i,<span class="hljs-number">1</span>,n)vec[c[find(i)]].push_back(i);<br>    inc(i,<span class="hljs-number">1</span>,tot)<span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp;j:vec[i])<span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp;k:vec[i])<span class="hljs-keyword">if</span>(a[j][k])&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"-1\n"</span>);<span class="hljs-keyword">return</span>;&#125;<br>    inc(i,<span class="hljs-number">1</span>,n)inc(j,<span class="hljs-number">1</span>,n)<span class="hljs-keyword">if</span>(a[i][j]&amp;&amp;find(i)!=find(j))&#123;<br>add(c[find(i)],c[find(j)]);<br>    &#125;<br>    inc(i,<span class="hljs-number">1</span>,tot)<span class="hljs-keyword">if</span>(!v[i])&#123;<br>v[i]++;cnt[<span class="hljs-number">0</span>].clear();cnt[<span class="hljs-number">1</span>].clear();<br>q.push(i);<br><span class="hljs-keyword">while</span>(!q.empty())&#123;<br>    <span class="hljs-keyword">int</span> t=q.front();q.pop();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp;j:vec[t])cnt[d[t]].push_back(j);<br>    link(t)<span class="hljs-keyword">if</span>(!v[j-&gt;t])&#123;<br>v[j-&gt;t]++;<br>d[j-&gt;t]=d[t]^<span class="hljs-number">1</span>;<br>q.push(j-&gt;t);<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(d[j-&gt;t]==d[t])&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"-1\n"</span>);<span class="hljs-keyword">return</span>;&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(cnt[<span class="hljs-number">0</span>].size()&lt;cnt[<span class="hljs-number">1</span>].size())<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp;j:cnt[<span class="hljs-number">0</span>])ans.push_back(j);<br><span class="hljs-keyword">else</span> <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp;j:cnt[<span class="hljs-number">1</span>])ans.push_back(j);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,(<span class="hljs-keyword">int</span>)ans.size());<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp;j:ans)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d "</span>,j);<span class="hljs-built_in">putchar</span>(<span class="hljs-string">'\n'</span>);<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> _=read();<span class="hljs-keyword">while</span>(_--)solve();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> unclassified </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>luogu5392(矩阵快速幂)</title>
      <link href="/luogu5392/"/>
      <url>/luogu5392/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.org/problem/P5392" target="_blank" rel="noopener">https://www.luogu.org/problem/P5392</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>很容易想到用矩阵快速幂，但是矩阵太大会 T。。</p><p>本地跑一下可以发现 $17$ 位以内的独立集其实不多，但是复杂度还是过大，仍然需要再压缩</p><p>这个压缩就比较神奇了，根据(可能是)群轮，我们可以把一些同构的状态合并，即通过旋转可以得到的状态，这样矩阵的维数就进一步压缩了(200左右)，然后就可以矩阵快速幂了。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 100005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 131072</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">998244353</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br>ll n,ans;<br><span class="hljs-keyword">int</span> m,cnt,tot;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mat</span>&#123;</span>ll a[<span class="hljs-number">211</span>][<span class="hljs-number">211</span>];&#125;t;<br><span class="hljs-keyword">bool</span> v[<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">17</span>];<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;vec[<span class="hljs-number">211</span>];<br>mat <span class="hljs-keyword">operator</span>*(<span class="hljs-keyword">const</span> mat&amp;x,<span class="hljs-keyword">const</span> mat&amp;y)&#123;<br>    mat s;mem(s.a);<br>    inc(i,<span class="hljs-number">0</span>,cnt)inc(k,<span class="hljs-number">0</span>,cnt)inc(j,<span class="hljs-number">0</span>,cnt)s.a[i][j]+=x.a[i][k]*y.a[k][j],s.a[i][j]%=inf;<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br><br><span class="hljs-function">mat <span class="hljs-title">qpow</span><span class="hljs-params">(mat x,ll t)</span></span>&#123;<br>    mat s=x;t--;<br>    <span class="hljs-keyword">for</span>(;t;t&gt;&gt;=<span class="hljs-number">1</span>,x=x*x)<span class="hljs-keyword">if</span>(t&amp;<span class="hljs-number">1</span>)s=s*x;<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();m=read();tot=succ(m)<span class="hljs-number">-1</span>;<br>    vec[<span class="hljs-number">0</span>].push_back(<span class="hljs-number">0</span>);<br>    inc(i,<span class="hljs-number">1</span>,tot<span class="hljs-number">-1</span>)<span class="hljs-keyword">if</span>(!v[i] &amp;&amp; (i &amp; (i&gt;&gt;<span class="hljs-number">1</span>|( (i&amp;<span class="hljs-number">1</span>)&lt;&lt;(m<span class="hljs-number">-1</span>) ) ) )==<span class="hljs-number">0</span>)&#123;<br><span class="hljs-keyword">int</span> t=i;<br>cnt++;<br>inc(j,<span class="hljs-number">1</span>,m)&#123;<br>    <span class="hljs-keyword">if</span>(!v[t])&#123;<br>v[t]++;<br>vec[cnt].push_back(t);<br>    &#125;<br>    t=t&gt;&gt;<span class="hljs-number">1</span>| ( (t&amp;<span class="hljs-number">1</span>)&lt;&lt;(m<span class="hljs-number">-1</span>) );<br>&#125;<br>    &#125;<br>    <span class="hljs-comment">//printf("%d\n",cnt);</span><br>    <span class="hljs-comment">//inc(i,0,cnt)&#123;printf("%d:",i);for(auto&amp;j:vec[i])printf("%d ",j);putchar('\n');&#125;</span><br>    inc(i,<span class="hljs-number">0</span>,cnt)inc(j,<span class="hljs-number">0</span>,cnt)<span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp;k:vec[j])<span class="hljs-keyword">if</span>((vec[i][<span class="hljs-number">0</span>]&amp;k)==<span class="hljs-number">0</span>)t.a[i][j]++;<br>    <span class="hljs-comment">//inc(i,0,cnt)&#123;inc(j,0,cnt)printf("%lld ",t.a[i][j]);putchar('\n');&#125;</span><br>    t=qpow(t,n);<br>    inc(i,<span class="hljs-number">0</span>,cnt)ans+=t.a[<span class="hljs-number">0</span>][i];<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans%inf);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> unclassified </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>loj2774(基环树DP)</title>
      <link href="/loj2774/"/>
      <url>/loj2774/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://loj.ac/problem/2774" target="_blank" rel="noopener">https://loj.ac/problem/2774</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>这题没有想象中那么麻烦。。</p><p>首先发现要满足题目要求初始边一定是每个点有且只有一条出边，那么这个图就变成了基环树森林。。</p><p>然后考虑树DP的话，显然可以根据当前点的出边有没有改变设状态。再考虑环上的情况，由于只能两两配对，所以能形成配对的只有环上的相邻两点，那么如果在序列上直接DP过去，环上考虑跨环和不跨环，跨环其实就是把头尾配对，然后又变成序列了，所以没什么大碍。。</p><p>最后需要特判一下环大小为 2 和 1 的情况，然后就没了。。</p><p>讨论基本一次覆盖到，然而还是有地方写挫了。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 100005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 1000005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span>&#123;</span><span class="hljs-keyword">int</span> t;edge*next;&#125;e[NM],*h[NM],*o=e;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;o-&gt;t=y;o-&gt;next=h[x];h[x]=o++;&#125;<br><span class="hljs-keyword">int</span> n,d[NM][<span class="hljs-number">2</span>],dp[NM];<br><span class="hljs-keyword">bool</span> v[NM];<br><span class="hljs-built_in">map</span>&lt;<span class="hljs-built_in">string</span>,<span class="hljs-keyword">int</span>&gt;mp;<br><span class="hljs-keyword">int</span> ans;<br><br><span class="hljs-keyword">int</span> low[NM],_x,f[NM],tot,c[NM];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">tar</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br>    low[x]=_x;<br>    link(x)<span class="hljs-keyword">if</span>(low[j-&gt;t]==_x)<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> y=x;y!=f[j-&gt;t];y=f[y])c[++tot]=y,v[y]++;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!low[j-&gt;t])f[j-&gt;t]=x,tar(j-&gt;t);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> s=<span class="hljs-number">0</span>;<br>    v[x]++;<br>    link(x)<span class="hljs-keyword">if</span>(!v[j-&gt;t])&#123;<br>dfs(j-&gt;t);<br>d[x][<span class="hljs-number">0</span>]+=d[j-&gt;t][<span class="hljs-number">1</span>];<br>s=max(s,d[j-&gt;t][<span class="hljs-number">1</span>]-d[j-&gt;t][<span class="hljs-number">0</span>]);<br>    &#125;<br>    d[x][<span class="hljs-number">1</span>]=d[x][<span class="hljs-number">0</span>]-s+<span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();<br>    <span class="hljs-keyword">if</span>(n&amp;<span class="hljs-number">1</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>*<span class="hljs-built_in">printf</span>(<span class="hljs-string">"-1\n"</span>);<br>    inc(i,<span class="hljs-number">1</span>,n)&#123;<br><span class="hljs-built_in">string</span> s,t;<br><span class="hljs-built_in">cin</span>&gt;&gt;s&gt;&gt;t;<br><span class="hljs-keyword">int</span> x=mp.count(s)?mp[s]:mp[s]=++tot;<br><span class="hljs-keyword">int</span> y=mp.count(t)?mp[t]:mp[t]=++tot;<br><span class="hljs-keyword">if</span>(v[x])<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>*<span class="hljs-built_in">printf</span>(<span class="hljs-string">"-1\n"</span>);<br>add(y,x);v[x]++;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp;j:mp)<span class="hljs-built_in">cout</span>&lt;&lt;j.first&lt;&lt;<span class="hljs-string">' '</span>&lt;&lt;j.second&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    mem(v);<br>    inc(k,<span class="hljs-number">1</span>,n)<span class="hljs-keyword">if</span>(!low[k])&#123;<br>tot=<span class="hljs-number">0</span>;<br>tar(_x=k);<br>inc(i,<span class="hljs-number">1</span>,tot)dfs(c[i]);<br><span class="hljs-keyword">if</span>(tot==<span class="hljs-number">1</span>)&#123;<br>    ans+=d[c[<span class="hljs-number">1</span>]][<span class="hljs-number">1</span>];<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(tot==<span class="hljs-number">2</span>)&#123;<br>    ans+=min(d[c[<span class="hljs-number">1</span>]][<span class="hljs-number">1</span>]+d[c[<span class="hljs-number">2</span>]][<span class="hljs-number">1</span>],d[c[<span class="hljs-number">1</span>]][<span class="hljs-number">0</span>]+d[c[<span class="hljs-number">2</span>]][<span class="hljs-number">0</span>]);<br>&#125;<br><span class="hljs-keyword">if</span>(tot&lt;=<span class="hljs-number">2</span>)<span class="hljs-keyword">continue</span>;<br>inc(i,<span class="hljs-number">1</span>,tot)&#123;<br>    dp[i]=dp[i<span class="hljs-number">-1</span>]+d[c[i]][<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">1</span>)dp[i]=min(dp[i],dp[i<span class="hljs-number">-2</span>]+d[c[i]][<span class="hljs-number">0</span>]+d[c[i<span class="hljs-number">-1</span>]][<span class="hljs-number">0</span>]+<span class="hljs-number">1</span>);<br>&#125;<br>tot--;dp[<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br>inc(i,<span class="hljs-number">2</span>,tot)&#123;<br>    dp[i]=dp[i<span class="hljs-number">-1</span>]+d[c[i]][<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">2</span>)dp[i]=min(dp[i],dp[i<span class="hljs-number">-2</span>]+d[c[i]][<span class="hljs-number">0</span>]+d[c[i<span class="hljs-number">-1</span>]][<span class="hljs-number">0</span>]+<span class="hljs-number">1</span>);<br>&#125;<br>ans+=min(dp[tot+<span class="hljs-number">1</span>],dp[tot]+d[c[<span class="hljs-number">1</span>]][<span class="hljs-number">0</span>]+d[c[tot+<span class="hljs-number">1</span>]][<span class="hljs-number">0</span>]+<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>luogu4495(背包DP)</title>
      <link href="/luogu4495/"/>
      <url>/luogu4495/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.org/problem/P4495" target="_blank" rel="noopener">https://www.luogu.org/problem/P4495</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>题比较水。。</p><p>首先需要和 $P$ 取 $gcd$ 得到最小公差，然后就变成一个背包问题，两个物品合并的体积会变成他们的 $gcd$ 。。</p><p>考虑到 $P$ 的因子只有 $1000+$，所以直接开个容量为 $1000$ 的背包去合并，然后物品个数去重之后仍然为 $1000$ 个，转移的时候考虑乘上 $2^{num}-1$ 就可以了。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 2005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 1000005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><span class="hljs-keyword">int</span> n,m,mod,tot;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reduce</span><span class="hljs-params">(<span class="hljs-keyword">int</span>&amp;x)</span></span>&#123;x+=x&gt;&gt;<span class="hljs-number">31</span>&amp;inf;&#125;<br><span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt;mp;<br><span class="hljs-keyword">int</span> b[NM],c[NM],d[NM],p[nm];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();m=read();mod=read();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i*i&lt;mod;i++)<span class="hljs-keyword">if</span>(mod%i==<span class="hljs-number">0</span>)c[++tot]=mod/i;<br>    dec(i,<span class="hljs-built_in">sqrt</span>(mod),<span class="hljs-number">1</span>)<span class="hljs-keyword">if</span>(mod%i==<span class="hljs-number">0</span>)c[++tot]=i;<br>    inc(i,<span class="hljs-number">1</span>,tot)mp[c[i]]=i;<br>    inc(i,<span class="hljs-number">1</span>,n)b[mp[__gcd(mod,read())]]++;<br>    p[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;inc(i,<span class="hljs-number">1</span>,n)p[i]=p[i<span class="hljs-number">-1</span>]*<span class="hljs-number">2</span>%inf;<br>    d[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-comment">//inc(i,1,tot)printf("%d ",c[i]);putchar('\n');</span><br>    inc(i,<span class="hljs-number">1</span>,tot)&#123;<br>dec(j,tot,<span class="hljs-number">1</span>)reduce(d[mp[__gcd(c[j],c[i])]]+=<span class="hljs-number">1l</span>l*d[j]*(p[b[i]]<span class="hljs-number">-1</span>)%inf-inf);<br><span class="hljs-comment">//inc(j,1,tot)printf("%d ",d[j]);putchar('\n');</span><br>    &#125;<br>    <span class="hljs-comment">//inc(j,1,tot)printf("%d ",d[j]);putchar('\n');</span><br>    inc(i,<span class="hljs-number">1</span>,tot)&#123;<br>inc(j,i+<span class="hljs-number">1</span>,tot)<span class="hljs-keyword">if</span>(c[i]%c[j]==<span class="hljs-number">0</span>)reduce(d[i]+=d[j]-inf);<br>    &#125;<br>    <span class="hljs-comment">//inc(j,1,tot)printf("%d ",d[j]);putchar('\n');</span><br>    <span class="hljs-keyword">while</span>(m--)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,d[mp[__gcd(read(),mod)]]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>luogu4298(最大反链)</title>
      <link href="/luogu4298/"/>
      <url>/luogu4298/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.org/problem/P4298" target="_blank" rel="noopener">https://www.luogu.org/problem/P4298</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>这个就是求最大反链，由 konig 定理，最大反链等于最小链覆盖 </p><p>然后最小链覆盖和最小路径覆盖不同，他允许路径是重叠的，为了解决这个问题，我们求该图的传递闭包，那么对重叠的路径来说，在传递闭包上就可以表示成为不相交的路径，这样就变成了求最小路径覆盖，直接跑二分图即可。。</p><p>然后问题在输出方案，两边都在二分图最大独立集中的点即为最长反链，所以直接求最大独立集即可，需要在原图的基础上再对未匹配点跑一次 DFS 打标记。。</p><p>然后对于可行点的求解只能暴力枚举，去掉该点以及和他相通的点之后判断对反链大小的影响。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 105</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 200005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pi 3.1415926535897931</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp(x,y) make_pair(x,y)</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">1e9</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br> <br><br><br><span class="hljs-keyword">int</span> n,_x,_y,_ans;<br><span class="hljs-keyword">bool</span> a[NM][NM];<br><span class="hljs-keyword">bool</span> _v[NM],__v[NM],V[NM];<br><span class="hljs-keyword">int</span> v[NM],match[NM],ans,_match[NM];<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br>    inc(j,<span class="hljs-number">1</span>,n)<span class="hljs-keyword">if</span>(V[j]&amp;&amp;a[x][j]&amp;&amp;v[j]!=_x)&#123;<br>v[j]=_x;<br><span class="hljs-keyword">if</span>(!match[j]||dfs(match[j]))&#123;match[j]=x;<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;&#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">void</span> _dfs(<span class="hljs-keyword">int</span> x)&#123;<br>    __v[x]++;<br>    inc(j,<span class="hljs-number">1</span>,n)<span class="hljs-keyword">if</span>(a[x][j]&amp;&amp;!_v[j])&#123;<br>_v[j]++;<br>_dfs(match[j]);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();<span class="hljs-keyword">int</span> _=read();<span class="hljs-keyword">while</span>(_--)&#123;<br>_x=read();_y=read();a[_x][_y]++;<br>    &#125;<br>    inc(k,<span class="hljs-number">1</span>,n)inc(i,<span class="hljs-number">1</span>,n)<span class="hljs-keyword">if</span>(i!=k&amp;&amp;a[i][k])inc(j,<span class="hljs-number">1</span>,n)<span class="hljs-keyword">if</span>(i!=j&amp;&amp;k!=j&amp;&amp;a[k][j])a[i][j]=<span class="hljs-literal">true</span>;<br>    ans=n;<br>    inc(i,<span class="hljs-number">1</span>,n)V[i]=<span class="hljs-literal">true</span>;<br>    inc(i,<span class="hljs-number">1</span>,n)<span class="hljs-keyword">if</span>(dfs(_x=i))ans--;<br>    inc(i,<span class="hljs-number">1</span>,n)_match[match[i]]=i;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,ans);<br>    _ans=ans;<br>    inc(i,<span class="hljs-number">1</span>,n)<span class="hljs-keyword">if</span>(!_match[i])_dfs(i);<br>    inc(i,<span class="hljs-number">1</span>,n)<span class="hljs-keyword">if</span>(__v[i]&amp;&amp;!_v[i])<span class="hljs-built_in">putchar</span>(<span class="hljs-string">'1'</span>);<span class="hljs-keyword">else</span> <span class="hljs-built_in">putchar</span>(<span class="hljs-string">'0'</span>);<span class="hljs-built_in">putchar</span>(<span class="hljs-string">'\n'</span>);<br>    inc(k,<span class="hljs-number">1</span>,n)&#123;<br>inc(i,<span class="hljs-number">1</span>,n)<span class="hljs-keyword">if</span>(a[i][k]||a[k][i])V[i]=<span class="hljs-literal">false</span>;<span class="hljs-keyword">else</span> V[i]=<span class="hljs-literal">true</span>;<br>V[k]=<span class="hljs-literal">false</span>;<br>ans=<span class="hljs-number">0</span>;<br>inc(i,<span class="hljs-number">1</span>,n)<span class="hljs-keyword">if</span>(V[i])ans++;<br>mem(v);mem(match);<br>inc(i,<span class="hljs-number">1</span>,n)<span class="hljs-keyword">if</span>(V[i]&amp;&amp;dfs(_x=i))ans--;<br><span class="hljs-keyword">if</span>(ans+<span class="hljs-number">1</span>==_ans)<span class="hljs-built_in">putchar</span>(<span class="hljs-string">'1'</span>);<span class="hljs-keyword">else</span> <span class="hljs-built_in">putchar</span>(<span class="hljs-string">'0'</span>);<br>    &#125;<br>    <span class="hljs-built_in">putchar</span>(<span class="hljs-string">'\n'</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 二分图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bzoj2138(hall定理+线段树)</title>
      <link href="/bzoj2138/"/>
      <url>/bzoj2138/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=2138" target="_blank" rel="noopener">https://www.lydsy.com/JudgeOnline/problem.php?id=2138</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>感觉还是比较经典的。。</p><p>对前 $i-1$ 个区间排序，然后选定他们的子集来和 $i$ 并，</p><p>若该子集的并区间不连续，那么把他们分割后必然是更严格的条件，所以这个检验是冗余的。。</p><p>然后如果连续，那么被该并区间包含的区间是必选的，不选的话只会使得条件更加宽松。。</p><p>那么思路就有了，对前 $i-1$ 个区间进行排序，然后直接确定连续的区间作为 hall 定理的判定子集，即选定 $i,j$ ，使</p><script type="math/tex; mode=display">k_i-k_j\le a_{r_i}-a_{l_j-1}</script><p>然后分离变量之后会发现只需要维护最值就可以了，直接线段树做</p><p>由于插入 $i$ 时前 $i-1$ 个已经满足条件，所以我们选定的连续子集必须包含 $i$ ，所以这个最值可以在 $i$ 的两侧直接取得。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 40005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 200005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pi 3.1415926535897931</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp(x,y) make_pair(x,y)</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">1e9</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br> <br><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">P</span>&#123;</span><span class="hljs-keyword">int</span> l,r;&#125;c[NM];<br><span class="hljs-keyword">int</span> n,m,_x,_y,_z,<span class="hljs-keyword">_t</span>,p;<br><span class="hljs-keyword">int</span> a[NM],b[NM],id[NM],tmp[NM];<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<span class="hljs-keyword">return</span> c[x].l&lt;c[y].l||(c[x].l==c[y].l&amp;&amp;c[x].r&lt;c[y].r);&#125;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span>&#123;</span><br>    <span class="hljs-keyword">int</span> x,y,tag,_tag,s,_s;<br>    node*l,*r;<br>    node(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y,node*l=<span class="hljs-number">0</span>,node*r=<span class="hljs-number">0</span>):x(x),y(y),l(l),r(r),tag(<span class="hljs-number">0</span>),_tag(<span class="hljs-number">0</span>)&#123;<span class="hljs-keyword">if</span>(l)upd(),_upd();<span class="hljs-keyword">else</span> s=a[c[tmp[x]].r],_s=a[c[tmp[x]].l<span class="hljs-number">-1</span>];&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">upd</span><span class="hljs-params">()</span></span>&#123;s=min(l-&gt;s,r-&gt;s);&#125;<br>    <span class="hljs-keyword">void</span> _upd()&#123;_s=max(l-&gt;_s,r-&gt;_s);&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">if</span>(tag)&#123;<br>    l-&gt;s+=tag;l-&gt;tag+=tag;<br>    r-&gt;s+=tag;r-&gt;tag+=tag;<br>    tag=<span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(_tag)&#123;<br>    l-&gt;_s+=_tag;l-&gt;_tag+=_tag;<br>    r-&gt;_s+=_tag;r-&gt;_tag+=_tag;<br>    _tag=<span class="hljs-number">0</span>;<br>&#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">mod</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">if</span>(_x&lt;=x)&#123;tag-=<span class="hljs-keyword">_t</span>;s-=<span class="hljs-keyword">_t</span>;<span class="hljs-keyword">return</span>;&#125;<br>push();<span class="hljs-keyword">if</span>(_x&lt;=mid)l-&gt;mod();r-&gt;mod();upd();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ch</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">if</span>(_x&lt;=x)&#123;_tag-=<span class="hljs-keyword">_t</span>;_s-=<span class="hljs-keyword">_t</span>;<span class="hljs-keyword">return</span>;&#125;<br>push();<span class="hljs-keyword">if</span>(_x&lt;=mid)l-&gt;ch();r-&gt;ch();_upd();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">smin</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">if</span>(y&lt;_x)<span class="hljs-keyword">return</span> inf;<br><span class="hljs-keyword">if</span>(_x&lt;=x)<span class="hljs-keyword">return</span> s;<br>push();<span class="hljs-keyword">return</span> min(l-&gt;smin(),r-&gt;smin());<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">smax</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">if</span>(_x&lt;x)<span class="hljs-keyword">return</span> -inf;<br><span class="hljs-keyword">if</span>(y&lt;=_x)<span class="hljs-keyword">return</span> _s;<br>push();<span class="hljs-keyword">return</span> max(l-&gt;smax(),r-&gt;smax());<br>    &#125;<br>&#125;*root;<br><span class="hljs-function">node*<span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<span class="hljs-keyword">return</span> x==y?<span class="hljs-keyword">new</span> node(x,y):<span class="hljs-keyword">new</span> node(x,y,build(x,mid),build(mid+<span class="hljs-number">1</span>,y));&#125;<br><br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();<br>    _x=read();_y=read();_z=read();p=read();<br>    inc(i,<span class="hljs-number">1</span>,n)a[i]=(sqr(i-_x)%p+sqr(i-_y)%p+sqr(i-_z)%p)%p+a[i<span class="hljs-number">-1</span>];<br>    m=read();<span class="hljs-keyword">if</span>(m==<span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    b[<span class="hljs-number">1</span>]=read();b[<span class="hljs-number">2</span>]=read();_x=read();_y=read();_z=read();p=read();<br>    inc(i,<span class="hljs-number">3</span>,m)b[i]=(_x*b[i<span class="hljs-number">-1</span>]+_y*b[i<span class="hljs-number">-2</span>]+_z)%p;<br>    inc(i,<span class="hljs-number">1</span>,m)c[i].l=read(),c[i].r=read(),tmp[i]=i;<br>    sort(tmp+<span class="hljs-number">1</span>,tmp+<span class="hljs-number">1</span>+m,cmp);<br>    inc(i,<span class="hljs-number">1</span>,m)id[tmp[i]]=i;<br>    root=build(<span class="hljs-number">1</span>,m);<br>    <span class="hljs-comment">//inc(i,1,n)printf("%d ",a[i]-a[i-1]);putchar('\n');</span><br>    <span class="hljs-comment">//inc(i,1,m)printf("%d ",b[i]);putchar('\n');</span><br>    <span class="hljs-comment">//inc(i,1,m)printf("%d %d\n",c[i].l,c[i].r);putchar('\n');</span><br>    inc(i,<span class="hljs-number">1</span>,m)&#123;<br>_x=id[i];<br><span class="hljs-keyword">_t</span>=b[i]=min(b[i],root-&gt;smin()-root-&gt;smax());<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,b[i]);<br>root-&gt;mod();_x++;<span class="hljs-keyword">if</span>(_x&lt;=m)root-&gt;ch();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 二分图 </tag>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>arc076F(hall定理+线段树)</title>
      <link href="/arc076F/"/>
      <url>/arc076F/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://arc076.contest.atcoder.jp/tasks/arc076_d" target="_blank" rel="noopener">https://arc076.contest.atcoder.jp/tasks/arc076_d</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定 $m$ 个座位，有 $n$ 个人，他们只能坐在 $a_i$ 的左边或者 $b_i$ 的右边，问需要在 $m$ 个座位的两侧添加多少个座位使得每个人都有座位？</p><p>$n\le2\times10^5$</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>霍尔定理有个推论是这样表述的：</p><p>设二分图的两个点集为 $A、B$，其最大匹配数为 $\displaystyle|X|-\max_{S\subset A}{|S|-|N(S)|}$ ，其中 $N(S)$ 为 $S$ 的相邻点集</p><p>事实上，$\displaystyle\max_{S\subset A}{|S|-|N(S)|$ 为该二分图的最大失配数，也是本题所求</p><p>然而 $S$ 其实比较难枚举，而 $N(S)$ 就非常有特征，为区间前后缀的并，那么枚举$N(S)$ 来确定 $S$ 的大小就可以了。。</p><p>由于 $N(S)$ 有 $n^2$ 个，所以可以考虑枚举左端点用线段树维护右端点</p><p>另外，$N(S)$ 也可以为全集，此时答案为 $n-m$，如果用线段树维护会把前后缀交叉的部分重复计算，十分坑爹。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 200005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 200005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pi 3.1415926535897931</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp(x,y) make_pair(x,y)</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">1e9</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br> <br><br><br><span class="hljs-keyword">int</span> n,m,_x,cnt,ans;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">P</span>&#123;</span><span class="hljs-keyword">int</span> x,y;&#125;a[NM];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span>&#123;</span><br>    <span class="hljs-keyword">int</span> x,y,s,tag;<br>    node*l,*r;<br>    node(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y,node*l=<span class="hljs-number">0</span>,node*r=<span class="hljs-number">0</span>):x(x),y(y),l(l),r(r),s(<span class="hljs-number">0</span>),tag(<span class="hljs-number">0</span>)&#123;<span class="hljs-keyword">if</span>(l)upd();<span class="hljs-keyword">else</span> s=x-m<span class="hljs-number">-1</span>;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">upd</span><span class="hljs-params">()</span></span>&#123;s=max(l-&gt;s,r-&gt;s);&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">if</span>(tag)&#123;<br>    l-&gt;s+=tag;l-&gt;tag+=tag;<br>    r-&gt;s+=tag;r-&gt;tag+=tag;<br>    tag=<span class="hljs-number">0</span>;<br>&#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">mod</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">if</span>(y&lt;=_x)&#123;s++;tag++;<span class="hljs-keyword">return</span>;&#125;<br>push();<span class="hljs-keyword">if</span>(_x&gt;mid)r-&gt;mod();l-&gt;mod();upd();<br>    &#125;<br>&#125;*root;<br><span class="hljs-function">node*<span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<span class="hljs-keyword">return</span> x==y?<span class="hljs-keyword">new</span> node(x,y):<span class="hljs-keyword">new</span> node(x,y,build(x,mid),build(mid+<span class="hljs-number">1</span>,y));&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();m=read();<br>    ans=max(<span class="hljs-number">0</span>,n-m);<br>    inc(i,<span class="hljs-number">1</span>,n)a[i].x=read(),a[i].y=read();<br>    sort(a+<span class="hljs-number">1</span>,a+<span class="hljs-number">1</span>+n,[](P a,P b)&#123;<span class="hljs-keyword">return</span> a.x&lt;b.x;&#125;);<br>    root=build(<span class="hljs-number">1</span>,m+<span class="hljs-number">1</span>);<br>    cnt=<span class="hljs-number">1</span>;<br>    inc(i,<span class="hljs-number">0</span>,m)&#123;<br><span class="hljs-keyword">while</span>(cnt&lt;=n&amp;&amp;a[cnt].x==i)&#123;<br>    _x=a[cnt++].y;<br>    root-&gt;mod();<br>&#125;<br>ans=max(ans,root-&gt;s-i);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 二分图 </tag>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>loj6062(hall定理+线段树)</title>
      <link href="/loj6062/"/>
      <url>/loj6062/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://loj.ac/problem/6062" target="_blank" rel="noopener">https://loj.ac/problem/6062</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>这个题可以看成二分图完美匹配的判定，可以用 hall 定理求解，当固定子集大小，会发现其实最差的情况是选取最小的几个数，那么我们不妨对 $B$ 排序，然后看其前缀的相邻点数。维护相邻点数时，可以用线段树维护</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 150005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 200005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pi 3.1415926535897931</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp(x,y) make_pair(x,y)</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">1e9</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br> <br><br><br><span class="hljs-keyword">int</span> n,m,p,_x,<span class="hljs-keyword">_t</span>;<br><span class="hljs-keyword">int</span> a[NM],b[NM],ans;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span>&#123;</span><br>    <span class="hljs-keyword">int</span> x,y,s,tag;<br>    node*l,*r;<br>    node(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y,node*l=<span class="hljs-number">0</span>,node*r=<span class="hljs-number">0</span>):x(x),y(y),l(l),r(r),s(<span class="hljs-number">0</span>)&#123;<span class="hljs-keyword">if</span>(l)upd();<span class="hljs-keyword">else</span> s=-x;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">upd</span><span class="hljs-params">()</span></span>&#123;s=min(l-&gt;s,r-&gt;s);&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">if</span>(tag)&#123;<br>    l-&gt;s+=tag;l-&gt;tag+=tag;<br>    r-&gt;s+=tag;r-&gt;tag+=tag;<br>    tag=<span class="hljs-number">0</span>;<br>&#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">mod</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">if</span>(_x&lt;=x)&#123;s+=<span class="hljs-keyword">_t</span>;tag+=<span class="hljs-keyword">_t</span>;<span class="hljs-keyword">return</span>;&#125;<br>push();<span class="hljs-keyword">if</span>(_x&lt;=mid)l-&gt;mod();r-&gt;mod();upd();<br>    &#125;<br>&#125;*root;<br><span class="hljs-function">node*<span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<span class="hljs-keyword">return</span> x==y?<span class="hljs-keyword">new</span> node(x,y):<span class="hljs-keyword">new</span> node(x,y,build(x,mid),build(mid+<span class="hljs-number">1</span>,y));&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ins</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br>    _x=lower_bound(b+<span class="hljs-number">1</span>,b+<span class="hljs-number">1</span>+m,p-x)-b;<br>    <span class="hljs-keyword">if</span>(_x&lt;=m)root-&gt;mod();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();m=read();p=read();<br>    inc(i,<span class="hljs-number">1</span>,m)b[i]=read();<br>    inc(i,<span class="hljs-number">1</span>,n)a[i]=read();<br>    sort(b+<span class="hljs-number">1</span>,b+<span class="hljs-number">1</span>+m);<br>    root=build(<span class="hljs-number">1</span>,m);<br>    inc(i,<span class="hljs-number">1</span>,m)<span class="hljs-keyword">_t</span>=<span class="hljs-number">1</span>,ins(a[i]);<br>    <span class="hljs-keyword">if</span>(root-&gt;s&gt;=<span class="hljs-number">0</span>)ans++;<br>    inc(i,m+<span class="hljs-number">1</span>,n)&#123;<br><span class="hljs-keyword">_t</span>=<span class="hljs-number">1</span>;ins(a[i]);<br><span class="hljs-keyword">_t</span>=<span class="hljs-number">-1</span>;ins(a[i-m]);<br><span class="hljs-keyword">if</span>(root-&gt;s&gt;=<span class="hljs-number">0</span>)ans++;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 二分图 </tag>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uoj80(KM算法模板)</title>
      <link href="/uoj80/"/>
      <url>/uoj80/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://uoj.ac/problem/80" target="_blank" rel="noopener">http://uoj.ac/problem/80</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>二分图最大权匹配可以用费用流求解，但是当图比较稠密时，费用流的效率就会变得十分低下，因而使用 KM 算法代替</p><p>KM 算法本用于解决二分图完美匹配问题，所以在构造图的时候需要将图补成一个左右节点相同的完全二分图，即补上一些虚点和虚边使得完美匹配一定存在，且最大完美匹配等于原图的最大权匹配</p><p>然后复杂度是 $O(n^3)$ ，其实速度也不是很快，仅适用于完全图</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 405</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 200005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pi 3.1415926535897931</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp(x,y) make_pair(x,y)</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">1e9</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br> <br><br><br><span class="hljs-keyword">int</span> n,m,p,_x,_y,a[NM][NM];<br><span class="hljs-keyword">int</span> pre[NM],match[NM],_match[NM];<br><span class="hljs-keyword">int</span> b[NM],lx[NM],ly[NM];<br><span class="hljs-keyword">bool</span> v[NM];<br>ll ans;<br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">km</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>    inc(i,<span class="hljs-number">1</span>,n)&#123;<br><span class="hljs-keyword">int</span> y=<span class="hljs-number">0</span>;<br>mem(v);match[<span class="hljs-number">0</span>]=i;<br>inc(j,<span class="hljs-number">1</span>,n)b[j]=inf;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> t;match[y];y=t)&#123;<br>    <span class="hljs-keyword">int</span> s=inf,x=match[y];v[y]++;<br>    inc(j,<span class="hljs-number">1</span>,n)<span class="hljs-keyword">if</span>(!v[j])&#123;<br><span class="hljs-keyword">if</span>(b[j]&gt;lx[x]+ly[j]-a[x][j])b[j]=lx[x]+ly[j]-a[x][j],pre[j]=y;<br><span class="hljs-keyword">if</span>(s&gt;b[j])s=b[j],t=j;<br>    &#125;<br>    inc(j,<span class="hljs-number">0</span>,n)<span class="hljs-keyword">if</span>(v[j])lx[match[j]]-=s,ly[j]+=s;<span class="hljs-keyword">else</span> b[j]-=s;<br>&#125;<br><span class="hljs-keyword">for</span>(;y;y=pre[y])match[y]=match[pre[y]];<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();m=read();p=read();<br>    <span class="hljs-keyword">while</span>(p--)&#123;<br>_x=read();_y=read();a[_x][_y]=read();<br>    &#125;<br>    km(max(n,m));<br>    inc(j,<span class="hljs-number">1</span>,m)<span class="hljs-keyword">if</span>(match[j])&#123;<br>ans+=ly[j]+lx[match[j]];<br><span class="hljs-keyword">if</span>(a[match[j]][j])_match[match[j]]=j;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br>    inc(i,<span class="hljs-number">1</span>,n)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d%c"</span>,_match[i],<span class="hljs-string">" \n"</span>[i==n]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 二分图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gym102059C(DP)</title>
      <link href="/gym102059C/"/>
      <url>/gym102059C/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://codeforces.com/gym/102059/problem/C" target="_blank" rel="noopener">https://codeforces.com/gym/102059/problem/C</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>在一维坐标上，有 $R$ 和 $H$ ，$R$ 向右走，$H$ 向左走，当 $R$ 和 $H$ 相遇时 $R$ 有 $p$ 概率消失，$H$ 有 $1-p$ 概率消失。问最后剩下 $A$ 个 $R$ 和 $B$ 个 $H$ 的概率</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>首先注意到最后会被分成两波，设分界点为 $t$ ，那么小于 $t$ 的一侧只有 $H$ 存活，大于 $t$ 的一侧只有 $R$ 存活</p><p>那么问题就是求前 $i$ 个里面，后面 $B$ 个 $H$ 的概率</p><p>然后就在这里自闭了很久。。</p><p>正解是设 $d[i][j]$ 为到第 $i$ 时，后面还会有 $j$ 个 $H$ 的概率，有</p><script type="math/tex; mode=display">d[i][j]=\left\{\begin{matrix}d[i-1][j+1]&s[i]=H\\d[i-1][j]t+d[i][j-1](1-t)&s[i]=R\end{matrix}\right.</script><p>当接受一个 $H$ 时，显然 $j$ 要减一。当接受一个 $R$ 时，若他被下一个 $H$ 击败，那么过来的还是只有 $j$ 个 $H$ ，若他击败了下一个 $H$ ，相当于需要增多一个 $H$ 。</p><p>然后从 $d[0][B]$ 开始 $DP$ 就可以了。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 5005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 2097152</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">qpow</span><span class="hljs-params">(ll x,ll t)</span></span>&#123;<br>    ll s=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(;t;t&gt;&gt;=<span class="hljs-number">1</span>,x=x*x%inf)<span class="hljs-keyword">if</span>(t&amp;<span class="hljs-number">1</span>)s=s*x%inf;<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br><span class="hljs-keyword">int</span> n;<br>ll <span class="hljs-keyword">_t</span>,d[NM][NM],g[NM][NM],ans;<br><span class="hljs-keyword">char</span> _s[NM];<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();<span class="hljs-keyword">_t</span>=read();<span class="hljs-keyword">_t</span>=<span class="hljs-keyword">_t</span>*qpow(read()+<span class="hljs-keyword">_t</span>,inf<span class="hljs-number">-2</span>)%inf;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>,_s+<span class="hljs-number">1</span>);<br>    g[n+<span class="hljs-number">1</span>][read()]=<span class="hljs-number">1</span>;d[<span class="hljs-number">0</span>][read()]=<span class="hljs-number">1</span>;<br>    inc(i,<span class="hljs-number">1</span>,n)<span class="hljs-keyword">if</span>(_s[i]==<span class="hljs-string">'H'</span>)&#123;<br>inc(j,<span class="hljs-number">0</span>,n)d[i][j]=d[i<span class="hljs-number">-1</span>][j+<span class="hljs-number">1</span>];<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>inc(j,<span class="hljs-number">1</span>,n)d[i][j]=(d[i<span class="hljs-number">-1</span>][j]*<span class="hljs-keyword">_t</span>+d[i][j<span class="hljs-number">-1</span>]*(inf+<span class="hljs-number">1</span>-<span class="hljs-keyword">_t</span>))%inf;<br>    &#125;<br>    dec(i,n,<span class="hljs-number">1</span>)<span class="hljs-keyword">if</span>(_s[i]==<span class="hljs-string">'R'</span>)&#123;<br>inc(j,<span class="hljs-number">0</span>,n)g[i][j]=g[i+<span class="hljs-number">1</span>][j+<span class="hljs-number">1</span>];<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>inc(j,<span class="hljs-number">1</span>,n)g[i][j]=(g[i+<span class="hljs-number">1</span>][j]*(inf+<span class="hljs-number">1</span>-<span class="hljs-keyword">_t</span>)+g[i][j<span class="hljs-number">-1</span>]*<span class="hljs-keyword">_t</span>)%inf;<br>    &#125;<br>    inc(i,<span class="hljs-number">0</span>,n)ans+=d[i][<span class="hljs-number">0</span>]*g[i+<span class="hljs-number">1</span>][<span class="hljs-number">0</span>],ans%=inf;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>luogu4389(多项式指数函数)</title>
      <link href="/luogu4389/"/>
      <url>/luogu4389/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.org/problem/P4389" target="_blank" rel="noopener">https://www.luogu.org/problem/P4389</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>用多项式表示就是</p><script type="math/tex; mode=display">\begin{aligned}\prod_{i=1}^n\frac1{1-x^{v_i}}=&e^{\displaystyle-\sum_{i=1}^n \ln(1-x^i)}\\=&e^{\displaystyle\sum_{i=1}^n\sum_j\frac{x^{ij}}{j}}\end{aligned}</script><p>然后直接按值分类暴力求解指数即可，然后上多项式指数函数</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 300000</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 2097152</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">998244353</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reduce</span><span class="hljs-params">(ll&amp;x)</span></span>&#123;x+=x&gt;&gt;<span class="hljs-number">63</span>&amp;inf;&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">qpow</span><span class="hljs-params">(ll x,ll t)</span></span>&#123;<br>    ll s=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(;t;t&gt;&gt;=<span class="hljs-number">1</span>,x=x*x%inf)<span class="hljs-keyword">if</span>(t&amp;<span class="hljs-number">1</span>)s=s*x%inf;<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br><span class="hljs-keyword">int</span> n,m;<br>ll a[NM],b[NM],inv[NM];<br><span class="hljs-keyword">int</span> v[NM];<br><br><br><span class="hljs-keyword">namespace</span> Poly&#123;<br>    <span class="hljs-keyword">int</span> lim,bit,rev[NM],w[NM],W[NM];<br>    ll invn;<br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">clear</span><span class="hljs-params">(ll*a,ll*b)</span></span>&#123;<span class="hljs-keyword">if</span>(a&lt;b)<span class="hljs-built_in">memset</span>(a,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(ll)*(b-a));&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-keyword">int</span> m)</span></span>&#123;<br><span class="hljs-keyword">for</span>(lim=<span class="hljs-number">1</span>,bit=<span class="hljs-number">0</span>;lim&lt;m;lim&lt;&lt;=<span class="hljs-number">1</span>)bit++;invn=qpow(lim,inf<span class="hljs-number">-2</span>);<br>inc(i,<span class="hljs-number">1</span>,lim<span class="hljs-number">-1</span>)rev[i]=(rev[i&gt;&gt;<span class="hljs-number">1</span>]&gt;&gt;<span class="hljs-number">1</span>)|((i&amp;<span class="hljs-number">1</span>)&lt;&lt;(bit<span class="hljs-number">-1</span>));<br>ll t=qpow(<span class="hljs-number">3</span>,(inf<span class="hljs-number">-1</span>)/lim);W[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>inc(i,<span class="hljs-number">1</span>,lim)W[i]=W[i<span class="hljs-number">-1</span>]*t%inf;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fft</span><span class="hljs-params">(ll*a,<span class="hljs-keyword">int</span> f=<span class="hljs-number">0</span>)</span></span>&#123;<br><span class="hljs-keyword">int</span> n=lim;<br>inc(i,<span class="hljs-number">1</span>,n<span class="hljs-number">-1</span>)<span class="hljs-keyword">if</span>(i&lt;rev[i])swap(a[i],a[rev[i]]);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">1</span>;k&lt;n;k&lt;&lt;=<span class="hljs-number">1</span>)&#123;<br>    <span class="hljs-keyword">int</span> t=n/k&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>,j=<span class="hljs-number">0</span>;i&lt;k;i++,j+=t)w[i]=W[f?n-j:j];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i+=k&lt;&lt;<span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;k;j++)&#123;<br>    ll x=a[i+j],y=w[j]*a[i+j+k]%inf;<br>    reduce(a[i+j]=x+y-inf);reduce(a[i+j+k]=x-y);<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(f)inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)a[i]=a[i]*invn%inf;<br>    &#125;<br>    ll _a[NM];<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">inv</span><span class="hljs-params">(ll*b,ll*a,<span class="hljs-keyword">int</span> m)</span></span>&#123;<br><span class="hljs-keyword">if</span>(m==<span class="hljs-number">1</span>)&#123;b[<span class="hljs-number">0</span>]=qpow(a[<span class="hljs-number">0</span>],inf<span class="hljs-number">-2</span>);<span class="hljs-keyword">return</span>;&#125;<br>inv(b,a,m+<span class="hljs-number">1</span>&gt;&gt;<span class="hljs-number">1</span>);init(m&lt;&lt;<span class="hljs-number">1</span>);<br>copy(a,a+m,_a);clear(_a+m,_a+lim);clear(b+(m+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>,b+lim);<br>fft(b);fft(_a);<br>inc(i,<span class="hljs-number">0</span>,lim<span class="hljs-number">-1</span>)b[i]=b[i]*(<span class="hljs-number">2</span>-_a[i]*b[i]%inf+inf)%inf;<br>fft(b,<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ln</span><span class="hljs-params">(ll*b,ll*a,<span class="hljs-keyword">int</span> m)</span></span>&#123;<br>inv(b,a,m);<br>inc(i,<span class="hljs-number">0</span>,m<span class="hljs-number">-2</span>)_a[i]=a[i+<span class="hljs-number">1</span>]*(i+<span class="hljs-number">1</span>)%inf;<br>init(m&lt;&lt;<span class="hljs-number">1</span>);<br>clear(_a+m<span class="hljs-number">-1</span>,_a+lim);clear(b+m,b+lim);<br>fft(_a);fft(b);<br>inc(i,<span class="hljs-number">0</span>,lim<span class="hljs-number">-1</span>)b[i]=b[i]*_a[i]%inf;<br>fft(b,<span class="hljs-number">1</span>);<br>dec(i,m<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>)b[i]=b[i<span class="hljs-number">-1</span>]*::inv[i]%inf;b[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br>    &#125;<br>    ll _b[NM];<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">exp</span><span class="hljs-params">(ll*b,ll*a,<span class="hljs-keyword">int</span> m)</span></span>&#123;<br><span class="hljs-keyword">if</span>(m==<span class="hljs-number">1</span>)&#123;b[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<span class="hljs-keyword">return</span>;&#125;<br><span class="hljs-built_in">exp</span>(b,a,m+<span class="hljs-number">1</span>&gt;&gt;<span class="hljs-number">1</span>);<br>clear(b+(m+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>,b+m);<br>ln(_b,b,m);<br>inc(i,<span class="hljs-number">0</span>,m<span class="hljs-number">-1</span>)reduce(_b[i]=a[i]-_b[i]);_b[<span class="hljs-number">0</span>]++;<br>clear(_b+m,_b+lim);clear(b+m,b+lim);<br>fft(_b);fft(b);<br>inc(i,<span class="hljs-number">0</span>,lim<span class="hljs-number">-1</span>)b[i]=b[i]*_b[i]%inf;<br>fft(b,<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();m=read();<br>    inv[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    inc(i,<span class="hljs-number">2</span>,m)inv[i]=inv[inf%i]*(inf-inf/i)%inf;<br>    inc(i,<span class="hljs-number">1</span>,n)v[read()]++;<br>    inc(i,<span class="hljs-number">1</span>,m)<span class="hljs-keyword">if</span>(v[i])<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=i,k=<span class="hljs-number">1</span>;j&lt;=m;j+=i,k++)a[j]+=inv[k]*v[i],a[j]%=inf;<br>    Poly::<span class="hljs-built_in">exp</span>(b,a,m+<span class="hljs-number">1</span>);<br>    inc(i,<span class="hljs-number">1</span>,m)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,b[i]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> FFT </tag>
            
            <tag> 组合数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>luogu2159(DP+容斥)</title>
      <link href="/luogu2159/"/>
      <url>/luogu2159/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.org/problem/P2159" target="_blank" rel="noopener">https://www.luogu.org/problem/P2159</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>这里发现求大于 $j$ 的方案数是比较好求的</p><p>设 $d[i][j]$ 为到 $i$ 时限定 $j$ 个女生大于男生，其余随意的方案数</p><script type="math/tex; mode=display">d[i][j]=d[i-1][j]+d[i-1][j-1]*(cnt-j+1)</script><p>这里 $cnt$ 为身高小于 $i$ 女生的男生数</p><p>这里会发现方案数是被计重的，设最后的 $DP$ 值为 $f[k]$ ，正好有 $k$ 个女生大于男生的方案数为 $g[k]$ ，则</p><script type="math/tex; mode=display">f[j]=\sum_{k=j}^n\binom kjg[k]</script><p>那么根据二项式反演得到</p><script type="math/tex; mode=display">g[j]=\sum_{k=j}^n(-1)^{j-k}\binom kjf[k]</script><p>这个式子也可以用容斥意义得到</p><p><br></p><p>另外一个方法是依次求出 $g$ ，即</p><script type="math/tex; mode=display">g[j]=f[j]-\sum_{k=j+1}^n\binom kjg[k]</script><p>倒着求解就可以了。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python">n,m=map(int,input().split())<br>a=[<span class="hljs-number">0</span>]<br>b=[<span class="hljs-number">0</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(n):<br>    b.append(int(input()))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(n):<br>    a.append(int(input()))<br>a=sorted(a)<br>b=sorted(b)<br>d=[<span class="hljs-number">0</span>]*(n+<span class="hljs-number">1</span>)<br>d[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span><br>cnt=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">while</span> cnt&lt;=n <span class="hljs-keyword">and</span> a[i]&gt;b[cnt]:<br>        cnt+=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(i,<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>):<br>        <span class="hljs-keyword">if</span> cnt-j&gt;<span class="hljs-number">0</span>:<br>        d[j]+=d[j<span class="hljs-number">-1</span>]*(cnt-j)<br><br>p=[<span class="hljs-number">1</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(n):<br>    p.append(p[i]*(i+<span class="hljs-number">1</span>))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(n+<span class="hljs-number">1</span>):<br>    d[i]=d[i]*p[n-i]<br><br><br>c=[[<span class="hljs-number">0</span>]*(n+<span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(n+<span class="hljs-number">1</span>)]<br>c[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(n):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(i+<span class="hljs-number">1</span>):<br>        c[i+<span class="hljs-number">1</span>][j]+=c[i][j]<br>        c[i+<span class="hljs-number">1</span>][j+<span class="hljs-number">1</span>]+=c[i][j]<br><br>f=[<span class="hljs-number">0</span>]*(n+<span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>,n+<span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(i,n+<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> (j-i)&amp;<span class="hljs-number">1</span>:<br>            f[i]-=d[j]*c[j][i]<br>        <span class="hljs-keyword">else</span>:<br>            f[i]+=d[j]*c[j][i]<br>ans=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>,m+<span class="hljs-number">1</span>):<br>    ans+=f[i]<br>print(ans)<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 组合数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hackerrank-subset(折半)</title>
      <link href="/subset/"/>
      <url>/subset/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.hackerrank.com/contests/countercode/challenges/subset/problem" target="_blank" rel="noopener">https://www.hackerrank.com/contests/countercode/challenges/subset/problem</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>操作1：在集合中插入一个元素<br>操作2：在集合中删除一个元素<br>操作3：查询集合中有多少个元素满足 $a\&amp;s=a$</p><p>操作次数 $\le2\times10^5$ ，操作数 $\lt2^{16}$</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>直接考虑暴力，那么要么修改是 $O(n)$ 的，要么查询是 $O(n)$ 的</p><p>所以可以考虑均衡一下，修改的时候直接保留前 8 位，维护后 8 位，查询的时候直接枚举前 8 位，查询后 8 位</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 1005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 2097152</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">1e9</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><span class="hljs-keyword">int</span> x,y,d[<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">8</span>][<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">8</span>];<br><span class="hljs-keyword">char</span> _s[<span class="hljs-number">5</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> _=read();<span class="hljs-keyword">while</span>(_--)&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>,_s);x=read();y=x&gt;&gt;<span class="hljs-number">8</span>;x-=y&lt;&lt;<span class="hljs-number">8</span>;<br><span class="hljs-keyword">if</span>(_s[<span class="hljs-number">0</span>]==<span class="hljs-string">'a'</span>)&#123;<br>    <span class="hljs-keyword">int</span> t=<span class="hljs-number">255</span>^x;d[y][x]++;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=t;i;i=t&amp;(i<span class="hljs-number">-1</span>))d[y][i|x]++;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(_s[<span class="hljs-number">0</span>]==<span class="hljs-string">'d'</span>)&#123;<br>    <span class="hljs-keyword">int</span> t=<span class="hljs-number">255</span>^x;d[y][x]--;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=t;i;i=t&amp;(i<span class="hljs-number">-1</span>))d[y][i|x]--;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">int</span> s=d[<span class="hljs-number">0</span>][x];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=y;i;i=y&amp;(i<span class="hljs-number">-1</span>))s+=d[i][x];<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,s);<br>&#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> unclassified </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spojKOSARE(FMT)</title>
      <link href="/spojKOSARE/"/>
      <url>/spojKOSARE/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.spoj.com/problems/KOSARE/" target="_blank" rel="noopener">https://www.spoj.com/problems/KOSARE/</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定 $n$ 箱玩具，每箱玩具有若干种玩具，总共有 $m$ 种玩具，选定若干箱玩具使他们的并为 $m$ 种玩具，问有多少种选法</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>这个和上道题其实差不多，可以考虑组合意义，设当前 $j$ 的子集有 $d[j]$ 个，那么选的方案有 $2^{d[j]}$ ，然后再做一次 IFMT 就可以了</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 140005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 1048576</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reduce</span><span class="hljs-params">(ll&amp;x)</span></span>&#123;x+=x&gt;&gt;<span class="hljs-number">63</span>&amp;inf;&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">qpow</span><span class="hljs-params">(ll x,ll t)</span></span>&#123;<br>    ll s=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(;t;t&gt;&gt;=<span class="hljs-number">1</span>,x=x*x%inf)<span class="hljs-keyword">if</span>(t&amp;<span class="hljs-number">1</span>)s=s*x%inf;<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br><span class="hljs-keyword">int</span> n,m;<br>ll a[nm];<br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fmt</span><span class="hljs-params">(ll*a)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;k&lt;m;k++)<br>inc(i,<span class="hljs-number">0</span>,n)<span class="hljs-keyword">if</span>(i&gt;&gt;k&amp;<span class="hljs-number">1</span>)<br>    a[i]+=a[i^succ(k)];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ifmt</span><span class="hljs-params">(ll*a)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;k&lt;m;k++)<br>inc(i,<span class="hljs-number">0</span>,n)<span class="hljs-keyword">if</span>(i&gt;&gt;k&amp;<span class="hljs-number">1</span>)<br>    reduce(a[i]-=a[i^succ(k)]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();m=read();<br>    inc(i,<span class="hljs-number">1</span>,n)&#123;<br><span class="hljs-keyword">int</span> t=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> cnt=read();<br><span class="hljs-keyword">while</span>(cnt--)t|=succ(read()<span class="hljs-number">-1</span>);<br>a[t]++;<br>    &#125;<br>    n=succ(m)<span class="hljs-number">-1</span>;<br>    fmt(a);<br>    inc(i,<span class="hljs-number">0</span>,n)a[i]=qpow(<span class="hljs-number">2</span>,a[i]);<br>    ifmt(a);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,a[n]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> FFT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>loj153(集合覆盖计数)</title>
      <link href="/loj153/"/>
      <url>/loj153/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://loj.ac/problem/153" target="_blank" rel="noopener">https://loj.ac/problem/153</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>挺经典的题。。</p><p>这个题可以借鉴上次做 FWT 的思想，设 $d[i][j]$ 为选 $i$ 个集合时集合并为 $j$ 的子集的方案数(有顺序)</p><p>那么 $d[1][j]$ 显然可以 FMT 求得</p><p>然后对于 $d[i][j]$ 考虑在 $i-1$ 的基础上再加一个元素，并去重</p><script type="math/tex; mode=display">d[i][j]=d[i-1][j]\times d[1][j]-(i-1)d[i-1][j]</script><p>可以得到</p><script type="math/tex; mode=display">d[i][j]=d[1][j]^{\underline{i}}</script><p>然后将顺序去掉之后发现需要求</p><script type="math/tex; mode=display">\sum_{j=1}^{k}\frac{d[1][j]^{\underline{i}}}{i!}=\sum_{j=1}^k\binom{d[1][j]}{i}</script><p>从组合意义上讲，就是在做子集变换之后从中选 $i$ 个集合。。</p><p>结论是窝原来绕了一大圈求了个组合数。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 140005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 4194304</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">998244353</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reduce</span><span class="hljs-params">(ll&amp;x)</span></span>&#123;x+=x&gt;&gt;<span class="hljs-number">63</span>&amp;inf;&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">qpow</span><span class="hljs-params">(ll x,ll t)</span></span>&#123;<br>    ll s=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(;t;t&gt;&gt;=<span class="hljs-number">1</span>,x=x*x%inf)<span class="hljs-keyword">if</span>(t&amp;<span class="hljs-number">1</span>)s=s*x%inf;<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br><span class="hljs-keyword">int</span> n,m,p;<br>ll a[nm],inv[NM];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fmt</span><span class="hljs-params">(ll*a)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;k&lt;m;k++)<br>inc(i,<span class="hljs-number">0</span>,n)<span class="hljs-keyword">if</span>(i&gt;&gt;k&amp;<span class="hljs-number">1</span>)<br>    reduce(a[i]+=a[i^succ(k)]-inf);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ifmt</span><span class="hljs-params">(ll*a)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;k&lt;m;k++)<br>inc(i,<span class="hljs-number">0</span>,n)<span class="hljs-keyword">if</span>(i&gt;&gt;k&amp;<span class="hljs-number">1</span>)<br>    reduce(a[i]-=a[i^succ(k)]);<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    m=read();n=read();p=read();<br>    inv[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    inc(i,<span class="hljs-number">2</span>,p)inv[i]=inv[inf%i]*(inf-inf/i)%inf;<br>    inc(i,<span class="hljs-number">1</span>,n)a[read()]++;<br>    n=succ(m)<span class="hljs-number">-1</span>;<br>    fmt(a);<br>    inc(i,<span class="hljs-number">0</span>,n)&#123;<br>ll t=a[i],cnt=a[i];<br>inc(k,<span class="hljs-number">2</span>,p)&#123;<br>    cnt=cnt*(t-k+<span class="hljs-number">1</span>)%inf*inv[k]%inf;<br>    reduce(a[i]+=cnt-inf);<br>&#125;<br>    &#125;<br>    ifmt(a);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,a[n]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> FFT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cf383E(SOSDP)</title>
      <link href="/cf383E/"/>
      <url>/cf383E/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://codeforces.com/contest/383/problem/E" target="_blank" rel="noopener">https://codeforces.com/contest/383/problem/E</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>有 $n$ 个单词，每个单词有三个字母，果其中有一个元音，我们就称这个单词是合法的，元音的集合有 $2^{24}$ 种可能，求这 $2^{24}$ 种元音集合的正确单词数的平方的异或和。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>可以把每个单词表示成一个集合，然后看有哪些集合包含了这三个元素中的任意一个。如果只有一个元素显然直接 FWT ，有三个可以先容斥后再 FWT</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 1000005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 16777216</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><span class="hljs-keyword">int</span> n,a[nm];<br><span class="hljs-keyword">char</span> _s[<span class="hljs-number">5</span>];<br>ll ans;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fmt</span><span class="hljs-params">(<span class="hljs-keyword">int</span>*a)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">23</span>;i++)<br>inc(j,<span class="hljs-number">0</span>,n)<span class="hljs-keyword">if</span>(j&gt;&gt;i&amp;<span class="hljs-number">1</span>)<br>    a[j]+=a[j^<span class="hljs-number">1</span>&lt;&lt;i];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();<br>    inc(i,<span class="hljs-number">1</span>,n)&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>,_s);<br>sort(_s,_s+<span class="hljs-number">3</span>);<br><span class="hljs-keyword">int</span> m=unique(_s,_s+<span class="hljs-number">3</span>)-_s;<br><span class="hljs-keyword">int</span> t=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span>(m==<span class="hljs-number">3</span>)&#123;<br>    inc(j,<span class="hljs-number">0</span>,m<span class="hljs-number">-1</span>)t|=succ(_s[j]-<span class="hljs-string">'a'</span>),a[succ(_s[j]-<span class="hljs-string">'a'</span>)]++;<br>    a[t]++;<br>    inc(j,<span class="hljs-number">0</span>,m<span class="hljs-number">-1</span>)a[t^succ(_s[j]-<span class="hljs-string">'a'</span>)]--;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(m==<span class="hljs-number">2</span>)&#123;<br>    inc(j,<span class="hljs-number">0</span>,m<span class="hljs-number">-1</span>)t|=succ(_s[j]-<span class="hljs-string">'a'</span>),a[succ(_s[j]-<span class="hljs-string">'a'</span>)]++;<br>    a[t]--;<br>&#125;<span class="hljs-keyword">else</span> a[succ(_s[<span class="hljs-number">0</span>]-<span class="hljs-string">'a'</span>)]++;<br>    &#125;<br>    n=<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">24</span>;n--;<br>    fmt(a);<br>    inc(i,<span class="hljs-number">0</span>,n)assert(a[i]&gt;=<span class="hljs-number">0</span>),ans^=<span class="hljs-number">1l</span>l*a[i]*a[i];<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> FFT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cf1208F(SOSDP)</title>
      <link href="/cf1208F/"/>
      <url>/cf1208F/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://codeforces.com/contest/1208/problem/F" target="_blank" rel="noopener">https://codeforces.com/contest/1208/problem/F</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定长度为 $n(n\le10^6)$ 的序列 $A$ ，求 $\max_{i&lt;j&lt;k} a_i|(a_j\&amp;a_k)$</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>所谓 SOSDP 其实就是对 FMT 的一个深入理解</p><p>做 FMT 的时候我们通过分治将一位一位的包含关系解决</p><p>以或为例，设 $dp[i][j]$ 为 $j$ 的子集和，且除了后 $i$ 位外其他都是固定的，那么有</p><script type="math/tex; mode=display">dp[i][j]=\left\{\begin{matrix}d[i][j]& j\notin i\\ d[i][j-1]+d[i][j\oplus1<<i]&j\in i\\\end{matrix}\right .</script><p>如果利用滚动数组优化就变成了 FMT</p><p><br></p><p>对这个题，由于求的是或，所以要用另一个方向的 FMT，然后单点修改就可以了。。</p><p>一次修改的复杂度应该也是 $O(nlogn)$ 的，但是由于每个点最多被修改两次，所以单点考虑贡献的话复杂度还是 $O(nlogn)$ </p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 1000005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 2097152</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><span class="hljs-keyword">int</span> n,a[NM],d[nm],ans;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">upd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> k,<span class="hljs-keyword">int</span> t)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(d[t]&gt;<span class="hljs-number">1</span>)<span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span>(k&gt;<span class="hljs-number">20</span>)&#123;d[t]++;<span class="hljs-keyword">return</span>;&#125;<br>    upd(k+<span class="hljs-number">1</span>,t);<br>    <span class="hljs-keyword">if</span>(t&gt;&gt;k&amp;<span class="hljs-number">1</span>)upd(k,t^succ(k));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();<br>    inc(i,<span class="hljs-number">1</span>,n)a[i]=read();<br>    dec(i,n,<span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">int</span> t=<span class="hljs-number">0</span>,s=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">20</span>;k&gt;=<span class="hljs-number">0</span>;k--)<span class="hljs-keyword">if</span>(a[i]&gt;&gt;k&amp;<span class="hljs-number">1</span>)s|=succ(k);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(d[t|succ(k)]&gt;<span class="hljs-number">1</span>)t|=succ(k),s|=succ(k);<br><span class="hljs-keyword">if</span>(i&lt;=n<span class="hljs-number">-2</span>)ans=max(ans,s);<br>upd(<span class="hljs-number">0</span>,a[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>now882B(线性递推)</title>
      <link href="/now882B/"/>
      <url>/now882B/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://ac.nowcoder.com/acm/contest/882/B" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/contest/882/B</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>在一个无限长的数轴上，一个人从 $0$ 开始向右走，每次在 $1\sim m$ 中等概率地选一个数 $m$，然后向右走 $k$ 步。问经过 $n$ 的概率</p><p>当 $n=-1$ 表示 $n\rightarrow \infty$</p><p>$m\le1021,-1\le n\le10^{18}$</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>设经过 $n$ 的概率为 $p_n$</p><script type="math/tex; mode=display">\begin{eqnarray}1-p_n&=&\sum_{k=1}^{m-1}\frac{m-k}{m}p_{n-k}\\p_n&=&1-\sum_{k=1}^{m-1}\frac{m-k}{m}p_{n-k}\\p_n-\frac{2}{m+1}&=&\sum_{k=1}^{m-1}\frac{m-k}{m}(p_{n-k}-\frac{2}{m+1})\end{eqnarray}</script><p>然后直接上线性递推板子就可以。。</p><p>由于模数不是 $NTT$ 模数，所以这里直接暴力多项式乘法和取模。。目测也可以 $MTT$</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 5005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 400005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reduce</span><span class="hljs-params">(ll&amp;x)</span></span>&#123;x+=x&gt;&gt;<span class="hljs-number">63</span>&amp;inf;&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">qpow</span><span class="hljs-params">(ll x,ll t)</span></span>&#123;<br>    ll s=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(;t;t&gt;&gt;=<span class="hljs-number">1</span>,x=x*x%inf)<span class="hljs-keyword">if</span>(t&amp;<span class="hljs-number">1</span>)s=s*x%inf;<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br><span class="hljs-keyword">int</span> m;<br>ll inv[NM],n;<br>ll a[NM],b[NM],c[NM];<br><br><br><span class="hljs-keyword">namespace</span> Poly&#123;<br>    ll _a[NM];<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">clear</span><span class="hljs-params">(ll*a,ll*b)</span></span>&#123;<span class="hljs-built_in">memset</span>(a,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(ll)*(b-a));&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">mul</span><span class="hljs-params">(ll*c,ll*a,ll*b,<span class="hljs-keyword">int</span> n,<span class="hljs-keyword">int</span> m)</span></span>&#123;<br>clear(c,c+n+m);<br>inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)<span class="hljs-keyword">if</span>(a[i])inc(j,<span class="hljs-number">0</span>,m<span class="hljs-number">-1</span>)c[i+j]+=a[i]*b[j],c[i+j]%=inf;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">mod</span><span class="hljs-params">(ll*a,ll*b,<span class="hljs-keyword">int</span> n,<span class="hljs-keyword">int</span> m)</span></span>&#123;<br>dec(j,n<span class="hljs-number">-1</span>,m<span class="hljs-number">-1</span>)<span class="hljs-keyword">if</span>(a[j])&#123;<br>    ll t=a[j]*qpow(b[m<span class="hljs-number">-1</span>],inf<span class="hljs-number">-2</span>)%inf;<br>    inc(i,<span class="hljs-number">0</span>,m<span class="hljs-number">-1</span>)reduce(a[j-i]-=t*b[m<span class="hljs-number">-1</span>-i]%inf);<br>&#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pow</span><span class="hljs-params">(ll*c,ll*a,ll*b,<span class="hljs-keyword">int</span> m,ll t)</span></span>&#123;<br>c[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;clear(c+<span class="hljs-number">1</span>,c+m);<br><span class="hljs-keyword">for</span>(;t;t&gt;&gt;=<span class="hljs-number">1</span>)&#123;<br>    <span class="hljs-keyword">if</span>(t&amp;<span class="hljs-number">1</span>)&#123;<br>mul(_a,c,a,m,m);<br>mod(_a,b,m&lt;&lt;<span class="hljs-number">1</span>,m);<br>copy(_a,_a+m,c);<br>    &#125;<br>    mul(_a,a,a,m,m);<br>    mod(_a,b,m&lt;&lt;<span class="hljs-number">1</span>,m);<br>    copy(_a,_a+m,a);<br>&#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    m=<span class="hljs-number">2001</span>;inv[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    inc(i,<span class="hljs-number">2</span>,m)inv[i]=inv[inf%i]*(inf-inf/i)%inf;<br>    <span class="hljs-keyword">int</span> _=read();<span class="hljs-keyword">while</span>(_--)&#123;<br>m=read();n=read();<br><span class="hljs-keyword">if</span>(n==<span class="hljs-number">-1</span>)&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,<span class="hljs-number">2</span>*inv[m+<span class="hljs-number">1</span>]%inf);<br>    <span class="hljs-keyword">continue</span>;<br>&#125;<br>b[m<span class="hljs-number">-1</span>]=<span class="hljs-number">1</span>;<br>inc(i,<span class="hljs-number">0</span>,m<span class="hljs-number">-2</span>)b[i]=(i+<span class="hljs-number">1</span>)*inv[m]%inf;<br>inc(i,<span class="hljs-number">0</span>,m<span class="hljs-number">-1</span>)a[i]=<span class="hljs-number">0</span>;a[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>Poly::<span class="hljs-built_in">pow</span>(c,a,b,m,n);<br><span class="hljs-comment">//inc(i,0,m)printf("%lld ",c[i]);putchar('\n');</span><br>ll ans=<span class="hljs-number">0</span>;<br>inc(i,<span class="hljs-number">0</span>,m<span class="hljs-number">-1</span>)&#123;<br>    a[i]=<span class="hljs-number">1</span>;<br>    inc(j,<span class="hljs-number">1</span>,i)reduce(a[i]-=a[i-j]*(m-j)%inf*inv[m]%inf);<br>    reduce(ans+=(a[i]<span class="hljs-number">-2</span>*inv[m+<span class="hljs-number">1</span>]%inf+inf)*c[i]%inf-inf);<br>&#125;<br>ans+=<span class="hljs-number">2</span>*inv[m+<span class="hljs-number">1</span>];ans%=inf;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> FFT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K-inversion(DP/多项式)</title>
      <link href="/kinversion/"/>
      <url>/kinversion/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.hackerrank.com/contests/101hack43/challenges/k-inversion-permutations/problem" target="_blank" rel="noopener">https://www.hackerrank.com/contests/101hack43/challenges/k-inversion-permutations/problem</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定 $n$ 和 $m$ ，求有多少个 $n$ 的排列，满足该排列的逆序对个数为 $m$</p><p>$n\le10^5,m\le10^5$</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>学习容斥的时候看到的，不过并没有用到容斥的方法。。</p><h4 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h4><p>从最暴力的角度出发，设 $d[i][j]$ 为 $i$ 排列中逆序对为 $j$ 的个数</p><script type="math/tex; mode=display">d[i][j]=\sum_{k=0}^{i-1} d[i-1][j-k]</script><p>这个 $DP$ 式子看起来就特别简单，事实上用多项式可以表示为</p><script type="math/tex; mode=display">\prod_{i=1}^n(1+x+\cdots+x^{i-1})=\prod_{i=1}^n\frac{1-x^i}{1-x}</script><p>关键求 $\prod_{i=1}^n(1-x^i)$</p><p>如果 $n\rightarrow\infty$ ，那么这个为五边形数，但是 $n$ 有限，我们只能退而求其次，利用 $n\sqrt n$ 的暴力求解</p><p>设 $g[i][j]$ 为包含 $i$ 项次数为 $j$ 的系数，由于要保证数不大于 $n$ ，所以要把大小为 $n+1$ 的方案去掉</p><script type="math/tex; mode=display">g[i][j]=g[i][j-i]+g[i-1][j-i-1]-g[i-1][j-n-1]</script><h4 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h4><p>和 zlc 大佬讨论，他给出了一种复杂度更加优秀的方法</p><script type="math/tex; mode=display">\begin{aligned}\prod_{i=1}^n(1-x^i)=&e^{\textstyle\sum_{i=1}^n ln(1-x^i)}\\=&e^{\textstyle\sum_{i=1}^n\sum_{j=1}^\infty-\frac{x^{in}}{n}}\end{aligned}</script><p>然后这个直接类似埃筛就把指数的多项式搞定了，然后做多项式指数就可以了。。</p><p>但是模数不是 $NTT$ ，要用 $MTT$ 。。</p><p>然后跑得超慢。。比上面的 $O(m\sqrt m)$ 还慢。。</p><p>但仍不失为一个好思路orz zlc!!</p><h4 id="解法三"><a href="#解法三" class="headerlink" title="解法三"></a>解法三</h4><p>和解法一的方法神似。。</p><p>仍然考虑式子</p><script type="math/tex; mode=display">d[i][j]=\sum_{k=0}^{i-1} d[i-1][j-k]</script><p>发现可以转化为 $x_1+x_2+\cdots+x_n=m$ 的方案数</p><p>其中 $x_i$ 满足 $x_i\le i-1$ ，那么有</p><script type="math/tex; mode=display">\begin{aligned}\sum_{x_1,x_2,\cdots,x_n}[x_i\le i-1][\sum x=m]=&\prod_{i=1}^n[x_i\le i-1][\sum x=m]\\=&\prod_{i=1}^n([x\ge0]-[x\ge i])[\sum x=m]\\=&\sum_{S}[\sum x=m-\sum_{i\in S}x_i]\end{aligned}</script><p>但是 $S$ 过大，我们需要对 $\sum_T x_i$ 归类，然后可以设和解法一一样的 $DP$ 方程，然后在 $O(m\sqrt m)$ 内求解</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>解法一</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 200005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 400005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reduce</span><span class="hljs-params">(ll&amp;x)</span></span>&#123;x+=x&gt;&gt;<span class="hljs-number">63</span>&amp;inf;&#125;<br><span class="hljs-keyword">int</span> n,m,<span class="hljs-keyword">_t</span>;<br>ll ans[NM],d[<span class="hljs-number">2</span>][NM],s,p[NM],invp[NM],inv[NM];<br><br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();m=read();<br>    p[<span class="hljs-number">0</span>]=p[<span class="hljs-number">1</span>]=inv[<span class="hljs-number">1</span>]=invp[<span class="hljs-number">0</span>]=invp[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    inc(i,<span class="hljs-number">2</span>,n+m)p[i]=p[i<span class="hljs-number">-1</span>]*i%inf,inv[i]=inv[inf%i]*(inf-inf/i)%inf,invp[i]=invp[i<span class="hljs-number">-1</span>]*inv[i]%inf;<br>    d[<span class="hljs-keyword">_t</span>=<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=ans[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i*(i+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>&lt;=m;i++)&#123;<br><span class="hljs-keyword">_t</span>^=<span class="hljs-number">1</span>;mem(d[<span class="hljs-keyword">_t</span>]);<br>inc(j,i,m)&#123;<br>    reduce(d[<span class="hljs-keyword">_t</span>][j]=d[<span class="hljs-keyword">_t</span>][j-i]-d[<span class="hljs-keyword">_t</span>^<span class="hljs-number">1</span>][j-i]);<br>    <span class="hljs-keyword">if</span>(j&gt;=n+<span class="hljs-number">1</span>)reduce(d[<span class="hljs-keyword">_t</span>][j]+=d[<span class="hljs-keyword">_t</span>^<span class="hljs-number">1</span>][j-n<span class="hljs-number">-1</span>]-inf);<br>    reduce(ans[j]+=d[<span class="hljs-keyword">_t</span>][j]-inf);<br>&#125;<br><span class="hljs-comment">//inc(j,0,m)printf("%lld ",d[_t][j]);putchar('\n');</span><br>    &#125;<br>    <span class="hljs-comment">//inc(i,0,m)printf("%lld ",ans[i]);putchar('\n');</span><br>    inc(i,<span class="hljs-number">0</span>,m)reduce(s+=p[n+i<span class="hljs-number">-1</span>]*invp[i]%inf*invp[n<span class="hljs-number">-1</span>]%inf*ans[m-i]%inf-inf);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,s);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><br></p><p>解法二：(这里模数没改)</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1ll&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 300005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 65536</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">998244353</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reduce</span><span class="hljs-params">(ll&amp;x)</span></span>&#123;x+=x&gt;&gt;<span class="hljs-number">63</span>&amp;inf;&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">qpow</span><span class="hljs-params">(ll x,ll t)</span></span>&#123;<br>    ll s=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(;t;t&gt;&gt;=<span class="hljs-number">1</span>,x=x*x%inf)<span class="hljs-keyword">if</span>(t&amp;<span class="hljs-number">1</span>)s=s*x%inf;<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br>ll p[NM],inv[NM],invp[NM];<br><br><span class="hljs-keyword">namespace</span> Poly&#123;<br>    <span class="hljs-keyword">int</span> lim,bit,rev[NM],w[NM],W[NM];<br>    ll invn;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">clear</span><span class="hljs-params">(ll*a,ll*b)</span></span>&#123;<span class="hljs-keyword">if</span>(a&lt;b)<span class="hljs-built_in">memset</span>(a,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(ll)*(b-a));&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-keyword">int</span> m)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(lim=<span class="hljs-number">1</span>,bit=<span class="hljs-number">0</span>;lim&lt;m;lim&lt;&lt;=<span class="hljs-number">1</span>)bit++;invn=qpow(lim,inf<span class="hljs-number">-2</span>);<br>    inc(i,<span class="hljs-number">1</span>,lim<span class="hljs-number">-1</span>)rev[i]=(rev[i&gt;&gt;<span class="hljs-number">1</span>]&gt;&gt;<span class="hljs-number">1</span>)|((i&amp;<span class="hljs-number">1</span>)&lt;&lt;(bit<span class="hljs-number">-1</span>));<br>    ll t=qpow(<span class="hljs-number">3</span>,(inf<span class="hljs-number">-1</span>)/lim);W[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    inc(i,<span class="hljs-number">1</span>,lim)W[i]=W[i<span class="hljs-number">-1</span>]*t%inf;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fft</span><span class="hljs-params">(ll*a,<span class="hljs-keyword">int</span> f=<span class="hljs-number">0</span>)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> n=lim;<br>    inc(i,<span class="hljs-number">1</span>,n<span class="hljs-number">-1</span>)<span class="hljs-keyword">if</span>(i&lt;rev[i])swap(a[i],a[rev[i]]);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">1</span>;k&lt;n;k&lt;&lt;=<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">int</span> t=n/k&gt;&gt;<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>,j=<span class="hljs-number">0</span>;i&lt;k;i++,j+=t)w[i]=W[f?n-j:j];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i+=k&lt;&lt;<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;k;j++)&#123;<br>            ll x=a[i+j],y=w[j]*a[i+j+k]%inf;<br>            reduce(a[i+j]=x+y-inf);reduce(a[i+j+k]=x-y);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(f)inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)a[i]=a[i]*invn%inf;<br>    &#125;<br>    ll _a[NM],_b[NM];<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">inv</span><span class="hljs-params">(ll*b,ll*a,<span class="hljs-keyword">int</span> m)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(m==<span class="hljs-number">1</span>)&#123;b[<span class="hljs-number">0</span>]=qpow(a[<span class="hljs-number">0</span>],inf<span class="hljs-number">-2</span>);<span class="hljs-keyword">return</span>;&#125;<br>    inv(b,a,m+<span class="hljs-number">1</span>&gt;&gt;<span class="hljs-number">1</span>);init(m&lt;&lt;<span class="hljs-number">1</span>);<br>    copy(a,a+m,_a);clear(_a+m,_a+lim);clear(b+m,b+lim);<br>    fft(b);fft(_a);<br>    inc(i,<span class="hljs-number">0</span>,lim<span class="hljs-number">-1</span>)b[i]=b[i]*(<span class="hljs-number">2</span>-_a[i]*b[i]%inf+inf)%inf;<br>    fft(b,<span class="hljs-number">1</span>);clear(b+m,b+lim);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ln</span><span class="hljs-params">(ll*b,ll*a,<span class="hljs-keyword">int</span> m)</span></span>&#123;<br>    inv(b,a,m);<br>    inc(i,<span class="hljs-number">0</span>,m<span class="hljs-number">-2</span>)_a[i]=a[i+<span class="hljs-number">1</span>]*(i+<span class="hljs-number">1</span>)%inf;<br>    init(m&lt;&lt;<span class="hljs-number">1</span>);<br>    clear(_a+m<span class="hljs-number">-1</span>,_a+lim);<br>    fft(_a);fft(b);<br>    inc(i,<span class="hljs-number">0</span>,lim<span class="hljs-number">-1</span>)b[i]=b[i]*_a[i]%inf;<br>    fft(b,<span class="hljs-number">1</span>);<br>    dec(i,m<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>)b[i]=b[i<span class="hljs-number">-1</span>]*::inv[i]%inf;b[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">exp</span><span class="hljs-params">(ll*b,ll*a,<span class="hljs-keyword">int</span> m)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(m==<span class="hljs-number">1</span>)&#123;b[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<span class="hljs-keyword">return</span>;&#125;<br>    <span class="hljs-built_in">exp</span>(b,a,m+<span class="hljs-number">1</span>&gt;&gt;<span class="hljs-number">1</span>);<br>    ln(_b,b,m);<br>    inc(i,<span class="hljs-number">0</span>,m<span class="hljs-number">-1</span>)reduce(_b[i]=a[i]-_b[i]);_b[<span class="hljs-number">0</span>]++;<br>    clear(_b+m,_b+lim);clear(b+m,b+lim);<br>    fft(_b);fft(b);<br>    inc(i,<span class="hljs-number">0</span>,lim<span class="hljs-number">-1</span>)b[i]=b[i]*_b[i]%inf;<br>    fft(b,<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br><br>ll ans,a[NM],b[NM];<br><span class="hljs-keyword">int</span> n,m;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();m=read();<br>    p[<span class="hljs-number">0</span>]=p[<span class="hljs-number">1</span>]=invp[<span class="hljs-number">0</span>]=invp[<span class="hljs-number">1</span>]=inv[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    inc(i,<span class="hljs-number">2</span>,<span class="hljs-number">262144</span>)p[i]=p[i<span class="hljs-number">-1</span>]*i%inf,inv[i]=inv[inf%i]*(inf-inf/i)%inf,invp[i]=invp[i<span class="hljs-number">-1</span>]*inv[i]%inf;<br>    inc(i,<span class="hljs-number">1</span>,n)<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=i,k=<span class="hljs-number">1</span>;j&lt;=m;k++,j+=i)reduce(a[j]-=inv[k]);<br>    Poly::<span class="hljs-built_in">exp</span>(b,a,m+<span class="hljs-number">1</span>);<br>    inc(i,<span class="hljs-number">0</span>,m)<br>    reduce(ans+=p[n+i<span class="hljs-number">-1</span>]*invp[i]%inf*invp[n<span class="hljs-number">-1</span>]%inf*b[m-i]%inf-inf);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>*<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 组合数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jsk41413(指数型生成函数)</title>
      <link href="/jsk41413/"/>
      <url>/jsk41413/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://nanti.jisuanke.com/t/41413" target="_blank" rel="noopener">https://nanti.jisuanke.com/t/41413</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定 $n$ 和 $m$ ，给长度为 $n$ 的序列 $A$ 填数，要求偶数出现次数为偶数次，问填充方案数</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>一道挺基础的题，然而生成函数没有掌握好，卡了好久。。</p><p>由于奇数没有限制，所以可以用 $e^x$ 表示，偶数在偶数项上才有系数，所以可以用 $\frac{1}{2}(e^x+e^{-x})$ 表示</p><p>若 $m$ 为偶数，则奇数和偶数个数相等，令 $p=\frac{m}{2}$ ，则可以构造生成函数</p><script type="math/tex; mode=display">\begin{aligned}[x^n]G(x)=&[x^n]e^{xp}(\frac{e^x+e^{-x}}{2})^p\\=&[x^n] (\frac{e^{2x}+1}{2})^p\\=&[x^n] \sum_{k=0}^p\binom pke^{2kx}\\=&\sum_{k=0}^p\binom pk(2k)^n\end{aligned}</script><p>直接暴力求就可以了。。</p><p>对于 $m$ 为偶数的情况，我们可以枚举最后一个数的放置情况在转化为上面的偶数考虑，即</p><script type="math/tex; mode=display">\begin{aligned}&\sum_{i=0}^n\binom ni\sum_{k=0}^p\binom pk(2k)^i\\=&\sum_{k=0}^p\binom pk\sum_{i=0}^n\binom ni(2k)^i\\=&\sum_{k=0}^p\binom pk(2k+1)^n\end{aligned}</script><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 200005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 150005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br>ll n,m,ans;<br>ll p[NM],inv[NM],invp[NM];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reduce</span><span class="hljs-params">(ll&amp;x)</span></span>&#123;x+=x&gt;&gt;<span class="hljs-number">63</span>&amp;inf;&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">qpow</span><span class="hljs-params">(ll x,ll t)</span></span>&#123;<br>    ll s=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(;t;t&gt;&gt;=<span class="hljs-number">1</span>,x=x*x%inf)<span class="hljs-keyword">if</span>(t&amp;<span class="hljs-number">1</span>)s=s*x%inf;<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=<span class="hljs-number">2e5</span>;p[<span class="hljs-number">0</span>]=p[<span class="hljs-number">1</span>]=inv[<span class="hljs-number">1</span>]=invp[<span class="hljs-number">0</span>]=invp[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    inc(i,<span class="hljs-number">2</span>,n)p[i]=p[i<span class="hljs-number">-1</span>]*i%inf,inv[i]=inv[inf%i]*(inf-inf/i)%inf,invp[i]=invp[i<span class="hljs-number">-1</span>]*inv[i]%inf;<br>    <span class="hljs-keyword">int</span> _=read();<span class="hljs-keyword">while</span>(_--)&#123;<br>n=read();m=read();<br>ans=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span>(m%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>)&#123;<br>    m&gt;&gt;=<span class="hljs-number">1</span>;<br>    inc(i,<span class="hljs-number">0</span>,m)reduce(ans+=p[m]*invp[i]%inf*invp[m-i]%inf*qpow(i&lt;&lt;<span class="hljs-number">1</span>,n)%inf-inf);<br>    ans=ans*qpow(inf+<span class="hljs-number">1</span>&gt;&gt;<span class="hljs-number">1</span>,m)%inf;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    m&gt;&gt;=<span class="hljs-number">1</span>;<br>    inc(i,<span class="hljs-number">0</span>,m)reduce(ans+=p[m]*invp[i]%inf*invp[m-i]%inf*qpow(i&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,n)%inf-inf);<br>    ans=ans*qpow(inf+<span class="hljs-number">1</span>&gt;&gt;<span class="hljs-number">1</span>,m)%inf;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 组合数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>luogu4723(线性递推)</title>
      <link href="/luogu4723/"/>
      <url>/luogu4723/</url>
      
        <content type="html"><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定一个 $n$ 阶递推式</p><script type="math/tex; mode=display">f(m)=\sum_{k=1}^n a_kf(m-k)</script><p>给定系数 $a$ 和前 $0\sim n-1$ 项，求 $f(m)$</p><p>$n\le32000,m\le10^9$</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h4><ol><li>构造 $n$ 次多项式 $G(x)$ ，其中 $g<em>n=1$ ，$g_i=-a</em>{n-i}$</li><li>用多项式快速幂求 $H(x)=x^m \bmod{G(x)}$</li><li>$\displaystyle f(m)=\sum_{k=0}^{n-1}h_kf(k)$</li></ol><h4 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h4><p>可以构造 $n$ 阶转移矩阵 $A_0$ ，现在需要求 $A_0^m$  ，时间复杂度为 $O(n^3\log m)$</p><p>但是时间复杂度过高，需要优化</p><p>我们构造一个矩阵的多项式 $G(A)$ ，满足 $G(A_0)=0$ ，那么只需要求 $H(A)=A^m\mod{G(A)}$ ，即可求得答案，即</p><script type="math/tex; mode=display">\begin{aligned}ans=&H(A_0)[1,0...]^T\\=&\sum_{k=0}^{n-1}h_kA_0^k[1,0,..]^T\\=&\sum_{k=0}^{n-1}h_kf(k)\end{aligned}</script><p>这个利用多项式快速幂就可以了</p><p>现在问题的关键是求 $G(A)$ ，由 $Cayley-Hamiton$ 定理可得：$g<em>n=1$ ，$g_i=-a</em>{n-i}$</p><p>这里证明暂时还没学qaq</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 270005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 400005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">998244353</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reduce</span><span class="hljs-params">(ll&amp;x)</span></span>&#123;x+=x&gt;&gt;<span class="hljs-number">63</span>&amp;inf;&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">qpow</span><span class="hljs-params">(ll x,ll t)</span></span>&#123;<br>    ll s=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(;t;t&gt;&gt;=<span class="hljs-number">1</span>,x=x*x%inf)<span class="hljs-keyword">if</span>(t&amp;<span class="hljs-number">1</span>)s=s*x%inf;<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br><br><span class="hljs-keyword">namespace</span> Poly&#123;<br>    <span class="hljs-keyword">int</span> lim,bit,rev[NM],w[NM],W[NM];<br>    ll invn;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">clear</span><span class="hljs-params">(ll*a,ll*b)</span></span>&#123;<span class="hljs-keyword">if</span>(a&lt;b)<span class="hljs-built_in">memset</span>(a,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(ll)*(b-a));&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-keyword">int</span> m)</span></span>&#123;<br><span class="hljs-keyword">for</span>(lim=<span class="hljs-number">1</span>,bit=<span class="hljs-number">0</span>;lim&lt;m;lim&lt;&lt;=<span class="hljs-number">1</span>)bit++;invn=qpow(lim,inf<span class="hljs-number">-2</span>);<br>inc(i,<span class="hljs-number">1</span>,lim<span class="hljs-number">-1</span>)rev[i]=(rev[i&gt;&gt;<span class="hljs-number">1</span>]&gt;&gt;<span class="hljs-number">1</span>)|((i&amp;<span class="hljs-number">1</span>)&lt;&lt;(bit<span class="hljs-number">-1</span>));<br>ll t=qpow(<span class="hljs-number">3</span>,(inf<span class="hljs-number">-1</span>)/lim);W[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>inc(i,<span class="hljs-number">1</span>,lim)W[i]=W[i<span class="hljs-number">-1</span>]*t%inf;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fft</span><span class="hljs-params">(ll*a,<span class="hljs-keyword">int</span> f=<span class="hljs-number">0</span>)</span></span>&#123;<br><span class="hljs-keyword">int</span> n=lim;<br>inc(i,<span class="hljs-number">1</span>,n<span class="hljs-number">-1</span>)<span class="hljs-keyword">if</span>(i&lt;rev[i])swap(a[i],a[rev[i]]);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">1</span>;k&lt;n;k&lt;&lt;=<span class="hljs-number">1</span>)&#123;<br>    <span class="hljs-keyword">int</span> t=n/k&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>,j=<span class="hljs-number">0</span>;i&lt;k;i++,j+=t)w[i]=W[f?n-j:j];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i+=k&lt;&lt;<span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;k;j++)&#123;<br>    ll x=a[i+j],y=w[j]*a[i+j+k]%inf;<br>    reduce(a[i+j]=x+y-inf);reduce(a[i+j+k]=x-y);<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(f)inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)a[i]=a[i]*invn%inf;<br>    &#125;<br>    ll _a[NM];<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">inv</span><span class="hljs-params">(ll*b,ll*a,<span class="hljs-keyword">int</span> m)</span></span>&#123;<br><span class="hljs-keyword">if</span>(m==<span class="hljs-number">1</span>)&#123;b[<span class="hljs-number">0</span>]=qpow(a[<span class="hljs-number">0</span>],inf<span class="hljs-number">-2</span>);<span class="hljs-keyword">return</span>;&#125;<br>inv(b,a,m+<span class="hljs-number">1</span>&gt;&gt;<span class="hljs-number">1</span>);init(m&lt;&lt;<span class="hljs-number">1</span>);<br>copy(a,a+m,_a);clear(_a+m,_a+lim);clear(b+(m+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>,b+lim);<br>fft(b);fft(_a);<br>inc(i,<span class="hljs-number">0</span>,lim<span class="hljs-number">-1</span>)b[i]=b[i]*(<span class="hljs-number">2</span>-_a[i]*b[i]%inf+inf)%inf;<br>fft(b,<span class="hljs-number">1</span>);<br>    &#125;<br>    ll _b[NM];<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">div</span><span class="hljs-params">(ll*c,ll*a,ll*b,<span class="hljs-keyword">int</span> n,<span class="hljs-keyword">int</span> m)</span></span>&#123;<br>reverse_copy(a,a+n,c);reverse(b,b+m);<br>clear(b+m,b+n-m+<span class="hljs-number">1</span>);<br>inv(_b,b,n-m+<span class="hljs-number">1</span>);reverse(b,b+m);<br>init(n-m+<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">1</span>);<br>clear(c+n-m+<span class="hljs-number">1</span>,c+lim);clear(_b+n-m+<span class="hljs-number">1</span>,_b+lim);<br>fft(_b);fft(c);<br>inc(i,<span class="hljs-number">0</span>,lim<span class="hljs-number">-1</span>)c[i]=c[i]*_b[i]%inf;<br>fft(c,<span class="hljs-number">1</span>);<br>reverse(c,c+n-m+<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">mod</span><span class="hljs-params">(ll*c,ll*a,ll*b,<span class="hljs-keyword">int</span> n,<span class="hljs-keyword">int</span> m)</span></span>&#123;<br>div(c,a,b,n,m);<br>init(n);<br>clear(c+n-m+<span class="hljs-number">1</span>,c+lim);<br>copy(b,b+m,_b);clear(_b+m,_b+lim);m--;<br>fft(_b);fft(c);<br>inc(i,<span class="hljs-number">0</span>,lim<span class="hljs-number">-1</span>)c[i]=c[i]*_b[i]%inf;<br>fft(c,<span class="hljs-number">1</span>);<br>inc(i,<span class="hljs-number">0</span>,m<span class="hljs-number">-1</span>)reduce(c[i]=a[i]-c[i]);<br>clear(c+m,c+lim);clear(_b,_b+lim);<br>    &#125;<br>    ll tmp[NM],_c[NM];<br>    <span class="hljs-comment">//线性递推专用</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pow</span><span class="hljs-params">(ll*c,ll*a,ll*b,<span class="hljs-keyword">int</span> m,ll t)</span></span>&#123;<br>copy(a,a+m,_c);c[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;clear(c+<span class="hljs-number">1</span>,c+m);<br><span class="hljs-keyword">for</span>(;t;t&gt;&gt;=<span class="hljs-number">1</span>)&#123;<br>    <span class="hljs-keyword">if</span>(t&amp;<span class="hljs-number">1</span>)&#123;<br>init(m&lt;&lt;<span class="hljs-number">1</span>);clear(_c+m,_c+lim);clear(c+m,c+lim);<br>fft(c);fft(_c);<br>inc(i,<span class="hljs-number">0</span>,lim<span class="hljs-number">-1</span>)c[i]=c[i]*_c[i]%inf;<br>fft(c,<span class="hljs-number">1</span>);fft(_c,<span class="hljs-number">1</span>);<br>mem(tmp);<br>mod(tmp,c,b,m&lt;&lt;<span class="hljs-number">1</span>,m);<br>copy(tmp,tmp+m,c);<br>    &#125;<br>    init(m&lt;&lt;<span class="hljs-number">1</span>);clear(_c+m,_c+lim);<br>    fft(_c);<br>    inc(i,<span class="hljs-number">0</span>,lim<span class="hljs-number">-1</span>)_c[i]=sqr(_c[i])%inf;<br>    fft(_c,<span class="hljs-number">1</span>);<br>    mem(tmp);<br>    mod(tmp,_c,b,m&lt;&lt;<span class="hljs-number">1</span>,m);<br>    copy(tmp,tmp+m,_c);<br>&#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">int</span> n;<br>ll m,a[NM],b[NM],c[NM],ans;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    m=read();n=read();<br>    inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)reduce(a[i]=-read());<br>    reverse(a,a+n);a[n]=<span class="hljs-number">1</span>;<br>    inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)reduce(b[i]=read());<br>    c[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    Poly::<span class="hljs-built_in">pow</span>(c,c,a,n+<span class="hljs-number">1</span>,m);<br>    inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)reduce(ans+=c[i]*b[i]%inf-inf);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> FFT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gym102059K(DP-&gt;二维偏序)</title>
      <link href="/gym102059K/"/>
      <url>/gym102059K/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://codeforces.com/gym/102059/problem/K" target="_blank" rel="noopener">https://codeforces.com/gym/102059/problem/K</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定 $n$ 个物品，对每个物品，若他是第 $c_i$ 个取走的，他将产生 $d_i$ 价值</p><p>对 $k=1..n$ ，从 $k$ 出发在任意位置向左或者向右，遇到物品立刻取走，问取完所有物品后能产生的最大价值</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>好题</p><p>首先容易想到设 $dp[i][j]$ 为从 $[i,j]$ 出发到结束的价值，那么从大区间往小区间转移，考虑最后一个取走的数即可，然而复杂度是 $O(n^2)$ 的，不能接受</p><p>可以发现大部分转移的权值为 $0$ ，事实上非 $0$ 的转移只有 $O(n)$ 个，因此直接把这些转移拿出来，按照原来的次序做转移即可。。。两个状态显然需要满足二维偏序关系才能发生转移，因此该题又转化成一个二维偏序问题。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 300005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 500005 </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pi 3.1415926535897931</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">1e18</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps=<span class="hljs-number">1e-8</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">P</span>&#123;</span><br>    <span class="hljs-keyword">int</span> x,y;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-keyword">const</span> P&amp;o)<span class="hljs-keyword">const</span>&#123;<span class="hljs-keyword">return</span> y&lt;o.y||(y==o.y&amp;&amp;x&gt;o.x);&#125;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>==(<span class="hljs-keyword">const</span> P&amp;o)<span class="hljs-keyword">const</span>&#123;<span class="hljs-keyword">return</span> x==o.x&amp;&amp;y==o.y;&#125;<br>&#125;a[NM&lt;&lt;<span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> c[NM],d[NM],tot,cnt,n;<br>ll tr[NM],ans[NM];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,ll t)</span></span>&#123;<span class="hljs-keyword">for</span>(;x&lt;=n;x+=lowbit(x))tr[x]=max(tr[x],t);&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,ll s=<span class="hljs-number">0</span>)</span></span>&#123;<span class="hljs-keyword">for</span>(;x;x-=lowbit(x))s=max(s,tr[x]);<span class="hljs-keyword">return</span> s;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();<br>    inc(i,<span class="hljs-number">1</span>,n)&#123;<br>c[i]=read();<br><span class="hljs-keyword">if</span>(c[i]==<span class="hljs-number">1</span>)<span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">if</span>(c[i]&lt;=i)a[++tot].x=i-c[i]+<span class="hljs-number">1</span>,a[tot].y=i;<br><span class="hljs-keyword">if</span>(i+c[i]<span class="hljs-number">-1</span>&lt;=n)a[++tot].x=i,a[tot].y=i+c[i]<span class="hljs-number">-1</span>;<br>    &#125;<br>    inc(i,<span class="hljs-number">1</span>,n)d[i]=read();<br>    sort(a+<span class="hljs-number">1</span>,a+<span class="hljs-number">1</span>+tot);<br>    cnt=tot=unique(a+<span class="hljs-number">1</span>,a+<span class="hljs-number">1</span>+tot)-a<span class="hljs-number">-1</span>;<br>    dec(i,n,<span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">for</span>(;cnt&amp;&amp;a[cnt].y==i+<span class="hljs-number">1</span>;cnt--)<span class="hljs-keyword">if</span>(c[a[cnt].y]==a[cnt].y-a[cnt].x+<span class="hljs-number">1</span>)&#123;<br>    ll s=sum(a[cnt].x)+d[a[cnt].y];<br>    add(a[cnt].x,s);<br>&#125;<br><span class="hljs-keyword">for</span>(;tot&amp;&amp;a[tot].y==i;tot--)<span class="hljs-keyword">if</span>(c[a[tot].x]==a[tot].y-a[tot].x+<span class="hljs-number">1</span>)&#123;<br>    ll s=sum(a[tot].x)+d[a[tot].x];<br>    add(a[tot].x+<span class="hljs-number">1</span>,s);<br>&#125;<br>ans[i]=sum(i);<br><span class="hljs-keyword">if</span>(c[i]==<span class="hljs-number">1</span>)ans[i]+=d[i];<br>    &#125;<br>    inc(i,<span class="hljs-number">1</span>,n)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld "</span>,ans[i]);<span class="hljs-built_in">putchar</span>(<span class="hljs-string">'\n'</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> BIT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gym102059M(wqs二分)</title>
      <link href="/gym102059M/"/>
      <url>/gym102059M/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://codeforces.com/gym/102059/problem/M" target="_blank" rel="noopener">https://codeforces.com/gym/102059/problem/M</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定 $n(n\le2.5\times10^5)$ 个点的树，选出 $k$ 条匹配边使得边的权值和最大</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>直接二分权值，然后将最优决策取的边数控制到 $k$ 条即可。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 250005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 500005 </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pi 3.1415926535897931</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">1e18</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps=<span class="hljs-number">1e-8</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br> <br><br><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span>&#123;</span><span class="hljs-keyword">int</span> t,v;edge*next;&#125;e[nm],*h[NM],*o=e;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y,<span class="hljs-keyword">int</span> v)</span></span>&#123;o-&gt;t=y;o-&gt;v=v;o-&gt;next=h[x];h[x]=o++;&#125;<br><span class="hljs-keyword">int</span> n,m,_x,_y,<span class="hljs-keyword">_t</span>;<br>ll t;<br>ll ans;<br><span class="hljs-keyword">double</span> d[NM][<span class="hljs-number">2</span>];<br><span class="hljs-keyword">int</span> g[NM][<span class="hljs-number">2</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> f)</span></span>&#123;<br>    d[x][<span class="hljs-number">0</span>]=d[x][<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;g[x][<span class="hljs-number">0</span>]=g[x][<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br>    link(x)<span class="hljs-keyword">if</span>(j-&gt;t!=f)&#123;<br>dfs(j-&gt;t,x);<br>d[x][<span class="hljs-number">1</span>]+=d[j-&gt;t][<span class="hljs-number">1</span>],g[x][<span class="hljs-number">1</span>]+=g[j-&gt;t][<span class="hljs-number">1</span>];<br><span class="hljs-keyword">if</span>(d[x][<span class="hljs-number">1</span>]&lt;d[x][<span class="hljs-number">0</span>]+d[j-&gt;t][<span class="hljs-number">0</span>]+j-&gt;v-t)<br>    d[x][<span class="hljs-number">1</span>]=d[x][<span class="hljs-number">0</span>]+d[j-&gt;t][<span class="hljs-number">0</span>]+j-&gt;v-t,g[x][<span class="hljs-number">1</span>]=g[x][<span class="hljs-number">0</span>]+g[j-&gt;t][<span class="hljs-number">0</span>]+<span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(d[x][<span class="hljs-number">1</span>]==d[x][<span class="hljs-number">0</span>]+d[j-&gt;t][<span class="hljs-number">0</span>]+j-&gt;v-t)g[x][<span class="hljs-number">1</span>]=max(g[x][<span class="hljs-number">1</span>],g[x][<span class="hljs-number">0</span>]+g[j-&gt;t][<span class="hljs-number">0</span>]+<span class="hljs-number">1</span>);<br>d[x][<span class="hljs-number">0</span>]+=d[j-&gt;t][<span class="hljs-number">1</span>],g[x][<span class="hljs-number">0</span>]+=g[j-&gt;t][<span class="hljs-number">1</span>];<br><span class="hljs-keyword">if</span>(d[x][<span class="hljs-number">0</span>]&gt;d[x][<span class="hljs-number">1</span>])d[x][<span class="hljs-number">1</span>]=d[x][<span class="hljs-number">0</span>],g[x][<span class="hljs-number">1</span>]=g[x][<span class="hljs-number">0</span>];<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(d[x][<span class="hljs-number">0</span>]==d[x][<span class="hljs-number">1</span>])g[x][<span class="hljs-number">1</span>]=max(g[x][<span class="hljs-number">0</span>],g[x][<span class="hljs-number">1</span>]);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">check</span><span class="hljs-params">()</span></span>&#123;<br>    dfs(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span>(d[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]&gt;d[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>])<span class="hljs-keyword">return</span> g[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]&gt;=m;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(d[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]&lt;d[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>])<span class="hljs-keyword">return</span> g[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]&gt;=m;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> max(g[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>],g[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>])&gt;=m;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();m=read();<br>    inc(i,<span class="hljs-number">2</span>,n)&#123;<br>_x=read();_y=read();<span class="hljs-keyword">_t</span>=read();<br>add(_x,_y,<span class="hljs-keyword">_t</span>);add(_y,_x,<span class="hljs-keyword">_t</span>);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(ll x=-n*<span class="hljs-number">1e6</span>,y=n*<span class="hljs-number">1e6</span>;x&lt;=y;)&#123;<br>t=x+y&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-comment">//printf("%lf\n",t);</span><br><span class="hljs-keyword">if</span>(check())&#123;<br>    <span class="hljs-keyword">if</span>(d[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]&gt;d[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>])ans=d[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]+m*t;<br>    <span class="hljs-keyword">else</span> ans=d[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]+m*t;<br>    x=t+<span class="hljs-number">1</span>;<br>&#125;<span class="hljs-keyword">else</span> y=t<span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(ans==<span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>*<span class="hljs-built_in">printf</span>(<span class="hljs-string">"Impossible\n"</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>*<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gym102059G(DP)</title>
      <link href="/gym102059G/"/>
      <url>/gym102059G/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://codeforces.com/gym/102059/problem/G" target="_blank" rel="noopener">https://codeforces.com/gym/102059/problem/G</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定 $n$ 个路灯，点亮第 $i$ 个路灯需要花费 $a_i$ ，并且可以照亮两侧的点( $i-1$ 和 $i+1$ ) ，现在可以交换 $k$ 次，每次交换两个路灯的价值，求点亮所有点的最小代价</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>一个很棒的题</p><p>显然交换的两个路灯是一个点亮一个没点亮，然后借鉴括号匹配的思想，我们值需要找到 $k$ 个没点亮的路灯和 $k$ 个点亮的路灯就可以了，统计的时候代价要反着算</p><p>那么设 $d[i][j][k][v]$ 为到第 $i$ 个点，要被交换的未点亮的灯的个数为 $j$ ，要被交换的未点亮的灯的个数为 $k$ ，最长的没被点亮的后缀长度为 $v$ 的最小代价，然后分点亮，不点亮，点亮并交换，不点亮并交换这 $4$ 种情况考虑即可。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 250005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 10000005 </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pi 3.1415926535897931</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">1e18</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br> <br><br><br><br><span class="hljs-keyword">int</span> n,m,a[NM];<br>ll d[NM][<span class="hljs-number">10</span>][<span class="hljs-number">10</span>][<span class="hljs-number">3</span>],ans;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">upd</span><span class="hljs-params">(ll&amp;x,ll y)</span></span>&#123;x=min(x,y);&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();m=read();<br>    inc(i,<span class="hljs-number">1</span>,n)a[i]=read();<br>    inc(i,<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>)inc(j,<span class="hljs-number">0</span>,m)inc(k,<span class="hljs-number">0</span>,m)inc(v,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)d[i][j][k][v]=inf;<br>    d[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br>    inc(i,<span class="hljs-number">1</span>,n)inc(j,<span class="hljs-number">0</span>,m)inc(k,<span class="hljs-number">0</span>,m)inc(v,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)<span class="hljs-keyword">if</span>(d[i][j][k][v]&lt;inf)&#123;<br>upd(d[i+<span class="hljs-number">1</span>][j][k][<span class="hljs-number">0</span>],d[i][j][k][v]+a[i]);<br><span class="hljs-keyword">if</span>(v&lt;<span class="hljs-number">2</span>)upd(d[i+<span class="hljs-number">1</span>][j][k][v+<span class="hljs-number">1</span>],d[i][j][k][v]);<br><span class="hljs-keyword">if</span>(j&lt;m)upd(d[i+<span class="hljs-number">1</span>][j+<span class="hljs-number">1</span>][k][<span class="hljs-number">0</span>],d[i][j][k][v]);<br><span class="hljs-keyword">if</span>(v&lt;<span class="hljs-number">2</span>&amp;&amp;k&lt;m)upd(d[i+<span class="hljs-number">1</span>][j][k+<span class="hljs-number">1</span>][v+<span class="hljs-number">1</span>],d[i][j][k][v]+a[i]);<br>    &#125;<br>    ans=inf;<br>    inc(j,<span class="hljs-number">0</span>,m)ans=min(ans,d[n+<span class="hljs-number">1</span>][j][j][<span class="hljs-number">1</span>]);<br>    inc(j,<span class="hljs-number">0</span>,m)ans=min(ans,d[n+<span class="hljs-number">1</span>][j][j][<span class="hljs-number">0</span>]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jsk41390(min25筛)</title>
      <link href="/jsk41390/"/>
      <url>/jsk41390/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://nanti.jisuanke.com/t/41390" target="_blank" rel="noopener">https://nanti.jisuanke.com/t/41390</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>可以发现 $f(ab)=f(a)+f(b)$ ，那么</p><script type="math/tex; mode=display">\begin{aligned}\sum_{i=1}^nf(i!)=& \sum_{i=1}^n\sum_{j=1}^if(i)\\=&\sum_{i=1}^n\sum_p\sum_k\lfloor\frac{i}{p^k}\rfloor\\=&\sum_{i=1}^i\sum_p\sum_k\sum_{p^k|d}^{d\le i}1\\=&\sum_p\sum_k\sum_{p^k|d}n-d+1\\=&\sum_p\sum_k(n+1)\lfloor\frac{n}{p^k}\rfloor-p^k\frac{\lfloor\frac{n}{p^k}\rfloor(\lfloor\frac{n}{p^k}\rfloor+1)}{2}\end{aligned}</script><p>对 $k\ge2$ ，$p\le\sqrt n$ 可以直接暴力</p><p>对 $k=1$ ，我们只需要求区间上的素数个数和素数和，但是注意到区间是分块整除形成的区间，所以可以直接利用预处理的函数</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1ll&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 200005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 2000005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">998244353</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reduce</span><span class="hljs-params">(ll&amp;x)</span></span>&#123;x+=x&gt;&gt;<span class="hljs-number">63</span>&amp;inf;&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">qpow</span><span class="hljs-params">(ll x,ll t)</span></span>&#123;<br>    ll s=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(;t;t&gt;&gt;=<span class="hljs-number">1</span>,x=x*x%inf)<span class="hljs-keyword">if</span>(t&amp;<span class="hljs-number">1</span>)s=s*x%inf;<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br>ll n;<br>ll w[NM],f[NM],g[NM],pre[NM];<br><span class="hljs-keyword">int</span> tot,m;<br>ll prime[NM];<br><span class="hljs-keyword">bool</span> v[NM];<br>ll ans;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">id</span><span class="hljs-params">(ll x)</span></span>&#123;<span class="hljs-keyword">if</span>(x)<span class="hljs-keyword">return</span> x&lt;=m/<span class="hljs-number">2</span>?m-x+<span class="hljs-number">1</span>:n/x;<span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123;<br>    m=<span class="hljs-built_in">sqrt</span>(n);<br>    inc(i,<span class="hljs-number">2</span>,m)<span class="hljs-keyword">if</span>(!v[i])&#123;<br>prime[++tot]=i;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=i&lt;&lt;<span class="hljs-number">1</span>;j&lt;=m;j+=i)v[j]++;<br>    &#125;<br>    inc(i,<span class="hljs-number">1</span>,tot)pre[i]=(pre[i<span class="hljs-number">-1</span>]+prime[i])%inf;<br>    inc(i,<span class="hljs-number">1</span>,m)w[i]=n/i;<br>    <span class="hljs-keyword">while</span>(w[m]&gt;<span class="hljs-number">1</span>)w[m+<span class="hljs-number">1</span>]=w[m]<span class="hljs-number">-1</span>,m++;<br>&#125;<br><br><br><br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();<br>    init();<br>    inc(i,<span class="hljs-number">1</span>,m)f[i]=w[i]%inf<span class="hljs-number">-1</span>,g[i]=w[i]%inf*((w[i]+<span class="hljs-number">1</span>)%inf)%inf*(inf+<span class="hljs-number">1</span>&gt;&gt;<span class="hljs-number">1</span>)%inf<span class="hljs-number">-1</span>;<br>    inc(j,<span class="hljs-number">1</span>,tot)&#123;<br>inc(i,<span class="hljs-number">1</span>,m)<span class="hljs-keyword">if</span>(w[i]&gt;=prime[j]*prime[j])&#123;<br>    <span class="hljs-keyword">int</span> k=id(w[i]/prime[j]);<br>    reduce(f[i]-=f[k]-j+<span class="hljs-number">1</span>);<br>    reduce(g[i]-=prime[j]*(g[k]-pre[j<span class="hljs-number">-1</span>]+inf)%inf);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(ll x=<span class="hljs-number">1</span>,y,t;x&lt;=n;x=y+<span class="hljs-number">1</span>)&#123;<br>y=n/(n/x);t=n/x%inf;<br>reduce(ans+=(n+<span class="hljs-number">1</span>)%inf*t%inf*(f[id(y)]-f[id(x<span class="hljs-number">-1</span>)]+inf)%inf-inf);<br>reduce(ans-=t*(t+<span class="hljs-number">1</span>)%inf*(inf+<span class="hljs-number">1</span>&gt;&gt;<span class="hljs-number">1</span>)%inf*(g[id(y)]-g[id(x<span class="hljs-number">-1</span>)]+inf)%inf);<br>    &#125;<br>    <span class="hljs-comment">//printf("%lld\n",ans);</span><br>    inc(k,<span class="hljs-number">2</span>,<span class="hljs-number">34</span>)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=tot;j++)&#123;<br>    ll <span class="hljs-keyword">_t</span>=<span class="hljs-number">1</span>;<br>    inc(i,<span class="hljs-number">1</span>,k)&#123;<br><span class="hljs-keyword">_t</span>*=prime[j];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">_t</span>&gt;n)<span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">_t</span>&gt;n)<span class="hljs-keyword">break</span>;<br>    ll t=n/<span class="hljs-keyword">_t</span>%inf;<br>    <span class="hljs-keyword">_t</span>%=inf;<br>    reduce(ans+=(n+<span class="hljs-number">1</span>)*t%inf-inf);<br>    reduce(ans-=<span class="hljs-keyword">_t</span>*t%inf*(t+<span class="hljs-number">1</span>)%inf*(inf+<span class="hljs-number">1</span>&gt;&gt;<span class="hljs-number">1</span>)%inf);<br>&#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>loj6268(五边形数+多项式逆元)</title>
      <link href="/loj6268/"/>
      <url>/loj6268/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://loj.ac/problem/6268" target="_blank" rel="noopener">https://loj.ac/problem/6268</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>用生成函数表示</p><script type="math/tex; mode=display">\prod_i\frac{1}{1-x^i}=\frac{1}{\phi(x)}</script><p>直接求完 $\phi(x)$ 后多项式逆元即可。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1ll&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 300005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 65536</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">998244353</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reduce</span><span class="hljs-params">(ll&amp;x)</span></span>&#123;x+=x&gt;&gt;<span class="hljs-number">63</span>&amp;inf;&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">qpow</span><span class="hljs-params">(ll x,ll t)</span></span>&#123;<br>    ll s=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(;t;t&gt;&gt;=<span class="hljs-number">1</span>,x=x*x%inf)<span class="hljs-keyword">if</span>(t&amp;<span class="hljs-number">1</span>)s=s*x%inf;<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br><span class="hljs-keyword">namespace</span> Poly&#123;<br>    <span class="hljs-keyword">int</span> lim,bit,rev[NM],w[NM],W[NM];<br>    ll invn;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">clear</span><span class="hljs-params">(ll*a,ll*b)</span></span>&#123;<span class="hljs-keyword">if</span>(a&lt;b)<span class="hljs-built_in">memset</span>(a,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(ll)*(b-a));&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-keyword">int</span> m)</span></span>&#123;<br><span class="hljs-keyword">for</span>(lim=<span class="hljs-number">1</span>,bit=<span class="hljs-number">0</span>;lim&lt;m;lim&lt;&lt;=<span class="hljs-number">1</span>)bit++;invn=qpow(lim,inf<span class="hljs-number">-2</span>);<br>inc(i,<span class="hljs-number">1</span>,lim<span class="hljs-number">-1</span>)rev[i]=(rev[i&gt;&gt;<span class="hljs-number">1</span>]&gt;&gt;<span class="hljs-number">1</span>)|((i&amp;<span class="hljs-number">1</span>)&lt;&lt;(bit<span class="hljs-number">-1</span>));<br>ll t=qpow(<span class="hljs-number">3</span>,(inf<span class="hljs-number">-1</span>)/lim);W[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>inc(i,<span class="hljs-number">1</span>,lim)W[i]=W[i<span class="hljs-number">-1</span>]*t%inf;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fft</span><span class="hljs-params">(ll*a,<span class="hljs-keyword">int</span> f=<span class="hljs-number">0</span>)</span></span>&#123;<br><span class="hljs-keyword">int</span> n=lim;<br>inc(i,<span class="hljs-number">1</span>,n<span class="hljs-number">-1</span>)<span class="hljs-keyword">if</span>(i&lt;rev[i])swap(a[i],a[rev[i]]);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">1</span>;k&lt;n;k&lt;&lt;=<span class="hljs-number">1</span>)&#123;<br>    <span class="hljs-keyword">int</span> t=n/k&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>,j=<span class="hljs-number">0</span>;i&lt;k;i++,j+=t)w[i]=W[f?n-j:j];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i+=k&lt;&lt;<span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;k;j++)&#123;<br>    ll x=a[i+j],y=w[j]*a[i+j+k]%inf;<br>    reduce(a[i+j]=x+y-inf);reduce(a[i+j+k]=x-y);<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(f)inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)a[i]=a[i]*invn%inf;<br>    &#125;<br>    ll _a[NM];<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">inv</span><span class="hljs-params">(ll*b,ll*a,<span class="hljs-keyword">int</span> m)</span></span>&#123;<br><span class="hljs-keyword">if</span>(m==<span class="hljs-number">1</span>)&#123;b[<span class="hljs-number">0</span>]=qpow(a[<span class="hljs-number">0</span>],inf<span class="hljs-number">-2</span>);<span class="hljs-keyword">return</span>;&#125;<br>inv(b,a,m+<span class="hljs-number">1</span>&gt;&gt;<span class="hljs-number">1</span>);init(m&lt;&lt;<span class="hljs-number">1</span>);<br>copy(a,a+m,_a);clear(_a+m,_a+lim);clear(b+m,b+lim);<br>fft(b);fft(_a);<br>inc(i,<span class="hljs-number">0</span>,lim<span class="hljs-number">-1</span>)b[i]=b[i]*(<span class="hljs-number">2</span>-_a[i]*b[i]%inf+inf)%inf;<br>fft(b,<span class="hljs-number">1</span>);clear(b+m,b+lim);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">int</span> n;<br>ll a[NM],b[NM];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">1</span>;k*(<span class="hljs-number">3</span>*k+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>&lt;=n;k++)<span class="hljs-keyword">if</span>(k&amp;<span class="hljs-number">1</span>)a[k*(<span class="hljs-number">3</span>*k+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>]=inf<span class="hljs-number">-1</span>;<span class="hljs-keyword">else</span> a[k*(<span class="hljs-number">3</span>*k+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">1</span>;k*(<span class="hljs-number">3</span>*k<span class="hljs-number">-1</span>)/<span class="hljs-number">2</span>&lt;=n;k++)<span class="hljs-keyword">if</span>(k&amp;<span class="hljs-number">1</span>)a[k*(<span class="hljs-number">3</span>*k<span class="hljs-number">-1</span>)/<span class="hljs-number">2</span>]=inf<span class="hljs-number">-1</span>;<span class="hljs-keyword">else</span> a[k*(<span class="hljs-number">3</span>*k<span class="hljs-number">-1</span>)/<span class="hljs-number">2</span>]=<span class="hljs-number">1</span>;<br>    a[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    Poly::inv(b,a,n+<span class="hljs-number">1</span>);<br>    inc(i,<span class="hljs-number">1</span>,n)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,b[i]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> FFT </tag>
            
            <tag> 组合数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>luogu5050(多项式多点求值)</title>
      <link href="/luogu5050/"/>
      <url>/luogu5050/</url>
      
        <content type="html"><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定一个 $n-1$ 次多项式 $F(x)$ 和 $m$ 项序列 ${a_i}$ ，对 $\forall i\in[1,m]$，求 $F(a_i)$</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>主要是利用分治的思想将求值的规模逐渐减少。。</p><p>若给定多项式 $F(x)$ ，要在 $X={x_0,x_1..x_n}$ 上进行多点求值</p><p>那么可以将 $X$ 分成两半， $X<em>1={x_0,x_1..x</em>{\lfloor\frac{n}{2} \rfloor} }$ 和 $X<em>2={x</em>{\lfloor\frac{n}{2} \rfloor+1}…x_n}$</p><p>另 $A(x)=\prod<em>{x_i\in X} (x-x_i)$ ，$A_1(x)=\prod</em>{x<em>i\in X_1} (x-x_i)$ ，$A_2(x)=\prod</em>{x_i\in X_2} (x-x_i)$</p><p>那么可以构造 $F_1(x)=F(x)\bmod{A_1(x)}$ 和 $F_2(x)=F(x)\bmod{A_2(x)}$</p><p>设 $F(x)=Q(x)A_1(x)+F_1(x)$</p><p>那么 $\forall x_i\in X_1$ ，$F(x_i)=Q(x_i)A_1(x_i)+F_1(x_i)=F_1(x_i)$</p><p>同理 $\forall x_i\in X_2$ ，$F(x_i)=F_2(x_i)$</p><p>这样问题就简化成了在 $X_1$ 上对 $F_1(x)$ 进行多点求值和在 $X_2$ 上对 $F_2(x)$ 进行多点求值</p><p>对 $A(x)$ 同样可以利用分治预处理出来，两者的复杂度均为 $O(nlog^2n)$ ，但是常数巨大。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 70000</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 400005</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">998244353</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><span class="hljs-keyword">int</span> n,m;<br>ll a[NM],b[NM];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reduce</span><span class="hljs-params">(ll&amp;x)</span></span>&#123;x+=x&gt;&gt;<span class="hljs-number">63</span>&amp;inf;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">qpow</span><span class="hljs-params">(ll base, ll p)</span> </span>&#123;<br>        <span class="hljs-keyword">static</span> ll res;<br>        <span class="hljs-keyword">for</span> (res = <span class="hljs-number">1</span>; p; p &gt;&gt;= <span class="hljs-number">1</span>, base =  (base) * base % inf) <span class="hljs-keyword">if</span> (p &amp; <span class="hljs-number">1</span>) res =  (res) * base % inf;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br><br><br><span class="hljs-comment">//ll qpow(ll x,ll t)&#123;return t?qpow(sqr(x)%inf,t&gt;&gt;1)*(t&amp;1?x:1ll)%inf:1ll;&#125;</span><br><span class="hljs-keyword">namespace</span> Poly&#123;<br>    <span class="hljs-keyword">int</span> lim,bit,rev[NM];<br>    ll invn,W[NM],w[NM];<br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">clear</span><span class="hljs-params">(ll*a,ll*b)</span></span>&#123;<span class="hljs-keyword">if</span>(a&lt;b)<span class="hljs-built_in">memset</span>(a,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(ll)*(b-a));&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-keyword">int</span> m)</span></span>&#123;<br><span class="hljs-keyword">for</span>(lim=<span class="hljs-number">1</span>,bit=<span class="hljs-number">0</span>;lim&lt;m;lim&lt;&lt;=<span class="hljs-number">1</span>)bit++;invn=qpow(lim,inf<span class="hljs-number">-2</span>);<br>inc(i,<span class="hljs-number">0</span>,lim<span class="hljs-number">-1</span>)rev[i]=(rev[i&gt;&gt;<span class="hljs-number">1</span>]&gt;&gt;<span class="hljs-number">1</span>)|((i&amp;<span class="hljs-number">1</span>)&lt;&lt;(bit<span class="hljs-number">-1</span>));<br>ll t=qpow(<span class="hljs-number">3</span>,(inf<span class="hljs-number">-1</span>)/lim);W[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>inc(i,<span class="hljs-number">1</span>,lim)W[i]=W[i<span class="hljs-number">-1</span>]*t%inf;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fft</span><span class="hljs-params">(ll*a,<span class="hljs-keyword">int</span> f=<span class="hljs-number">0</span>)</span></span>&#123;<br><span class="hljs-keyword">int</span> n=lim;<br>inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)<span class="hljs-keyword">if</span>(i&lt;rev[i])<span class="hljs-built_in">std</span>::swap(a[i],a[rev[i]]);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">register</span> <span class="hljs-keyword">int</span> k=<span class="hljs-number">1</span>;k&lt;n;k&lt;&lt;=<span class="hljs-number">1</span>)&#123;<br>    <span class="hljs-keyword">int</span> t=n/k&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">register</span> <span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>,j=<span class="hljs-number">0</span>;i&lt;k;i++,j+=t)w[i]=W[f?n-j:j];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">register</span> <span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i+=k&lt;&lt;<span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">register</span> <span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;k;j++)&#123;<br>    ll x=a[i+j],y=w[j]*a[i+j+k]%inf;<br>    reduce(a[i+j]=x+y-inf);reduce(a[i+j+k]=x-y);<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(f)inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)a[i]=a[i]*invn%inf;<br>    &#125;<br>    ll _a[NM];<br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">inv</span><span class="hljs-params">(ll*b,ll*a,<span class="hljs-keyword">int</span> m)</span></span>&#123;<br><span class="hljs-keyword">if</span>(m==<span class="hljs-number">1</span>)&#123;b[<span class="hljs-number">0</span>]=qpow(a[<span class="hljs-number">0</span>],inf<span class="hljs-number">-2</span>);<span class="hljs-keyword">return</span>;&#125;<br>inv(b,a,m+<span class="hljs-number">1</span>&gt;&gt;<span class="hljs-number">1</span>);init(m&lt;&lt;<span class="hljs-number">1</span>);<br><span class="hljs-built_in">std</span>::copy(a,a+m,_a);clear(_a+m,_a+lim);clear(b+m,b+lim);<br>fft(b);fft(_a);<br>inc(i,<span class="hljs-number">0</span>,lim<span class="hljs-number">-1</span>)b[i]=b[i]*(<span class="hljs-number">2</span>-_a[i]*b[i]%inf+inf)%inf;<br>fft(b,<span class="hljs-number">1</span>);clear(b+m,b+lim);<br>    &#125;<br>    ll _b[NM];<br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">div</span><span class="hljs-params">(ll*c,ll*d,ll*a,ll*b,<span class="hljs-keyword">int</span> n,<span class="hljs-keyword">int</span> m)</span></span>&#123;<br><span class="hljs-built_in">std</span>::reverse_copy(a,a+n,c);<span class="hljs-built_in">std</span>::reverse_copy(b,b+m,d);<br>inv(_b,d,n-m+<span class="hljs-number">1</span>);<span class="hljs-built_in">std</span>::reverse(d,d+m);<br>init(n-m+<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">1</span>);clear(c+n-m+<span class="hljs-number">1</span>,c+lim);<br>fft(_b);fft(c);<br>inc(i,<span class="hljs-number">0</span>,lim<span class="hljs-number">-1</span>)c[i]=c[i]*_b[i]%inf;<br>fft(c,<span class="hljs-number">1</span>);<span class="hljs-built_in">std</span>::reverse(c,c+n-m+<span class="hljs-number">1</span>);clear(c+n-m+<span class="hljs-number">1</span>,c+lim);<br>init(n);<span class="hljs-built_in">std</span>::copy(c,c+n-m+<span class="hljs-number">1</span>,_b);clear(_b+n-m+<span class="hljs-number">1</span>,_b+lim);<br>m--;clear(d+m,d+lim);fft(_b);fft(d);<br>inc(i,<span class="hljs-number">0</span>,lim<span class="hljs-number">-1</span>)d[i]=d[i]*_b[i]%inf;<br>fft(d,<span class="hljs-number">1</span>);clear(d+m,d+lim);clear(_b,_b+lim);<br>inc(i,<span class="hljs-number">0</span>,m<span class="hljs-number">-1</span>)reduce(d[i]=a[i]-d[i]);<br>    &#125;<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;ll&gt;p[NM&lt;&lt;<span class="hljs-number">1</span>],q[NM&lt;&lt;<span class="hljs-number">1</span>];ll _c[NM];<br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i,<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<br><span class="hljs-keyword">if</span>(x==y)&#123;p[i].push_back(b[x]);p[i].push_back(<span class="hljs-number">1</span>);<span class="hljs-keyword">return</span>;&#125;<br>build(i&lt;&lt;<span class="hljs-number">1</span>,x,mid);build(i&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,y);<br><span class="hljs-keyword">int</span> n=p[i&lt;&lt;<span class="hljs-number">1</span>].size(),m=p[i&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>].size();init(n+m<span class="hljs-number">-1</span>);<br><span class="hljs-built_in">std</span>::copy(p[i&lt;&lt;<span class="hljs-number">1</span>].begin(),p[i&lt;&lt;<span class="hljs-number">1</span>].end(),_a);clear(_a+n,_a+lim);<br><span class="hljs-built_in">std</span>::copy(p[i&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>].begin(),p[i&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>].end(),_b);clear(_b+m,_b+lim);<br>fft(_a);fft(_b);<br>inc(j,<span class="hljs-number">0</span>,lim<span class="hljs-number">-1</span>)_c[j]=_a[j]*_b[j]%inf;<br>fft(_c,<span class="hljs-number">1</span>);p[i].assign(_c,_c+n+m<span class="hljs-number">-1</span>);<br>    &#125;<br>    ll ans[NM],_d[NM],tmp[NM],ret[NM];<br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">DIV</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<br><span class="hljs-keyword">if</span>(q[x].size()&lt;p[y].size())&#123;q[y]=q[x];<span class="hljs-keyword">return</span>;&#125;<br><span class="hljs-built_in">std</span>::copy(q[x].begin(),q[x].end(),_c);<span class="hljs-built_in">std</span>::copy(p[y].begin(),p[y].end(),_d);<br>div(tmp,ret,_c,_d,q[x].size(),p[y].size());q[y].assign(ret,ret+p[y].size()<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">while</span>(!q[y].back())q[y].pop_back();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">cal</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i,<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<br><span class="hljs-keyword">if</span>(x==y)&#123;ans[x]=q[i][<span class="hljs-number">0</span>];<span class="hljs-keyword">return</span>;&#125;<br>DIV(i,i&lt;&lt;<span class="hljs-number">1</span>);DIV(i,i&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>);<br>cal(i&lt;&lt;<span class="hljs-number">1</span>,x,mid);cal(i&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,y);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read()+<span class="hljs-number">1</span>;m=read();<br>    inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)a[i]=read();<br>    inc(i,<span class="hljs-number">1</span>,m)reduce(b[i]=-read());<br>    Poly::build(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,m);<br>    Poly::q[<span class="hljs-number">0</span>].assign(a,a+n);<br>    Poly::DIV(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>);<br>    Poly::cal(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,m);<br>    inc(i,<span class="hljs-number">1</span>,m)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,Poly::ans[i]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> FFT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bzoj3622(DP+二项式反演)</title>
      <link href="/bzoj3622/"/>
      <url>/bzoj3622/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=3622" target="_blank" rel="noopener">https://www.lydsy.com/JudgeOnline/problem.php?id=3622</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>二项式反演不太熟悉。。所以做起来相当吃力。。</p><p>前面还是比较简单的，先排个序然后设 $d[i][j]$ 为到第 $i$ 个物品已知有 $j$ 对物品满足要求的方案数(仅考虑这 $j$ 对物品产生的贡献)，对第 $i$ 个物品，设比他小的物品数为 $cnt$ (这个可以双指针求)，那么有</p><script type="math/tex; mode=display">d[i][j]=d[i-1][j-1]*(cnt-j+1)+d[i-1][j]</script><p><del>题目保证各个数之间互不相同真是太良心了</del></p><p>然后令 $f(j)=d[n][j]*(n-j)!$ ，表示选中 $j$ 对满足要求的物品对时的方案数总和，那么怎么用这个来求得我们需要的答案呢？</p><p>我们发现如果需要的对数是 $1$ ，那么是个小学生容斥。。</p><p>如果推广一下，设恰好有 $k$ 对物品满足要求的方案数有 $g(k)$ ，可以发现</p><script type="math/tex; mode=display">f(k)=\sum_{i=k}^n\binom{i}{k}g(i)</script><p>根据另一个方向的二项式反演，有</p><script type="math/tex; mode=display">g(k)=\sum_{i=k}^n(-1)^{i-k}\binom{i}{k}f(i)</script><p>这个的证明在 <a href="/number.md">这里</a> 已经补上</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1ll&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 2005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 200005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">9</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><br><span class="hljs-keyword">int</span> n,k,a[NM],b[NM],cnt;<br>ll d[NM][NM],p[NM],f[NM];<br>ll ans,inv[NM],invp[NM];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();k=read();<br>    p[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;inc(i,<span class="hljs-number">1</span>,n)p[i]=p[i<span class="hljs-number">-1</span>]*i%inf;<br>    invp[<span class="hljs-number">0</span>]=invp[<span class="hljs-number">1</span>]=inv[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    inc(i,<span class="hljs-number">2</span>,n)inv[i]=inv[inf%i]*(inf-inf/i)%inf,invp[i]=invp[i<span class="hljs-number">-1</span>]*inv[i]%inf;<br>    inc(i,<span class="hljs-number">1</span>,n)a[i]=read();<br>    inc(i,<span class="hljs-number">1</span>,n)b[i]=read();<br>    <span class="hljs-keyword">if</span>((n+k)%<span class="hljs-number">2</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>*<span class="hljs-built_in">printf</span>(<span class="hljs-string">"0\n"</span>);<br>    k=n+k&gt;&gt;<span class="hljs-number">1</span>;<br>    sort(a+<span class="hljs-number">1</span>,a+<span class="hljs-number">1</span>+n);<br>    sort(b+<span class="hljs-number">1</span>,b+<span class="hljs-number">1</span>+n);<br>    cnt=<span class="hljs-number">0</span>;d[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    inc(i,<span class="hljs-number">1</span>,n)&#123;<br><span class="hljs-keyword">while</span>(cnt&lt;n&amp;&amp;b[cnt+<span class="hljs-number">1</span>]&lt;=a[i])cnt++;<br>d[i][<span class="hljs-number">0</span>]=d[i<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>];<br>inc(j,<span class="hljs-number">1</span>,i)<br>    d[i][j]=(d[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>]*(cnt-j+<span class="hljs-number">1</span>)+d[i<span class="hljs-number">-1</span>][j])%inf;<br>    &#125;<br>    inc(i,<span class="hljs-number">0</span>,n)f[i]=d[n][i]*p[n-i]%inf;<br>    inc(i,k,n)<span class="hljs-keyword">if</span>((i-k)&amp;<span class="hljs-number">1</span>)<br>ans-=f[i]*p[i]%inf*invp[k]%inf*invp[i-k]%inf,ans%=inf;<br>    <span class="hljs-keyword">else</span> ans+=f[i]*p[i]%inf*invp[k]%inf*invp[i-k]%inf,ans%=inf;<br><span class="hljs-comment">/*<br>    inc(i,1,n)printf("%d ",a[i]);putchar('\n');<br>    inc(i,1,n)printf("%d ",b[i]);putchar('\n');<br>    printf("----\n");<br>    inc(i,0,n)&#123;inc(j,0,n)printf("%lld ",d[i][j]);putchar('\n');&#125;<br>    printf("----\n");<br>    inc(i,0,n)printf("%lld ",f[i]);putchar('\n');<br>*/</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>*<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,(ans+inf)%inf);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 组合数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bzoj5424(DP)</title>
      <link href="/bzoj5424/"/>
      <url>/bzoj5424/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=5424" target="_blank" rel="noopener">https://www.lydsy.com/JudgeOnline/problem.php?id=5424</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>这个首先考虑最暴力的做法，设 $d[i][j]$ 为到 $i$ 选了$j$ 个数的最小代价，那么</p><script type="math/tex; mode=display">d[i][j]=\min_{k=1}^{i-1}\{d[k][j-1]+cost(k+1,i-1) \}+ja[i]</script><p>其中 $cost$ 需要分两种情况考虑。。一种是 $cost=0$ ，那么</p><script type="math/tex; mode=display">d[i][j]=\min_k \{d[k][j-1]\}+ja[i]</script><p>这个就是求区间最值，直接单调队列</p><p>另一种是前缀最值</p><script type="math/tex; mode=display">d[i][j]=\min_k \{d[k][j-1]+a[i-1]-a[k] \}+ja[i]</script><p>这个求前缀和即可。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll unsigned long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1ll&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 100005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 400005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">9</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps=<span class="hljs-number">1e-8</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br> <br><br><br><br><span class="hljs-keyword">int</span> n,m,ans;<br><span class="hljs-keyword">int</span> q[NM],qh,qt,d[<span class="hljs-number">2</span>][NM],<span class="hljs-keyword">_t</span>;<br><span class="hljs-keyword">int</span> a[NM],cnt;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();m=read();<br>    inc(i,<span class="hljs-number">1</span>,n)a[i]=read()+a[i<span class="hljs-number">-1</span>];<br>    <span class="hljs-keyword">if</span>(a[n]&gt;m)ans=a[n];<span class="hljs-keyword">else</span> ans=<span class="hljs-number">0</span>;<br>    inc(i,<span class="hljs-number">1</span>,n)d[<span class="hljs-keyword">_t</span>][i]=inf;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j*(j+<span class="hljs-number">1</span>)&lt;n*<span class="hljs-number">4</span>;j++)&#123;<br><span class="hljs-keyword">_t</span>^=<span class="hljs-number">1</span>;mem(d[<span class="hljs-keyword">_t</span>]);cnt=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> t=d[<span class="hljs-keyword">_t</span>^<span class="hljs-number">1</span>][<span class="hljs-number">0</span>];<br>d[<span class="hljs-keyword">_t</span>][<span class="hljs-number">0</span>]=inf;<br>q[qh=qt=<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br>inc(i,<span class="hljs-number">1</span>,n)&#123;<br>    <span class="hljs-keyword">while</span>(a[i<span class="hljs-number">-1</span>]-a[cnt]&gt;m)t=min(t,d[<span class="hljs-keyword">_t</span>^<span class="hljs-number">1</span>][cnt]-a[cnt]),cnt++;<br>    <span class="hljs-keyword">while</span>(qh&lt;=qt&amp;&amp;q[qh]&lt;cnt)qh++;<br>    d[<span class="hljs-keyword">_t</span>][i]=min(t+a[i<span class="hljs-number">-1</span>],d[<span class="hljs-keyword">_t</span>^<span class="hljs-number">1</span>][q[qh]])+j*(a[i]-a[i<span class="hljs-number">-1</span>]);<br>    <span class="hljs-keyword">if</span>(a[n]-a[i]&gt;m)ans=min(ans,d[<span class="hljs-keyword">_t</span>][i]+a[n]-a[i]);<br>    <span class="hljs-keyword">else</span> ans=min(ans,d[<span class="hljs-keyword">_t</span>][i]);<br>    <span class="hljs-keyword">while</span>(qh&lt;=qt&amp;&amp;d[<span class="hljs-keyword">_t</span>^<span class="hljs-number">1</span>][i]&lt;=d[<span class="hljs-keyword">_t</span>^<span class="hljs-number">1</span>][q[qt]])qt--;<br>    q[++qt]=i;<br>&#125;<br><span class="hljs-comment">//inc(i,1,n)printf("%d ",d[_t][i]);putchar('\n');</span><br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bzoj2131(二维偏序)</title>
      <link href="/bzoj2131/"/>
      <url>/bzoj2131/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=2131" target="_blank" rel="noopener">https://www.lydsy.com/JudgeOnline/problem.php?id=2131</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>感觉是个很神奇的题。。</p><p>首先把馅饼当成是静止的，那么可以看作自己以恒定速度向上移动，那么变成求自己能够经过点的最大价值和。。</p><p>然后考虑当前点能够到达的点，显然是尽力往左(右)走能够到达的范围，即两个射线所夹的范围，那么如果以这两个射线为坐标轴的话，这个问题就转化成了一个二维偏序问题。。所以关键在坐标转换 。。</p><p> 那么点 $(x_i,y_i)$ 能够到达点 $(x_j,y_j)$ $y_j\le y_i$的充要条件是</p><script type="math/tex; mode=display">|x_i-x_j|\le 2(y_i-y_j)</script><p>即</p><script type="math/tex; mode=display">x_i-x_j\le 2y_i-2y_j\\x_i-x_j\ge 2y_j-2y_i</script><p>即</p><script type="math/tex; mode=display">2y_j-x_j\le 2y_i-x_i\\x_j+2y_j\le x_i+2y_i</script><p>所以用新点  $(2y_i-x_i,x_i+2y_i)$ 之后就变成了一个二维偏序问题。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll unsigned long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1ll&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 100005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 400005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">9</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps=<span class="hljs-number">1e-8</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br> <br><br><br><br><span class="hljs-keyword">int</span> n,_x,_y,b[NM],ans,c[NM],tot;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">P</span>&#123;</span><br>    <span class="hljs-keyword">int</span> x,y,v;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-keyword">const</span> P&amp;o)<span class="hljs-keyword">const</span>&#123;<span class="hljs-keyword">return</span> x&lt;o.x||(x==o.x&amp;&amp;y&gt;o.y);&#125;<br>&#125;a[NM];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> t)</span></span>&#123;<span class="hljs-keyword">for</span>(;x&lt;=tot;x+=lowbit(x))c[x]=max(c[x],t);&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> s=<span class="hljs-number">0</span>)</span></span>&#123;<span class="hljs-keyword">for</span>(;x;x-=lowbit(x))s=max(s,c[x]);<span class="hljs-keyword">return</span> s;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    read();n=read();<br>    inc(i,<span class="hljs-number">1</span>,n)&#123;<br>_x=read();_y=read();a[i].v=read();<br>a[i].x=<span class="hljs-number">2</span>*_x-_y;<br>a[i].y=<span class="hljs-number">2</span>*_x+_y;<br>    &#125;<br>    sort(a+<span class="hljs-number">1</span>,a+<span class="hljs-number">1</span>+n);<br>    inc(i,<span class="hljs-number">1</span>,n)b[i]=a[i].y;<br>    sort(b+<span class="hljs-number">1</span>,b+<span class="hljs-number">1</span>+n);tot=unique(b+<span class="hljs-number">1</span>,b+<span class="hljs-number">1</span>+n)-b<span class="hljs-number">-1</span>;<br>    inc(i,<span class="hljs-number">1</span>,n)a[i].y=lower_bound(b+<span class="hljs-number">1</span>,b+<span class="hljs-number">1</span>+tot,a[i].y)-b;<br>    inc(i,<span class="hljs-number">1</span>,n)&#123;<br><span class="hljs-keyword">int</span> t=sum(a[i].y)+a[i].v;<br>add(a[i].y,t);<br>ans=max(ans,t);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> BIT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bzoj4742(DP)</title>
      <link href="/bzoj4742/"/>
      <url>/bzoj4742/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=4742" target="_blank" rel="noopener">https://www.lydsy.com/JudgeOnline/problem.php?id=4742</a></p><h3 id="题解一"><a href="#题解一" class="headerlink" title="题解一"></a>题解一</h3><p>有一个显然的想法，先对两个序列排序，设 $d[i][j][k]$ 表示一人选到 $i$ ，一人选到 $j$ ，选了 $k$ 个的方案数，然后直接转移，复杂度 $O(n^2k)$</p><h3 id="题解二"><a href="#题解二" class="headerlink" title="题解二"></a>题解二</h3><p>一个更加优秀的做法是把两个序列混合，然后设 $d[i][j][k]$ 表示选到 $i$ ，第一个人选了 $j$ ，两个人选的个数之差为 $k$ 的方案数，这样转移就可以把复杂度降至 $O(nk^2)$</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll unsigned long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1ll&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 2005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 400005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">9</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps=<span class="hljs-number">1e-8</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br> <br><br><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reduce</span><span class="hljs-params">(<span class="hljs-keyword">int</span>&amp;x)</span></span>&#123;x+=x&gt;&gt;<span class="hljs-number">31</span>&amp;inf;&#125;<br><span class="hljs-keyword">int</span> d[NM][<span class="hljs-number">15</span>][<span class="hljs-number">15</span>];<br><span class="hljs-keyword">int</span> n,m,p;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">P</span>&#123;</span><br>    <span class="hljs-keyword">int</span> x,i;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-keyword">const</span> P&amp;o)<span class="hljs-keyword">const</span>&#123;<span class="hljs-keyword">return</span> x&gt;o.x||(x==o.x&amp;&amp;i&gt;o.i);&#125;<br>&#125;a[NM];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();m=read();p=read();<br>    inc(i,<span class="hljs-number">1</span>,n)a[i].x=read(),a[i].i=<span class="hljs-number">1</span>;<br>    inc(i,<span class="hljs-number">1</span>,m)a[i+n].x=read(),a[i+n].i=<span class="hljs-number">2</span>;<br>    n+=m;m=p;<br>    sort(a+<span class="hljs-number">1</span>,a+<span class="hljs-number">1</span>+n);<br>    d[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    inc(i,<span class="hljs-number">1</span>,n)inc(j,<span class="hljs-number">0</span>,m)inc(k,<span class="hljs-number">0</span>,j)&#123;<br>d[i][j][k]=d[i<span class="hljs-number">-1</span>][j][k];<br><span class="hljs-keyword">if</span>(a[i].i==<span class="hljs-number">1</span>&amp;&amp;k)reduce(d[i][j][k]+=d[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>][k<span class="hljs-number">-1</span>]-inf);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[i].i==<span class="hljs-number">2</span>)reduce(d[i][j][k]+=d[i<span class="hljs-number">-1</span>][j][k+<span class="hljs-number">1</span>]-inf);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>*<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,d[n][m][<span class="hljs-number">0</span>]);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jsk39611(动态LIS)</title>
      <link href="/jsk39611/"/>
      <url>/jsk39611/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://nanti.jisuanke.com/t/39611" target="_blank" rel="noopener">https://nanti.jisuanke.com/t/39611</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>之前写动态LIS一直都是分层然后BIT辅助转移什么的，非常难写非常反人类。。</p><p>如果在二分求LIS的基础上来解决动态LIS会简单不少。。二分看起来求得的信息很少，实际上很多信息是被我们压缩了。。我们可以把原来的 $d$ 数组中的每个元素拓展成为一个 $vector$ ，这样的话会发现这个 $vector$ 是单调递减的。。这样的话我们对每一层转移的时候就利用这个 $vector$ 进行转移即可。</p><p>由于需要在上一层中求得小于他的点的方案数和，所以求个前缀和，然后在这个 $vector$ 上二分就可以了。。</p><p>然后逆过来也不用重新再做一遍LIS了，已经分好层，非关键点肯定转移不回来的，所以可以直接忽略非关键点直接统计。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll unsigned long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1ll&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 500005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 400005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">998244353</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps=<span class="hljs-number">1e-8</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br> <br><br><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reduce</span><span class="hljs-params">(<span class="hljs-keyword">int</span>&amp;x)</span></span>&#123;x+=x&gt;&gt;<span class="hljs-number">31</span>&amp;inf;&#125;<br><span class="hljs-keyword">int</span> n,a[NM];<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;vec[NM],b[NM];<br><span class="hljs-keyword">int</span> l[NM],r[NM],tot,c[NM],cnt[NM];<br><span class="hljs-keyword">int</span> d[NM],len;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">qpow</span><span class="hljs-params">(ll x,ll t)</span></span>&#123;<br>    ll s=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(;t;t&gt;&gt;=<span class="hljs-number">1</span>,x=x*x%inf)<span class="hljs-keyword">if</span>(t&amp;<span class="hljs-number">1</span>)s=s*x%inf;<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();inc(i,<span class="hljs-number">1</span>,n)a[i]=read();<br>    c[<span class="hljs-number">1</span>]=l[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;d[len=<span class="hljs-number">1</span>]=a[<span class="hljs-number">1</span>];vec[<span class="hljs-number">1</span>].push_back(-a[<span class="hljs-number">1</span>]);b[<span class="hljs-number">1</span>].push_back(<span class="hljs-number">1</span>);<br>    cnt[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    inc(i,<span class="hljs-number">2</span>,n)&#123;<br><span class="hljs-keyword">if</span>(d[len]&lt;a[i])cnt[i]=++len;<span class="hljs-keyword">else</span> cnt[i]=lower_bound(d+<span class="hljs-number">1</span>,d+<span class="hljs-number">1</span>+len,a[i])-d;<br>d[cnt[i]]=a[i];<br>vec[cnt[i]].push_back(-a[i]);<br><span class="hljs-keyword">if</span>(cnt[i]==<span class="hljs-number">1</span>)l[i]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">int</span> t=upper_bound(vec[cnt[i]<span class="hljs-number">-1</span>].begin(),vec[cnt[i]<span class="hljs-number">-1</span>].end(),-a[i])-vec[cnt[i]<span class="hljs-number">-1</span>].begin();<br>    <span class="hljs-keyword">if</span>(t==<span class="hljs-number">0</span>)l[i]=c[cnt[i]<span class="hljs-number">-1</span>];<br>    <span class="hljs-keyword">else</span> reduce(l[i]=c[cnt[i]<span class="hljs-number">-1</span>]-b[cnt[i]<span class="hljs-number">-1</span>][t<span class="hljs-number">-1</span>]);<br>&#125;<br>reduce(c[cnt[i]]+=l[i]-inf);<br>b[cnt[i]].push_back(c[cnt[i]]);<br>    &#125;<br>    tot=qpow(c[len],inf<span class="hljs-number">-2</span>);<br>    inc(i,<span class="hljs-number">1</span>,len)vec[i].clear(),b[i].clear(),c[i]=<span class="hljs-number">0</span>;<br>    dec(i,n,<span class="hljs-number">1</span>)<span class="hljs-keyword">if</span>(cnt[i]==len)&#123;<br>r[i]=<span class="hljs-number">1</span>;c[len]++;<br>vec[len].push_back(a[i]);<br>b[len].push_back(c[len]);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">int</span> t=upper_bound(vec[cnt[i]+<span class="hljs-number">1</span>].begin(),vec[cnt[i]+<span class="hljs-number">1</span>].end(),a[i])-vec[cnt[i]+<span class="hljs-number">1</span>].begin();<br><span class="hljs-keyword">if</span>(t==<span class="hljs-number">0</span>)r[i]=c[cnt[i]+<span class="hljs-number">1</span>];<span class="hljs-keyword">else</span> reduce(r[i]=c[cnt[i]+<span class="hljs-number">1</span>]-b[cnt[i]+<span class="hljs-number">1</span>][t<span class="hljs-number">-1</span>]);<br>vec[cnt[i]].push_back(a[i]);<br>reduce(c[cnt[i]]+=r[i]-inf);<br>b[cnt[i]].push_back(c[cnt[i]]);<br>    &#125;<br>    inc(i,<span class="hljs-number">1</span>,n)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld "</span>,<span class="hljs-number">1l</span>l*l[i]*r[i]%inf*tot%inf);<br>    <span class="hljs-built_in">putchar</span>(<span class="hljs-string">'\n'</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>loj6089(背包DP)</title>
      <link href="/loj6089/"/>
      <url>/loj6089/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://loj.ac/problem/6089" target="_blank" rel="noopener">https://loj.ac/problem/6089</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>这个题还是有点意思。。直接上生成函数</p><script type="math/tex; mode=display">\prod_{i=1}^n(1+x^i+...+x^{i^2})=\prod_{i=1}^n\frac{1-x^{i(i+1)}}{1-x^i}</script><p>然后显然对于 $i(i+1)\ge n$ ，直接做完全背包</p><p>对于 $i\le \sqrt n$ ，直接可逆背包就可以了，复杂度 $O(n\sqrt n)$</p><p>然而对于 $i\ge\sqrt n$ ，直接做完全背包会T。。</p><p>这个其实就是数的划分问题，对于普通的数的划分，我们可以设 $d[i][j]$ 为选了 $i$ 个数的 $j$ 的划分方案数，然后可以选择全部加 $1$ 或者令开一段 $1$ ，有</p><script type="math/tex; mode=display">d[i][j]=d[i-1][j-1]+d[i][j-i]</script><p>这里因为体积都大于 $\sqrt n$ ，而且个数也小于 $\sqrt n$ ，所以每次加进 $\sqrt n+1$ 的物品，然后逐次+1即可。。复杂度降至 $O(n\sqrt n)$  </p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1ll&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 100005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 2005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps=<span class="hljs-number">1e-8</span>;<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">23333333</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br> <br><br><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reduce</span><span class="hljs-params">(ll&amp;x)</span></span>&#123;x+=x&gt;&gt;<span class="hljs-number">63</span>&amp;inf;&#125;<br><span class="hljs-keyword">int</span> n,m,<span class="hljs-keyword">_t</span>;<br>ll d[<span class="hljs-number">2</span>][NM],f[NM];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();m=<span class="hljs-built_in">sqrt</span>(n);<br>    d[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<span class="hljs-keyword">_t</span>=<span class="hljs-number">0</span>;f[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    inc(i,<span class="hljs-number">1</span>,m)&#123;<br><span class="hljs-keyword">_t</span>^=<span class="hljs-number">1</span>;mem(d[<span class="hljs-keyword">_t</span>]);<br>inc(j,i*(m+<span class="hljs-number">1</span>),n)reduce(d[<span class="hljs-keyword">_t</span>][j]=d[<span class="hljs-keyword">_t</span>^<span class="hljs-number">1</span>][j-m<span class="hljs-number">-1</span>]+d[<span class="hljs-keyword">_t</span>][j-i]-inf);<br>inc(j,i,n)reduce(f[j]+=d[<span class="hljs-keyword">_t</span>][j]-inf);<br>    &#125;<br>    inc(i,<span class="hljs-number">1</span>,m)&#123;<br>inc(j,i,n)reduce(f[j]+=f[j-i]-inf);<br><span class="hljs-keyword">int</span> k=i*(i+<span class="hljs-number">1</span>);<br>dec(j,n,k)reduce(f[j]-=f[j-k]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,f[n]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 组合数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>luogu5307(DP+整除函数)</title>
      <link href="/luogu5307/"/>
      <url>/luogu5307/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.org/problem/P5307" target="_blank" rel="noopener">https://www.luogu.org/problem/P5307</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>普通做法是设 $d[i][j][k]$ 为到 $(i,j)$ 乘积为 $k$ 的方案数，可是这个显然会T。。</p><p>这个点应该就是这个题比较巧的地方，我们设 $d[i][j][k]$ 为到 $(i,j)$ 时还要乘上 $k$ 才会超过 $n$ 的方案数。。</p><p>这样的话加入一个数，$k$ 就会变成 $\lceil\frac{k}{x} \rceil$ ，所以 $k$ 的值一直是 $\lceil\frac{n}{i} \rceil$ ，由整除函数的性质可以知道这样的个数只有 $\sqrt n$ 个，然后状态就压到了 $O(rs\sqrt n)$ 了。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1ll&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 305</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 2005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps=<span class="hljs-number">1e-8</span>;<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br> <br><br><br><br><span class="hljs-keyword">int</span> n,m,a[NM][NM],k,cnt,w[nm],<span class="hljs-keyword">_t</span>;<br>ll d[<span class="hljs-number">2</span>][NM][nm];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reduce</span><span class="hljs-params">(ll&amp;x)</span></span>&#123;x+=x&gt;&gt;<span class="hljs-number">63</span>&amp;inf;&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">id</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<span class="hljs-keyword">return</span> x&lt;=cnt/<span class="hljs-number">2</span>?cnt-x+<span class="hljs-number">1</span>:(k<span class="hljs-number">-1</span>)/x+<span class="hljs-number">1</span>;&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();m=read();k=read();<br>    inc(i,<span class="hljs-number">1</span>,n)inc(j,<span class="hljs-number">1</span>,m)a[i][j]=read();<br>    cnt=<span class="hljs-built_in">sqrt</span>(k);<br>    inc(i,<span class="hljs-number">1</span>,cnt)w[i]=(k<span class="hljs-number">-1</span>)/i+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(w[cnt]&gt;<span class="hljs-number">1</span>)w[cnt+<span class="hljs-number">1</span>]=w[cnt]<span class="hljs-number">-1</span>,cnt++;<br>    d[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>][id(k)]=<span class="hljs-number">1</span>;<span class="hljs-keyword">_t</span>=<span class="hljs-number">0</span>;<br>    inc(i,<span class="hljs-number">1</span>,n)&#123;<br><span class="hljs-keyword">_t</span>^=<span class="hljs-number">1</span>;mem(d[<span class="hljs-keyword">_t</span>]);<br>inc(j,<span class="hljs-number">1</span>,m)inc(k,<span class="hljs-number">1</span>,cnt)&#123;<br>    reduce(d[<span class="hljs-keyword">_t</span>][j][id((w[k]<span class="hljs-number">-1</span>)/a[i][j]+<span class="hljs-number">1</span>)]+=d[<span class="hljs-keyword">_t</span>^<span class="hljs-number">1</span>][j][k]-inf);<br>    <span class="hljs-keyword">if</span>(j&lt;m)reduce(d[<span class="hljs-keyword">_t</span>][j+<span class="hljs-number">1</span>][id((w[k]<span class="hljs-number">-1</span>)/a[i][j+<span class="hljs-number">1</span>]+<span class="hljs-number">1</span>)]+=d[<span class="hljs-keyword">_t</span>][j][k]-inf);<br>&#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,d[<span class="hljs-keyword">_t</span>][m][id(<span class="hljs-number">1</span>)]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hdu6715(莫比乌斯函数)</title>
      <link href="/hdu6715/"/>
      <url>/hdu6715/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6715" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=6715</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>结论题。。首先有 $\mu([i,j])=\mu(i)\mu(j)\mu((i,j))$</p><p>那么</p><script type="math/tex; mode=display">\begin{aligned}\sum_{i=1}^n\sum_{j=1}^m\mu([i,j])=&\sum_{i=1}^n\sum_{j=1}^m\mu(i)\mu(j)\mu((i,j))\\=&\sum_d\mu(d)\sum_{i=1}^{\lfloor\frac{n}{d} \rfloor}\mu(id)\sum_{j=1}^{\lfloor\frac{m}{d} \rfloor}\mu(jd)[(i,j)=1]\\=&\sum_d\mu(d)\sum_{i=1}^{\lfloor\frac{n}{d} \rfloor}\mu(id)\sum_{j=1}^{\lfloor\frac{m}{d} \rfloor}\mu(jd)\sum_{d'|i\&d'|j}\mu(d')\\=&\sum_d\mu(d)\sum_{d'}\mu(d')\sum_{i=1}^{\lfloor\frac{n}{dd'} \rfloor}\mu(idd')\sum_{j=1}^{\lfloor\frac{m}{dd'} \rfloor}\mu(jdd')\\=&\sum_d\sum_{d'|d}\mu(d)\mu(\frac{d}{d'})\sum_{i=1}^{\lfloor\frac{n}{d} \rfloor}\mu(id)\sum_{j=1}^{\lfloor\frac{m}{d} \rfloor}\mu(jd)\end{aligned}</script><p>直接预处理第一个卷积，后面的直接埃筛即可。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll unsigned long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1ll&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 1000005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 50005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps=<span class="hljs-number">1e-8</span>;<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br> <br><br><br><br><span class="hljs-keyword">int</span> n,m;<br>ll ans;<br><span class="hljs-keyword">int</span> tot,prime[NM],mu[NM],f[NM];<br><span class="hljs-keyword">bool</span> v[NM];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123;<br>    n=<span class="hljs-number">1e6</span>;f[<span class="hljs-number">1</span>]=mu[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    inc(i,<span class="hljs-number">2</span>,n)&#123;<br><span class="hljs-keyword">if</span>(!v[i])prime[++tot]=i,mu[i]=<span class="hljs-number">-1</span>,f[i]=<span class="hljs-number">-2</span>;<br>inc(j,<span class="hljs-number">1</span>,tot)&#123;<br>    <span class="hljs-keyword">if</span>(i*prime[j]&gt;n)<span class="hljs-keyword">break</span>;<br>    v[i*prime[j]]++;<br>    <span class="hljs-keyword">if</span>(i%prime[j]==<span class="hljs-number">0</span>)&#123;<br><span class="hljs-keyword">if</span>(i/prime[j]%prime[j])&#123;<br>    f[i*prime[j]]=-f[i]/<span class="hljs-number">2</span>;<br>&#125;<br><span class="hljs-keyword">break</span>;<br>    &#125;<br>    f[i*prime[j]]=<span class="hljs-number">-2</span>*f[i];<br>    mu[i*prime[j]]=-mu[i];<br>&#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    init();<br>    <span class="hljs-keyword">int</span> _=read();<span class="hljs-keyword">while</span>(_--)&#123;<br>n=read();m=read();<br>ans=<span class="hljs-number">0</span>;<br>inc(i,<span class="hljs-number">1</span>,n)&#123;<br>    <span class="hljs-keyword">int</span> s=<span class="hljs-number">0</span>,t=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=i;j&lt;=n;j+=i)s+=mu[j];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=i;j&lt;=m;j+=i)t+=mu[j];<br>    ans+=f[i]*s*t;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hdu6710(DP+BFS)</title>
      <link href="/hdu6710/"/>
      <url>/hdu6710/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6710" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=6710</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定一个二分图，左右分别有 $n$ 个点和 $m$ 个点，则有 $nm$ 条边，每条边出现的概率为 $0.5$ ，问左右等概率随机选点 ，问这两个点的最短路的期望 </p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>由对称性，这个可以转化为从 $1\sim n$ 的最短路的期望，这里用的是从 $1$ 到其他点的最短路的平均期望。。</p><p>从 $1$ 开始做 $BFS$ ，构造分层图，在其中求期望和</p><p>设 $d[i][j][k][v]$ 为第 $i$ 层有 $v$ 个点，到当前层黑点 $j$ 个，白点 $k$ 个的路径期望和</p><p>然后直接统计计数就可以了</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1ll&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 35</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 50005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps=<span class="hljs-number">1e-8</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br> <br><br><br><br><br>ll inf;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reduce</span><span class="hljs-params">(ll&amp;x)</span></span>&#123;x+=x&gt;&gt;<span class="hljs-number">63</span>&amp;inf;&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">qpow</span><span class="hljs-params">(ll x,ll t)</span></span>&#123;<br>    ll s=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(;t;t&gt;&gt;=<span class="hljs-number">1</span>,x=x*x%inf)<span class="hljs-keyword">if</span>(t&amp;<span class="hljs-number">1</span>)s=s*x%inf;<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br><span class="hljs-keyword">int</span> n,m,<span class="hljs-keyword">_t</span>;<br>ll g[<span class="hljs-number">2</span>][NM][NM][NM],d[<span class="hljs-number">2</span>][NM][NM][NM],ans,comb[NM][NM];<br>ll p[NM],inv[NM],invp[NM],b[NM][NM],p2[NM*NM];<br><span class="hljs-keyword">int</span> cou;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> _=read();<span class="hljs-keyword">while</span>(_--)&#123;<br>mem(d);mem(g);<br>n=read();m=read();inf=read();<br>p[<span class="hljs-number">0</span>]=p[<span class="hljs-number">1</span>]=inv[<span class="hljs-number">1</span>]=invp[<span class="hljs-number">0</span>]=invp[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>p2[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;inc(i,<span class="hljs-number">1</span>,<span class="hljs-number">900</span>)p2[i]=p2[i<span class="hljs-number">-1</span>]*<span class="hljs-number">2</span>%inf;<br>inc(i,<span class="hljs-number">2</span>,<span class="hljs-number">30</span>)p[i]=p[i<span class="hljs-number">-1</span>]*i%inf,inv[i]=inv[inf%i]*(inf-inf/i)%inf,invp[i]=invp[i<span class="hljs-number">-1</span>]*inv[i]%inf;<br>inc(i,<span class="hljs-number">1</span>,<span class="hljs-number">30</span>)inc(j,<span class="hljs-number">1</span>,<span class="hljs-number">30</span>)b[i][j]=qpow(qpow(<span class="hljs-number">2</span>,i)<span class="hljs-number">-1</span>,j);<br>inc(i,<span class="hljs-number">0</span>,<span class="hljs-number">30</span>)inc(j,<span class="hljs-number">0</span>,i)comb[i][j]=p[i]*invp[j]%inf*invp[i-j]%inf;<br>g[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>][<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<span class="hljs-keyword">_t</span>=<span class="hljs-number">0</span>;ans=<span class="hljs-number">0</span>;<br><span class="hljs-comment">//cou=p2[(n-1)*m];</span><br>inc(p,<span class="hljs-number">1</span>,n+m<span class="hljs-number">-1</span>)&#123;<br>    <span class="hljs-keyword">_t</span>^=<span class="hljs-number">1</span>;mem(d[<span class="hljs-keyword">_t</span>]);mem(g[<span class="hljs-keyword">_t</span>]);<br>    inc(i,<span class="hljs-number">1</span>,n)inc(j,<span class="hljs-number">0</span>,m)<span class="hljs-keyword">if</span>(p&amp;<span class="hljs-number">1</span>)&#123;<br>inc(k,<span class="hljs-number">1</span>,i)<span class="hljs-keyword">if</span>(g[<span class="hljs-keyword">_t</span>^<span class="hljs-number">1</span>][i][j][k])<br>    inc(v,<span class="hljs-number">1</span>,m-j)&#123;<br>ll t=comb[m-j][v]*b[k][v]%inf;<br>reduce(g[<span class="hljs-keyword">_t</span>][i][j+v][v]+=t*g[<span class="hljs-keyword">_t</span>^<span class="hljs-number">1</span>][i][j][k]%inf-inf);<br>reduce(d[<span class="hljs-keyword">_t</span>][i][j+v][v]+=t*(p*v*g[<span class="hljs-keyword">_t</span>^<span class="hljs-number">1</span>][i][j][k]%inf+d[<span class="hljs-keyword">_t</span>^<span class="hljs-number">1</span>][i][j][k])%inf-inf);<br>    &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>inc(k,<span class="hljs-number">1</span>,j)<span class="hljs-keyword">if</span>(g[<span class="hljs-keyword">_t</span>^<span class="hljs-number">1</span>][i][j][k])<br>    inc(v,<span class="hljs-number">1</span>,n-i)&#123;<br>ll t=comb[n-i][v]*b[k][v]%inf;<br>reduce(g[<span class="hljs-keyword">_t</span>][i+v][j][v]+=t*g[<span class="hljs-keyword">_t</span>^<span class="hljs-number">1</span>][i][j][k]%inf-inf);<br>reduce(d[<span class="hljs-keyword">_t</span>][i+v][j][v]+=d[<span class="hljs-keyword">_t</span>^<span class="hljs-number">1</span>][i][j][k]*t%inf-inf);<br>    &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(p&amp;<span class="hljs-number">1</span>)<br>    inc(i,<span class="hljs-number">1</span>,n)inc(j,<span class="hljs-number">1</span>,m)inc(k,<span class="hljs-number">1</span>,m)reduce(ans+=d[<span class="hljs-keyword">_t</span>][i][j][k]*p2[(n-i)*(m-j)]%inf-inf);<br>    <span class="hljs-keyword">else</span><br>    inc(i,<span class="hljs-number">1</span>,n)inc(j,<span class="hljs-number">1</span>,m)inc(k,<span class="hljs-number">1</span>,n)reduce(ans+=d[<span class="hljs-keyword">_t</span>][i][j][k]*p2[(n-i)*(m-j)]%inf-inf);<br>&#125;<br><span class="hljs-comment">//printf("%d\n",cou);</span><br><span class="hljs-comment">//printf("%lld\n",ans);</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans*inv[m]%inf*qpow(p2[n*m],inf<span class="hljs-number">-2</span>)%inf);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> BFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hdu6683(数论分块+杜教筛)</title>
      <link href="/hdu6683/"/>
      <url>/hdu6683/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6683" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=6683</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定序列 $1,2,…,n$ ，求该序列中子序列中为等比数列的个数</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>先排除公比为 $1$ 的情况，发现是单点，直接特殊处理即可。。</p><p>然后对剩下的，考虑枚举其公比 $q$ 和项数 $k$ ，设 $q=\frac{a}{b}(gcd(a,b)=1)$ ，则数列的末项必须为 $Ca^k$ 的形式，则有 $\lfloor\frac{n}{a^{k-1}} \rfloor$ 个这样的数列</p><p>因此剩下的答案为</p><script type="math/tex; mode=display">\sum_{a>1} \sum_{k>2} \varphi(a)\lfloor\frac{n}{a^{k-1} } \rfloor</script><p>当 $k&gt;4$ ，$a\le\sqrt[3]{n}$ ，可以直接暴力枚举</p><p>接下来只需要考虑 $k=3$ 的情况，即</p><script type="math/tex; mode=display">\sum_{i=1}^{\sqrt n} \varphi(i)\lfloor\frac{n}{i^2} \rfloor</script><p>然后对 $\lfloor\frac{n}{i^2} \rfloor$ 分块，当  $i&lt;\sqrt[3]n$ 时，答案只有 $\sqrt[3]n$ 种，当 $i&gt;\sqrt[3]n$ 时，$\frac{n}{i^2}&lt;\sqrt[3]n$ 种，答案也只有 $\sqrt[3]n$ 种</p><p>对满足 $\frac{n}{i^2}=t$ 的最大的 $i$ ，其满足 $\frac{n}{i^2}\ge t$ ，即 $i\le \sqrt\frac{n}{t}$ ，直接向下取整即可。。</p><p>然后分块完需要求 $\varphi(n)$ 的前缀和，由于 $\sqrt n$ 过大，所以需要杜教筛。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1ll&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 50000005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 50005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps=<span class="hljs-number">1e-8</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">998244353</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br> <br><br><br>ll n;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inv2=inf+<span class="hljs-number">1</span>&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-keyword">int</span> m,ans,cnt;<br><span class="hljs-keyword">int</span> prime[NM],phi[NM],tot;<br><span class="hljs-keyword">bool</span> v[NM];<br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt;mp;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reduce</span><span class="hljs-params">(<span class="hljs-keyword">int</span>&amp;x)</span></span>&#123;x+=x&gt;&gt;<span class="hljs-number">31</span>&amp;inf;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123;<br>    cnt=<span class="hljs-number">5e7</span>;phi[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    inc(i,<span class="hljs-number">2</span>,cnt)&#123;<br><span class="hljs-keyword">if</span>(!v[i])prime[++tot]=i,phi[i]=i<span class="hljs-number">-1</span>;<br>inc(j,<span class="hljs-number">1</span>,tot)&#123;<br>    <span class="hljs-keyword">if</span>(i*prime[j]&gt;cnt)<span class="hljs-keyword">break</span>;<br>    v[i*prime[j]]++;<br>    <span class="hljs-keyword">if</span>(i%prime[j]==<span class="hljs-number">0</span>)&#123;<br>phi[i*prime[j]]=phi[i]*prime[j];<br><span class="hljs-keyword">break</span>;<br>    &#125;<br>    phi[i*prime[j]]=phi[i]*phi[prime[j]];<br>&#125;<br>    &#125;<br>    inc(i,<span class="hljs-number">1</span>,cnt)reduce(phi[i]+=phi[i<span class="hljs-number">-1</span>]-inf);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">PH</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(n&lt;=cnt)<span class="hljs-keyword">return</span> phi[n];<br>    <span class="hljs-keyword">if</span>(mp.count(n))<span class="hljs-keyword">return</span> mp[n];<br>    <span class="hljs-keyword">int</span> ans=<span class="hljs-number">1l</span>l*n*(n+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>%inf;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> x=<span class="hljs-number">2</span>,y;x&lt;=n;x=y+<span class="hljs-number">1</span>)&#123;<br>y=n/(n/x);<br>reduce(ans-=<span class="hljs-number">1l</span>l*PH(n/x)*(y-x+<span class="hljs-number">1</span>)%inf);<br>    &#125;<br>    <span class="hljs-keyword">return</span> mp[n]=ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    init();<br>    <span class="hljs-keyword">int</span> _=read();<span class="hljs-keyword">while</span>(_--)&#123;<br>n=read();<br>ans=n%inf*((n+<span class="hljs-number">1</span>)%inf)%inf*inv2%inf;<br>m=<span class="hljs-built_in">sqrt</span>(n);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> x=<span class="hljs-number">2</span>,y;x&lt;=m;x=y+<span class="hljs-number">1</span>)&#123;<br>    y=<span class="hljs-built_in">sqrt</span>(n/(n/x/x));<br>    reduce(ans+=n/x/x%inf*(PH(y)-PH(x<span class="hljs-number">-1</span>)+inf)%inf-inf);<br>&#125;<br>m=<span class="hljs-built_in">pow</span>(n,<span class="hljs-number">1</span>/<span class="hljs-number">3.0</span>);<br>inc(i,<span class="hljs-number">2</span>,m)<br>    <span class="hljs-keyword">for</span>(ll j=n/i/i/i;j;j/=i)<br>reduce(ans+=j%inf*(phi[i]-phi[i<span class="hljs-number">-1</span>]+inf)%inf-inf);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,ans);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DIVCNT2(分块套分块)</title>
      <link href="/DIVCNT2/"/>
      <url>/DIVCNT2/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.spoj.com/problems/DIVCNT2/en/" target="_blank" rel="noopener">https://www.spoj.com/problems/DIVCNT2/en/</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>这个 $\sigma_0(n^2)$ 有点奇怪，必须做一下转化。。</p><p>令 $n=\prod p_i^{a_i}$ ，则</p><script type="math/tex; mode=display">\begin{aligned}\sigma_0(n^2)=&\sigma_0(\prod p_i^{2a_i})\\=&\prod(2a_i+1)\\=&\sum_T 2^{|T|}\prod_{i\in T}a_i\end{aligned}</script><p>把 $\prod a_i$ 看作枚举 $n$ 的因子，有</p><script type="math/tex; mode=display">\sigma_0(n^2)=\sum_{d|n}2^{w(d)}</script><p>其中 $w(d)$ 为 $d$ 的素因子个数，因此又可以将 $2^{w(d)}$ 看成枚举 $d$ 的无平方因子个数</p><script type="math/tex; mode=display">\begin{aligned}\sigma_0(n^2)=&\sum_{d|n}\sum_{d'|d}\mu^2(d')\\=&\sum_{d|n}\mu^2(d)\sigma_0(\frac{n}{d} )\end{aligned}</script><p>因此</p><script type="math/tex; mode=display">\begin{aligned}\sum_{i=1}^n\sigma_0(i^2)=& \sum_{i=1}^n\sum_{d|i}\mu^2(d)\sigma_0(\frac{n}{d} )\\=&\sum_d \mu^2(d)\sum_{i=1}^{\lfloor\frac{n}{d}\rfloor }\sigma_0(i)\\=&\sum_d \sum_{j=1}^{\sqrt d}\mu(j)\lfloor\frac{n}{j^2}\rfloor\sum_{i=1}^{\lfloor\frac{n}{d}\rfloor }\sigma_0(i)\end{aligned}</script><p>直接分块套分块即可。。复杂度 $O(n^{\frac{3}{4}})$</p><p>加上预处理理论上能将复杂度降到 $O(n^{\frac{2}{3}})$ ，然而这里的预处理需要比较大的空间，所以在将预处理的规模尽可能调大的情况下复杂度还是会略高一些。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 50000005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 200005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pi 3.1415926535897931</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br> <br> <br><br><br><br>ll n,ans;<br>ll cas[<span class="hljs-number">10005</span>];<br><span class="hljs-keyword">int</span> mu[NM],prime[NM/<span class="hljs-number">10</span>],tot,cnt,p[NM],f[NM];<br>ll sig[NM];<br><span class="hljs-keyword">bool</span> v[NM];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(cas[<span class="hljs-number">1</span>]&gt;=<span class="hljs-number">1e7</span>)cnt=<span class="hljs-number">5e7</span>;<span class="hljs-keyword">else</span> cnt=<span class="hljs-number">1e7</span>;<br>    sig[<span class="hljs-number">1</span>]=mu[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    inc(i,<span class="hljs-number">2</span>,cnt)&#123;<br><span class="hljs-keyword">if</span>(!v[i])prime[++tot]=i,sig[i]=<span class="hljs-number">2</span>,mu[i]=<span class="hljs-number">-1</span>,p[i]=<span class="hljs-number">2</span>;<br>inc(j,<span class="hljs-number">1</span>,tot)&#123;<br>    <span class="hljs-keyword">if</span>(i*prime[j]&gt;cnt)<span class="hljs-keyword">break</span>;<br>    v[i*prime[j]]++;<br>    <span class="hljs-keyword">if</span>(i%prime[j]==<span class="hljs-number">0</span>)&#123;<br>mu[i*prime[j]]=<span class="hljs-number">0</span>;<br>p[i*prime[j]]=p[i]+<span class="hljs-number">1</span>;<br>sig[i*prime[j]]=sig[i]/p[i]*(p[i]+<span class="hljs-number">1</span>);<br><span class="hljs-keyword">break</span>;<br>    &#125;<br>    mu[i*prime[j]]=-mu[i];<br>    sig[i*prime[j]]=sig[i]&lt;&lt;<span class="hljs-number">1</span>;<br>    p[i*prime[j]]=<span class="hljs-number">2</span>;<br>&#125;<br>    &#125;<br>    inc(i,<span class="hljs-number">1</span>,cnt)sig[i]+=sig[i<span class="hljs-number">-1</span>],f[i]=f[i<span class="hljs-number">-1</span>]+sqr(mu[i]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">Mu</span><span class="hljs-params">(ll n)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(n&lt;=cnt)<span class="hljs-keyword">return</span> f[n];<br>    ll ans=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> m=<span class="hljs-built_in">sqrt</span>(n);<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">1</span>;i&lt;=m;i++)ans+=mu[i]*(n/sqr(i));<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">Sig</span><span class="hljs-params">(ll n)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(n&lt;=cnt)<span class="hljs-keyword">return</span> sig[n];<br>    ll ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(ll x=<span class="hljs-number">1</span>,y,t;x&lt;=n;x=y+<span class="hljs-number">1</span>)&#123;<br>t=n/x;<br>y=n/t;<br>ans+=t*(y-x+<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(ll x=<span class="hljs-number">1</span>,y,last=<span class="hljs-number">0</span>,t;x&lt;=n;x=y+<span class="hljs-number">1</span>)&#123;<br>y=n/(n/x);t=Mu(y);<br>ans+=Sig(n/x)*(t-last);<br>last=t;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> _=read();inc(i,<span class="hljs-number">1</span>,_)cas[i]=read();<br>    init();<br>    inc(i,<span class="hljs-number">1</span>,_)n=cas[i],solve();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hdu6607(min25筛+杜教筛+拉格朗日插值)</title>
      <link href="/hdu6607/"/>
      <url>/hdu6607/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6607" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=6607</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定 $n$ 和 $k$ </p><script type="math/tex; mode=display">\sum_{i=1}^n\sum_{j=1}^n(i,j)^klcm(i,j)[(i,j)\in prime]\bmod{1e9+7}</script><p>$n\le10^{10},k\le100$</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>感觉就是板子大合集。。</p><p>但是公式不难推。。</p><script type="math/tex; mode=display">\begin{aligned}ans=&\sum_{i=1}^n\sum_{j=1}^n(i,j)^klcm(i,j)[(i,j)\in prime]\\=&\sum_{d\in prime}d^{k+1} \sum_{i=1}^{\lfloor\frac{n}{d} \rfloor}\sum_{j=1}^{\lfloor\frac{n}{d} \rfloor}ij[(i,j)=1]\\=&\sum_{d\in prime}d^{k+1}(2\sum_{i=1}^{\lfloor\frac{n}{d} \rfloor}\sum_{j=1}^iij[(i,j)=1]-1)\\=&\sum_{d\in prime}d^{k+1}\sum_{i=1}^{\lfloor\frac{n}{d} \rfloor}i^2\varphi(i)\end{aligned}</script><p>显然对 $\lfloor\frac{n}{d} \rfloor$ 分块即可，这样我们需要求出 $\sum i^2\varphi(i)$  和 $\sum_{d\in prime}d^{k+1}$</p><p>前面的直接杜教筛</p><script type="math/tex; mode=display">\begin{aligned}F(n)=&\sum_{i=1}^n i^2\varphi(i)\\=&\sum_{i=1}^ni^2(i-\sum_{d|i}^{d<i}\varphi(i))\\=&\sum_{i=1}^n i^3-\sum_{i=1}^n i^2\sum_{d|i}^{d<i}\varphi(i)\\=&(\frac{n(n+1)}{2} )^2-\sum_{i=2}^ni^2F(\lfloor\frac{n}{i} \rfloor)\end{aligned}</script><p>后面的上 min25 筛即可，只需要用到前半部分的预处理。。</p><p><br></p><p>然后问题就是如何快速求 $k$ 次幂和了。。</p><p>这个需要拉格朗日插值。。</p><p>如果知道了多项式的点值 $(x_i,y_i)$ ，可以通过以下方法构造</p><script type="math/tex; mode=display">F(x)=\sum_i y_i\frac{\displaystyle\prod_{i\neq j}(x-x_j)}{\displaystyle\prod_{i\neq j}(x_i-x_j)}</script><p>对 $k$ 幂和，我们知道其为 $k+1$ 次多项式，所以我们需要 $k+2$ 个点来求解 ，最简单的就是 $1,2..,k+2$ ，然后对每个要求的 $x$ ，对分子分母用前缀和预处理，然后直接求解即可。。复杂度为 $O(k\sqrt n)$</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3> <figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 200005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 10000005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pi 3.1415926535897931</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br> <br> <br><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reduce</span><span class="hljs-params">(ll&amp;x)</span></span>&#123;x+=x&gt;&gt;<span class="hljs-number">63</span>&amp;inf;&#125;<br>ll n,ans,f[NM],w[NM],pre[NM],prime[nm],phi[nm];<br>ll inv[<span class="hljs-number">105</span>],invp[<span class="hljs-number">105</span>];<br><span class="hljs-keyword">int</span> _k,m,tot,cnt;<br><span class="hljs-keyword">bool</span> v[nm];<br><span class="hljs-function">ll <span class="hljs-title">qpow</span><span class="hljs-params">(ll x,ll t)</span></span>&#123;<br>    ll s=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(;t;t&gt;&gt;=<span class="hljs-number">1</span>,x=x*x%inf)<span class="hljs-keyword">if</span>(t&amp;<span class="hljs-number">1</span>)s=s*x%inf;<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">id</span><span class="hljs-params">(ll x)</span></span>&#123;<span class="hljs-keyword">return</span> x&lt;=m/<span class="hljs-number">2</span>?m-x+<span class="hljs-number">1</span>:n/x;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123;<br>    cnt=<span class="hljs-number">1e7</span>;phi[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    inc(i,<span class="hljs-number">2</span>,cnt)&#123;<br><span class="hljs-keyword">if</span>(!v[i])prime[++tot]=i,phi[i]=i<span class="hljs-number">-1</span>;<br>inc(j,<span class="hljs-number">1</span>,tot)&#123;<br>    <span class="hljs-keyword">if</span>(i*prime[j]&gt;cnt)<span class="hljs-keyword">break</span>;<br>    v[i*prime[j]]++;<br>    <span class="hljs-keyword">if</span>(i%prime[j]==<span class="hljs-number">0</span>)&#123;<br>phi[i*prime[j]]=phi[i]*prime[j];<br><span class="hljs-keyword">break</span>;<br>    &#125;<br>    phi[i*prime[j]]=phi[i]*phi[prime[j]];<br>&#125;<br>    &#125;<br>    inc(i,<span class="hljs-number">1</span>,cnt)phi[i]=(phi[i<span class="hljs-number">-1</span>]+phi[i]*i%inf*i%inf)%inf;<br>    inv[<span class="hljs-number">1</span>]=invp[<span class="hljs-number">0</span>]=invp[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    inc(i,<span class="hljs-number">2</span>,<span class="hljs-number">103</span>)inv[i]=inv[inf%i]*(inf-inf/i)%inf,invp[i]=invp[i<span class="hljs-number">-1</span>]*inv[i]%inf;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(ll n)</span></span>&#123;<br>    m=<span class="hljs-built_in">sqrt</span>(n);<br>    <span class="hljs-keyword">for</span>(tot=<span class="hljs-number">1</span>;prime[tot]&lt;=m;tot++)<br>reduce(pre[tot]=pre[tot<span class="hljs-number">-1</span>]+qpow(prime[tot],_k)-inf);<br>    tot--;<br>    inc(i,<span class="hljs-number">1</span>,m)w[i]=n/i;<br>    <span class="hljs-keyword">while</span>(w[m]&gt;<span class="hljs-number">1</span>)w[m+<span class="hljs-number">1</span>]=w[m]<span class="hljs-number">-1</span>,m++;<br>&#125;<br><br><span class="hljs-built_in">unordered_map</span>&lt;ll,<span class="hljs-keyword">int</span>&gt;mp;<br><br><span class="hljs-function">ll <span class="hljs-title">p2</span><span class="hljs-params">(ll n)</span></span>&#123;<span class="hljs-keyword">return</span> n*(n+<span class="hljs-number">1</span>)%inf*(<span class="hljs-number">2</span>*n+<span class="hljs-number">1</span>)%inf*(inf+<span class="hljs-number">1</span>)/<span class="hljs-number">6</span>%inf;&#125;<br><span class="hljs-function">ll <span class="hljs-title">PH</span><span class="hljs-params">(ll n)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(n&lt;=cnt)<span class="hljs-keyword">return</span> phi[n];<br>    <span class="hljs-keyword">if</span>(mp.count(n))<span class="hljs-keyword">return</span> mp[n];<br>    ll ans=(n+<span class="hljs-number">1</span>)%inf*(n%inf)%inf*(inf+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>%inf;<br>    ans=ans*ans%inf;<br>    <span class="hljs-keyword">for</span>(ll x=<span class="hljs-number">2</span>,y;x&lt;=n;x=y+<span class="hljs-number">1</span>)&#123;<br>y=n/(n/x);<br>reduce(ans-=PH(n/x)*(p2(y%inf)-p2((x<span class="hljs-number">-1</span>)%inf)+inf)%inf);<br>    &#125;<br>    <span class="hljs-keyword">return</span> mp[n]=ans;<br>&#125;<br><br><br>ll sum[<span class="hljs-number">105</span>];<br><span class="hljs-function">ll <span class="hljs-title">fun</span><span class="hljs-params">(ll x)</span></span>&#123;<br>    ll pre[<span class="hljs-number">105</span>],suc[<span class="hljs-number">105</span>];<br>    <span class="hljs-keyword">int</span> n=_k+<span class="hljs-number">2</span>;<br>    mem(pre);mem(suc);<br>    pre[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    inc(i,<span class="hljs-number">1</span>,n)pre[i]=pre[i<span class="hljs-number">-1</span>]*(x-i)%inf;<br>    suc[n+<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    dec(i,n,<span class="hljs-number">1</span>)suc[i]=suc[i+<span class="hljs-number">1</span>]*(x-i)%inf;<br>    ll ans=<span class="hljs-number">0</span>;<br>    inc(i,<span class="hljs-number">1</span>,n)<br><span class="hljs-keyword">if</span>((n-i)&amp;<span class="hljs-number">1</span>)ans+=inf-pre[i<span class="hljs-number">-1</span>]*suc[i+<span class="hljs-number">1</span>]%inf*invp[i<span class="hljs-number">-1</span>]%inf*invp[n-i]%inf*sum[i]%inf,ans%=inf;<br><span class="hljs-keyword">else</span> ans+=inf+pre[i<span class="hljs-number">-1</span>]*suc[i+<span class="hljs-number">1</span>]%inf*invp[i<span class="hljs-number">-1</span>]%inf*invp[n-i]%inf*sum[i]%inf,ans%=inf;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    init();<br>    <span class="hljs-keyword">int</span> _=read();<span class="hljs-keyword">while</span>(_--)&#123;<br>mp.clear();<br>n=read();_k=read()+<span class="hljs-number">1</span>;<br>init(n);ans=<span class="hljs-number">0</span>;<br>inc(i,<span class="hljs-number">1</span>,_k+<span class="hljs-number">2</span>)sum[i]=(sum[i<span class="hljs-number">-1</span>]+qpow(i,_k))%inf;<br>inc(i,<span class="hljs-number">1</span>,m)f[i]=fun(w[i]%inf)<span class="hljs-number">-1</span>;<br><span class="hljs-comment">//inc(i,1,m)printf("%lld ",w[i]);putchar('\n');</span><br><span class="hljs-comment">//inc(i,1,m)printf("%lld ",f[i]);putchar('\n');</span><br>inc(j,<span class="hljs-number">1</span>,tot)&#123;<br>    ll t=qpow(prime[j],_k);<br>    inc(i,<span class="hljs-number">1</span>,m)<span class="hljs-keyword">if</span>(prime[j]*prime[j]&lt;=w[i])&#123;<br>reduce(f[i]-=t*(f[id(w[i]/prime[j])]-pre[j<span class="hljs-number">-1</span>]+inf)%inf);<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-comment">//inc(i,1,m)printf("%lld ",f[i]);putchar('\n');</span><br>f[m+<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(ll x=<span class="hljs-number">1</span>,y;x&lt;=n;x=y+<span class="hljs-number">1</span>)&#123;<br>    y=n/(n/x);<br>    ans+=PH(n/x)*(f[id(y)]-f[id(x<span class="hljs-number">-1</span>)]+inf)%inf;<br>    ans%=inf;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>now890A(可逆背包)</title>
      <link href="/now890A/"/>
      <url>/now890A/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://ac.nowcoder.com/acm/contest/890/A" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/contest/890/A</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定 $n$ 张卡牌，将牌打乱后，可以选择抽一张牌，或者结束游戏，如果游戏结束时抽到的牌的数之和如果在 $(a,b]$ 内，则获胜，否则失败。</p><p>求在使用最优策略的情况下，获胜的概率</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>感觉是个不错的题。。</p><p>首先考虑牌的顺序的情况，如果当前抽到的数比 $a$ 小，必然还要再抽，如果在区间 $(a,b]$ 中，那就直接结束。所以问题转化为，在前缀和中是否有落在 $(a,b]$ 中，由于前缀和有多个点落在区间中比较难处理，所以求前缀和均在区间 $(a,b]$ 中的排列的个数。。</p><p>要使得前缀和不在区间中，要么所有数之和小于等于 $a$ ，要么通过某张牌从 $\le a$ 跨到 $&gt;b$ ，那么可以枚举这张牌，然后问题转化为求前面的牌的排列数。。</p><p>这个如果用背包来做的话显然会忽略排列顺序，然而如果在背包中多一维记录牌的个数，那么直接在方案数上手动乘排列数就可以了。。</p><p>这样就枚举牌放进背包转移，复杂度 $O(n^4)$ ，不可接受。。</p><p>考虑到每次只是挖去一个点形成计数背包，所以可以考虑可逆背包，这样每次挖去物品相当于放进权值为负的物品，然后复杂度降到 $O(n^3)$</p><p>至于数值问题和精度问题，由于 $500!$ 在 $long\,double$ 的表示范围内，所以直接用 $long\,double$ 去计算就可以了，预处理阶乘可以降低精度误差。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 505</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 128</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pi 3.1415926535897931</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">1e18</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br> <br> <br><br><br><span class="hljs-keyword">int</span> n,_a,_b,a[NM],s;<br><span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> d[NM][NM],g[NM][NM],p[NM];<br><span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ans;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();_a=read();_b=read();<br>    p[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;inc(i,<span class="hljs-number">1</span>,n)p[i]=p[i<span class="hljs-number">-1</span>]*i;<br>    inc(i,<span class="hljs-number">1</span>,n)a[i]=read(),s+=a[i];<br>    <span class="hljs-keyword">if</span>(s&lt;=_a)<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>*<span class="hljs-built_in">printf</span>(<span class="hljs-string">"0\n"</span>);<br>    d[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    inc(k,<span class="hljs-number">1</span>,n)&#123;<br>dec(i,k,<span class="hljs-number">1</span>)inc(j,a[k],_a)d[i][j]+=d[i<span class="hljs-number">-1</span>][j-a[k]];<br>    &#125;<br>    inc(k,<span class="hljs-number">1</span>,n)<span class="hljs-keyword">if</span>(a[k]&gt;=_b+<span class="hljs-number">1</span>-_a)&#123;<br><span class="hljs-built_in">memcpy</span>(g,d,<span class="hljs-keyword">sizeof</span>(d));<br>inc(i,<span class="hljs-number">1</span>,n)&#123;<br>    inc(j,a[k],_a)g[i][j]-=g[i<span class="hljs-number">-1</span>][j-a[k]];<br>&#125;<br>inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)inc(j,max(_b+<span class="hljs-number">1</span>-a[k],<span class="hljs-number">0</span>),_a)ans+=g[i][j]*p[i]*p[n-i<span class="hljs-number">-1</span>];<br>    &#125;<br>    <span class="hljs-comment">//printf("%lf\n",ans);</span><br>    ans/=p[n];<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%.10lf\n"</span>,(<span class="hljs-keyword">double</span>)(<span class="hljs-number">1</span>-ans));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 组合数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>min25笔记</title>
      <link href="/min25/"/>
      <url>/min25/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前一直想学。。然后网上博客资料其实也参差不齐，并不是很够很好地吸收。。(其实他们反复提及的东西也确实是 min25 的精髓，只是我没能参透)</p><p>然后感谢赵大佬解答了窝的一些疑惑，让窝基本理解 min25 是一个怎样的算法</p><p>最后这里应该不会再提及州阁筛的思想了，不过想学 min25 应该先得把州阁筛过一遍(基本理解思想，可以不用实现)</p><h2 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h2><h3 id="1-预处理"><a href="#1-预处理" class="headerlink" title="1.预处理"></a>1.预处理</h3><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><p>积性函数中，最重要的是素数，为了求一个积性函数 $f(i)$ 的前缀和，我们先要求 $\sum_p f(p)$ ，即所有素数的函数值的和</p><p>这即是 min25 筛的预处理步骤，由于自变量为素数，所以对应的函数形式也比较简单，我们可以以这个函数( min25 筛中要求这个函数为完全积性函数且前缀和比较容易求得 )来进行筛法，将该函数记为 $F(n)$</p><p><strong>注意：由于 1 没有最小素因子，min25 筛求解时先暂时忽略 f(1) 的影响</strong></p><p>记 $p_i$ 为第 $i$ 小的素数</p><p>记 $lpf(n)$ 为 $n$ 的最小素因子</p><p><strong>引理</strong>  $\forall i\le n$ ，若 $lpf(i)&gt; \sqrt n$ ，则 $i$ 为质数</p><p>设</p><script type="math/tex; mode=display">f(n,j)=\sum_{lpf(i)>p_j||i\in prime}^{i\le n} F(i)</script><p>可以发现 $f(i,j)$ 是在模拟埃式筛法的过程</p><p>有引理可以发现，我们只需要将所有小于等于 $\sqrt n$ 的素数筛完即可</p><p>记 $m$ 为最大的满足 $p_m\le\sqrt n$ </p><p>并预处理</p><script type="math/tex; mode=display">pre(n)=\sum_{i=1}^nF(p_j)</script><p>这里只需要预处理到 $m$ 即可，将在下文筛法中用到</p><p><br></p><h4 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h4><p>初始状态为</p><script type="math/tex; mode=display">f(i,0)=\sum_{j=2}^iF(j)</script><p>考虑在当前状态中再筛去 $p_j$ ，即筛去 $\forall lpf(i)=p_j$ ，则有</p><script type="math/tex; mode=display">f(i,j)=f(i,j-1)-F(p_j)(f(\lfloor\frac{i}{p_j}\rfloor,j-1)-pre(j-1))</script><p>实现时可以考虑按 $i$ 从大到小更新 $f[]$ 数组</p><p><br></p><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><p>可以发现，如果只是求 $f(n,m)$ ， $i$ 的有效值个数为 $O(\sqrt n)$ </p><p>另外，用 $p_j$ 更新函数值时，若 $i&lt;p_j^2$ ， $f(i,j)=f(i,j-1)$ 。即 $p_j$ 只会更新 $i\ge p_j^2$ 的函数值</p><p>那么考虑个 $i$ 被更新的次数，其复杂度为</p><script type="math/tex; mode=display">\sum_{i=1}^\sqrt n\frac{\sqrt i}{\ln \sqrt i}+ \sum_{i=1}^\sqrt n \frac{\sqrt \frac{n}{i}}{\ln \sqrt \frac{n}{i}}\le\frac{n^{\frac{3}{4}}}{\ln n}</script><p> <br></p><p><br></p><p><br></p><h3 id="2-递归求前缀"><a href="#2-递归求前缀" class="headerlink" title="2.递归求前缀"></a>2.递归求前缀</h3><p>求得素数的函数和之后，就能够为求前缀和带来便利</p><p>设</p><script type="math/tex; mode=display">S(n,j)=\sum_{lpf(i)\ge p_j}^{i\le n} f(i)</script><p>和 $f(n,m)$ 的求解相反，我们需要求出 $S(n,1)$</p><p>依次枚举最小素因子，可以得到</p><script type="math/tex; mode=display">S(n,j)=f(n,m)-pre(j-1)+\sum_{k=j}^m(\sum_e^{p_k^e\le n}f(p_j^e)(S(\lfloor\frac{n}{p_j^e}\rfloor,k+1)+\sum_{e=2}^{p_j^e\le n}f(p_k^e))</script><p>这里直接递归即可，不用记忆化</p><p><br></p><h4 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><p>设复杂度为 $T(n,1)$</p><script type="math/tex; mode=display">T(n,1)=\sum_{j=k}^m\sum_e^{p_j^e\le n}T(\lfloor\frac{n}{p_j^e} \rfloor,k+1)</script><p>可以发现，到递归到 $S(i,j)$ 时，此时的 $i$ 是 $\lfloor\frac{n}{k}\rfloor$ 的形式，其中 $k$ 是前 $j$ 个素因子的乘积，并且每个满足上述条件的 $k$ 只被计算一次。</p><p>另外，当 $i&lt;p_j$ 时，$S(i,j)=0$ ，所以有效的 $i$ 要大于 $p_j$ ，即 $k\le \lfloor\frac{n}{p_j} \rfloor$ ，故复杂度为</p><p>这个部分窝还不会证TAT</p><p><br></p><p><br></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>min25 筛说白了就是简化版的州阁筛，能够处理的是 $f(p)$ 求解难度极其简单的积性函数，例如幂函数。其速度比杜教筛略快，但是作为一个亚线性筛，其处理范围也就在 $10^9\sim10^{11}$ 这个数量级内。</p><p>值得一提的是 min25 筛的主要复杂度来自于预处理部分而不是递归部分，据神犇 jlz 的测试，在 $10^{10}$ 的时候，预处理的计算量为 $1.6e7$ ，而递归的计算量接近 $2e5$ </p><p>另外，如果需要在分块时计算素数的幂函数和，那么一次预处理就可以 $O(1)$ 查询</p>]]></content>
      
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> unfinished </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>loj6053(min25筛)</title>
      <link href="/loj6053/"/>
      <url>/loj6053/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://loj.ac/problem/6053" target="_blank" rel="noopener">https://loj.ac/problem/6053</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>min25筛模板题，做这一类题的时候关键要把 $f(p)$ 用完全积性函数表示</p><p>在这题中，$f(p)=p\oplus1$ ，而只有 $p=2$ 时， $f(p)=3$ ，对其他情况 $f(p)=p-1$ ，那么可以先设 $f(p)=p-1$ ，再把 $2$ 的影响去掉就可以了。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 2000005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 128</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pi 3.1415926535897931</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br> <br> <br><br><br><br><span class="hljs-keyword">int</span> tot,m;<br>ll w[NM],pre[NM],f[NM],h[NM],prime[NM],n;<br><span class="hljs-keyword">bool</span> v[NM];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reduce</span><span class="hljs-params">(ll&amp;x)</span></span>&#123;x+=x&gt;&gt;<span class="hljs-number">63</span>&amp;inf;&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">id</span><span class="hljs-params">(ll x)</span></span>&#123;<span class="hljs-keyword">return</span> x&lt;=m/<span class="hljs-number">2</span>?m-x+<span class="hljs-number">1</span>:n/x;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123;<br>    m=<span class="hljs-built_in">sqrt</span>(n);<br>    inc(i,<span class="hljs-number">2</span>,m)<span class="hljs-keyword">if</span>(!v[i])&#123;<br>prime[++tot]=i;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=i&lt;&lt;<span class="hljs-number">1</span>;j&lt;=m;j+=i)v[j]++;<br>    &#125;<br>    inc(i,<span class="hljs-number">1</span>,tot)pre[i]=(pre[i<span class="hljs-number">-1</span>]+prime[i])%inf;<br>    inc(i,<span class="hljs-number">1</span>,m)w[i]=n/i;<br>    <span class="hljs-keyword">while</span>(w[m]&gt;<span class="hljs-number">1</span>)w[m+<span class="hljs-number">1</span>]=w[m]<span class="hljs-number">-1</span>,m++;<br>&#125;<br><br><span class="hljs-function">ll <span class="hljs-title">S</span><span class="hljs-params">(ll n,<span class="hljs-keyword">int</span> m)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(n&lt;prime[m])<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    ll ans=(f[id(n)]-pre[m<span class="hljs-number">-1</span>]+inf)%inf;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=m;i&lt;=tot&amp;&amp;prime[i]*prime[i]&lt;=n;i++)&#123;<br>ll t=prime[i];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;t*prime[i]&lt;=n;t*=prime[i],j++)<br>    reduce(ans+=(prime[i]^j)*S(n/t,i+<span class="hljs-number">1</span>)%inf-inf),<br>    reduce(ans+=(prime[i]^(j+<span class="hljs-number">1</span>))-inf);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();<br>    init();<br>    inc(i,<span class="hljs-number">1</span>,m)f[i]=w[i]%inf*((w[i]+<span class="hljs-number">1</span>)%inf)%inf*(inf+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>%inf<span class="hljs-number">-1</span>,h[i]=(w[i]<span class="hljs-number">-1</span>)%inf;<br>    inc(j,<span class="hljs-number">1</span>,tot)&#123;<br>inc(i,<span class="hljs-number">1</span>,m)<span class="hljs-keyword">if</span>(w[i]&gt;=prime[j]*prime[j])&#123;<br>    <span class="hljs-keyword">int</span> k=id(w[i]/prime[j]);<br>    reduce(f[i]-=prime[j]*(f[k]-pre[j<span class="hljs-number">-1</span>]+inf)%inf);<br>    reduce(h[i]-=h[k]-j+<span class="hljs-number">1</span>);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<br>    &#125;<br>    inc(i,<span class="hljs-number">1</span>,m<span class="hljs-number">-1</span>)f[i]+=<span class="hljs-number">2</span>;<br>    inc(i,<span class="hljs-number">1</span>,m)reduce(f[i]-=h[i]);<br>    inc(i,<span class="hljs-number">1</span>,tot)pre[i]=(pre[i<span class="hljs-number">-1</span>]+(prime[i]^<span class="hljs-number">1</span>))%inf;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,S(n,<span class="hljs-number">1</span>)+<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>now889C(组合数学)</title>
      <link href="/now889C/"/>
      <url>/now889C/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://ac.nowcoder.com/acm/contest/889/C" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/contest/889/C</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定序列 $A$ 和 $b$，设 $r<em>i$ 是 $A$ 的一个排列，设 $t(r_i)$ 为 $r_i$ 的逆序对个数，求 $\sum</em>{r_i}b^{t(r_i)}$</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>只能说数学太差了。。</p><p>如果没有重复的数还是很好考虑的，考虑从小到大加，如果当前有 $m$ 个数，那么每次能产生的贡献为 $0,1..m-1$ ，然后在原有的答案上乘  $\sum_k b^k$ 就可以了。。</p><p>对于有重复的数，我们可以这样考虑，先把他们当做不重复的，然后再减去他们的贡献，针对他们自己本身，他们自己能产生的贡献为一个因子，即 $\sum_k b_k$ </p><p>所以有了 LSJ 给的题解，设 $n$ 个不重复的答案为 $f(n)$ ，那么对 $k$ 个不重复的数除掉 $f(k)$ 即可。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;time.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 100005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 128</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pi 3.1415926535897931</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br> <br> <br><br><br><br><span class="hljs-keyword">int</span> n,v[NM];<br>ll _b,p[NM],ans;<br><br><span class="hljs-function">ll <span class="hljs-title">qpow</span><span class="hljs-params">(ll x,ll t)</span></span>&#123;<br>    ll s=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(;t;t&gt;&gt;=<span class="hljs-number">1</span>,x=x*x%inf)<span class="hljs-keyword">if</span>(t&amp;<span class="hljs-number">1</span>)s=s*x%inf;<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();_b=read();<br>    p[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;inc(i,<span class="hljs-number">1</span>,n)p[i]=p[i<span class="hljs-number">-1</span>]*_b%inf;<br>    inc(i,<span class="hljs-number">1</span>,n)p[i]+=p[i<span class="hljs-number">-1</span>],p[i]%=inf;<br>    inc(i,<span class="hljs-number">1</span>,n)p[i]=p[i]*p[i<span class="hljs-number">-1</span>]%inf;<br>    inc(i,<span class="hljs-number">1</span>,n)v[read()]++;<br>    ans=p[n<span class="hljs-number">-1</span>];<br>    inc(i,<span class="hljs-number">1</span>,<span class="hljs-number">100000</span>)<span class="hljs-keyword">if</span>(v[i]&gt;<span class="hljs-number">1</span>)ans=ans*qpow(p[v[i]<span class="hljs-number">-1</span>],inf<span class="hljs-number">-2</span>)%inf;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>*<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 组合数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hdu6664(随机+状压+BFS)</title>
      <link href="/hdu6664/"/>
      <url>/hdu6664/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6664" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=6664</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定 $n$ 个点，$m$ 条边的无向图，问经过 $k$ 个互不相同的点的路径中权值最大的路径长度</p><p>$n\le 10^4,m\le10^4,k\le6$</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>pxl dalao说这是个经典的随机？？好神奇。。</p><p>一个比较容易想到也显然很假的算法是做 $k-1$ 次松弛，但是会有重边。。。</p><p>如果我们对这 $k$ 个点进行染色，当他们染成不一样的颜色时，我们只要限制不经过相同颜色的点，就可以利用上面的做法了。。</p><p>染色时可以随机染色，这样路径出现的概率为 $\frac{k!}{k^k}$ ，所以相应的，我们需要染 $\frac{k^k}{k!}$ 次就可以了。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;time.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 10005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 64</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pi 3.1415926535897931</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">998244353</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br> <br> <br><br><br><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span>&#123;</span><span class="hljs-keyword">int</span> t,v;edge*next;&#125;e[NM&lt;&lt;<span class="hljs-number">1</span>],*h[NM],*o=e;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y,<span class="hljs-keyword">int</span> v)</span></span>&#123;o-&gt;t=y;o-&gt;v=v;o-&gt;next=h[x];h[x]=o++;&#125;<br><span class="hljs-keyword">int</span> n,m,k,_x,<span class="hljs-keyword">_t</span>,_y,d[NM][nm];<br><span class="hljs-keyword">int</span> a[NM],ans,tot;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">upd</span><span class="hljs-params">(<span class="hljs-keyword">int</span>&amp;x,<span class="hljs-keyword">int</span> y)</span></span>&#123;x=max(x,y);&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    srand(time(<span class="hljs-number">0</span>));<br>    <span class="hljs-keyword">int</span> _=read();<span class="hljs-keyword">while</span>(_--)&#123;<br>n=read();m=read();k=read();ans=<span class="hljs-number">0</span>;<br>inc(i,<span class="hljs-number">1</span>,n)h[i]=<span class="hljs-number">0</span>;<br>o=e;<br>inc(i,<span class="hljs-number">1</span>,m)&#123;_x=read();_y=read();<span class="hljs-keyword">_t</span>=read();add(_x,_y,<span class="hljs-keyword">_t</span>);add(_y,_x,<span class="hljs-keyword">_t</span>);&#125;<br>tot=succ(k)<span class="hljs-number">-1</span>;<br>inc(p,<span class="hljs-number">1</span>,<span class="hljs-number">200</span>)&#123;<br>    inc(i,<span class="hljs-number">1</span>,n)a[i]=rand()%k;<br>    inc(i,<span class="hljs-number">1</span>,n)inc(j,<span class="hljs-number">1</span>,tot)d[i][j]=-inf;<br>    inc(i,<span class="hljs-number">1</span>,n)d[i][succ(a[i])]=<span class="hljs-number">0</span>;<br>    inc(v,<span class="hljs-number">1</span>,tot)inc(i,<span class="hljs-number">1</span>,n)<span class="hljs-keyword">if</span>(d[i][v]&gt;=<span class="hljs-number">0</span>&amp;&amp;(succ(a[i])&amp;v))<br>link(i)<span class="hljs-keyword">if</span>((succ(a[j-&gt;t])&amp;v)==<span class="hljs-number">0</span>)<br>upd(d[j-&gt;t][succ(a[j-&gt;t])|v],d[i][v]+j-&gt;v);<br>    inc(i,<span class="hljs-number">1</span>,n)ans=max(ans,d[i][tot]);<br>&#125;<br><span class="hljs-keyword">if</span>(ans==<span class="hljs-number">0</span>)<span class="hljs-built_in">puts</span>(<span class="hljs-string">"impossible"</span>);<span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,ans);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> BFS </tag>
            
            <tag> 随机化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>comet-8-D(BIT)</title>
      <link href="/comet-8-D/"/>
      <url>/comet-8-D/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.cometoj.com/contest/58/problem/D?problem_id=2758" target="_blank" rel="noopener">https://www.cometoj.com/contest/58/problem/D?problem_id=2758</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>需要转换大量模型。。</p><p>为了使得当前这个点为家，他的出点必须不能被选中，而考虑一下可以发现，有用的出点仅有在他左右两边离他最近的两个点(设为 $l_i$ 和 $r_i$)，这样就可以转化为若区间也包含了这个限制这个点的两个点之一，这个点就不产生价值。。</p><p>然后就可以类似与做区间本质不同数的做法去打标记了，先按区间右端点排序，对当前的点 $i$ ，给所有左端点加上他的价值，由于有 $l_i$ 的限制，当左端点小于 $l_i$ ，其价值得被减回来。。</p><p>然后对 $r_i$ 的限制，如果 $r_i$ 被右端点包含，那么 $i$ 将永远不产生贡献，只要将 $i$ 和 $l_i$ 的影响撤销即可。。</p><p>这些操作均可用 BIT 实现</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3>]]></content>
      
      
      
        <tags>
            
            <tag> BIT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>comet-8-E(数论)</title>
      <link href="/comet-8-E/"/>
      <url>/comet-8-E/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.cometoj.com/contest/58/problem/E?problem_id=2759" target="_blank" rel="noopener">https://www.cometoj.com/contest/58/problem/E?problem_id=2759</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>感觉是个很神奇数论题。。</p><p>首先很容易发现若 $x=\prod p_i^{a_i}$ ，则</p><script type="math/tex; mode=display">f(x)=\prod p_i^{\lfloor\frac{a_i}{2} \rfloor}</script><p>接下来就是化简这个函数了。。姿势比较神奇，直接上题解</p><script type="math/tex; mode=display">\begin{aligned}f(x)=&\prod p_i^{\lfloor\frac{a_i}{2} \rfloor}\\=&\frac{n}{\prod p_i^{\lceil\frac{a_i}{2} \rceil}}\\=&\sum_{y=1}^x[\prod p_i^{\lceil\frac{a_i}{2} \rceil}|y]\\=&\sum_{y=1}^x[x|y^2]\end{aligned}</script><p>然后</p><script type="math/tex; mode=display">\begin{aligned}\sum_{i=1}^nf(i)=&\sum_{i=1}^n\sum_{j=1}^i[i|j^2]\\=&\sum_{i=1}^n\sum_{j=1}^i\sum_{k=1}^i[ik=j^2]\\=&\sum_{i=1}^n\sum_{j=1}^i\sum_{k=1}^i\sum_{d}[(i,k)=d][ik=j^2]\\=&\sum_{d}\sum_{i=1}^{\lfloor\frac{n}{d}\rfloor}\sum_{k=1}^i[(i,k)=1][i,k\in Square]\\=&\sum_{d}\sum_{i=1}^{\sqrt{\lfloor\frac{n}{d}\rfloor}}\sum_{k=1}^i[(i,k)=1]\\=&\sum_{d}\sum_{i=1}^{\sqrt{\lfloor\frac{n}{d}\rfloor}}\varphi(i)\\=&\sum_{i=1}^{\sqrt{n}}\varphi(i)\lfloor\frac{n}{i^2}\rfloor\end{aligned}</script><p>然后直接线性筛就可以了。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 3200005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 1024</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pi 3.1415926535897931</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">998244353</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br> <br> <br><br><br><br><span class="hljs-keyword">int</span> tot,phi[NM],prime[NM],m;<br><span class="hljs-keyword">bool</span> v[NM];<br>ll n,ans;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123;<br>    n=<span class="hljs-number">3200000</span>;phi[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    inc(i,<span class="hljs-number">2</span>,n)&#123;<br><span class="hljs-keyword">if</span>(!v[i])prime[++tot]=i,phi[i]=i<span class="hljs-number">-1</span>;<br>inc(j,<span class="hljs-number">1</span>,tot)&#123;<br>    <span class="hljs-keyword">if</span>(i*prime[j]&gt;n)<span class="hljs-keyword">break</span>;<br>    v[i*prime[j]]++;<br>    <span class="hljs-keyword">if</span>(i%prime[j]==<span class="hljs-number">0</span>)&#123;<br>phi[i*prime[j]]=phi[i]*prime[j];<br><span class="hljs-keyword">break</span>;<br>    &#125;<br>    phi[i*prime[j]]=phi[i]*phi[prime[j]];<br>&#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    init();<br>    <span class="hljs-keyword">int</span> _=read();<span class="hljs-keyword">while</span>(_--)&#123;<br>n=read();m=<span class="hljs-built_in">sqrt</span>(n);ans=<span class="hljs-number">0</span>;<br>inc(i,<span class="hljs-number">1</span>,m)ans+=(n/i/i)*phi[i];<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hdu6656(概率DP)</title>
      <link href="/hdu6656/"/>
      <url>/hdu6656/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6656" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=6656</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>有等级 $1\sim n+1$ ，在每个等级 $i(i&lt;n)$ ，可以花 $a_i$ 的代价升级，此时有 $p_i$ 的概率升到 $i+1$ 级，有 $1-p_i$ 的概率降到 $x_i$ 级</p><p>给定 $q$ 次询问，问从 $l_i$ 升级到 $r_i$ 需要的花费的期望</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>这个题目有点反套路，如果想平时一样反向设状态，转移很容易，但是状态图不是一个拓扑图。。</p><p>在考虑 $q$ 次询问的时候很容易发现，这个题的期望具有差分性质，所以利用这个差分性质，我们也能够求出这个题各个点的期望。。</p><p>设 $d[i]$ 为升级到 $i$ 的期望花费，那么需要计算从 $i-1$ 升级到 $i$ 的期望花费。如果升级失败，需要额外花费 $d[i-1]-d[x<em>i]$ 的花费重新回到 $i-1$ 级。由于我们需要尝试的次数期望为 $\frac{1}{p_i}$ ，所以期望花费为 $\frac{1}{p_i-1}a</em>{i-1}+(\frac{1}{p_i}-1)(d[i-1]-d[x_i])$</p><p>然后就直接递推出来差分即可。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 500005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 2097152</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pi 3.1415926535897931</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br> <br> <br><br><br><br><span class="hljs-keyword">int</span> n,m,f[NM],_x,_y;<br>ll p[NM],a[NM],d[NM];<br><br><span class="hljs-function">ll <span class="hljs-title">qpow</span><span class="hljs-params">(ll x,ll t)</span></span>&#123;<br>    ll s=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(;t;t&gt;&gt;=<span class="hljs-number">1</span>,x=x*x%inf)<span class="hljs-keyword">if</span>(t&amp;<span class="hljs-number">1</span>)s=s*x%inf;<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> _=read();<span class="hljs-keyword">while</span>(_--)&#123;<br>    n=read();m=read();d[<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br>    inc(i,<span class="hljs-number">1</span>,n)&#123;<br>        p[i]=read();<br>        p[i]=read()*qpow(p[i],inf<span class="hljs-number">-2</span>)%inf;<br>        f[i]=read();<br>        a[i]=read();<br>    &#125;<br>    inc(i,<span class="hljs-number">1</span>,n)&#123;<br>        d[i+<span class="hljs-number">1</span>]=(d[i]+a[i]*p[i]%inf+(d[i]-d[f[i]]+inf)*(p[i]<span class="hljs-number">-1</span>+inf)%inf)%inf;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(m--)&#123;<br>        _x=read();_y=read();<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,(d[_y]-d[_x]+inf)%inf);<br>    &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hdu6652(DP+二分/枚举)</title>
      <link href="/hdu6652/"/>
      <url>/hdu6652/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6652" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=6652</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>现在卡里有一定存款，额数为 $[x,y]$  内的正整数，每次可以猜一个数，如果存款数大于这个数，则需要支付 $b$ 的代价，否则将这个数的存款取出，并支付 $a$ 的代价，直到存款取完为止。制定一个策略，在最环的情况下使得需要支付的代价最少</p><p>$0\le x\le y\le2\times10^5$</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>很容易想到代价和区间长度有关，那么设 $d[i]$ 为将 $[0,i]$ 取完的最小代价，则</p><script type="math/tex; mode=display">\begin{aligned}d[i]=\min_{j=1}^i\max\{d[j-1]+b,d[i-j]+a \}\end{aligned}</script><p>然而很容易想到，当 $x=y$ 时，用上式求解是有问题的，因为此时至少要取一次钱，所以设 $d[i][1]$ 为没有取钱时的最小代价，$d[i][0]$ 为取过了的最小代价，有</p><script type="math/tex; mode=display">\begin{aligned}d[i][0]=&\min_{j=1}^i\max\{d[j-1][0]+b,d[i-j][0]+a \}\\d[i][1]=&\min_{j=0}^i\max\{d[i-1][1]+b,d[i-j][0]+a \}\end{aligned}</script><p>然后这个东西显然是一个 $V$ 字型的函数，最低点在 $\max$ 取值的转接点处取得，所以可以直接二分，找到转接点。。复杂度 $O(nlogn)$</p><p>另外一种优化是发现决策点是单调的，所以可以从上一个决策点出发一直枚举到转接点，这和四边形不等式一样，枚举区间被决策点分割成几个部分，所以总的决策复杂度是 $O(n)$</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="解法一-二分"><a href="#解法一-二分" class="headerlink" title="解法一(二分)"></a>解法一(二分)</h4><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 200005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 2097152</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pi 3.1415926535897931</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">1e18</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br> <br> <br><br><br><br><span class="hljs-keyword">int</span> n,_x,_y;<br>ll d[NM][<span class="hljs-number">2</span>],_a,_b;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> _=read();<span class="hljs-keyword">while</span>(_--)&#123;<br>_x=read();_y=read();_a=read();_b=read();<br>n=_y-_x;<br>d[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]=_a;d[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br>inc(i,<span class="hljs-number">1</span>,n)&#123;<br>    d[i][<span class="hljs-number">0</span>]=d[i][<span class="hljs-number">1</span>]=inf;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> x=<span class="hljs-number">1</span>,y=i;x&lt;=y;)<br><span class="hljs-keyword">if</span>(d[mid<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>]+_b&gt;d[i-mid][<span class="hljs-number">0</span>]+_a)<br>    d[i][<span class="hljs-number">0</span>]=min(d[i][<span class="hljs-number">0</span>],d[mid<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>]+_b),y=mid<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">else</span> d[i][<span class="hljs-number">0</span>]=min(d[i][<span class="hljs-number">0</span>],d[i-mid][<span class="hljs-number">0</span>]+_a),x=mid+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> x=<span class="hljs-number">0</span>,y=i;x&lt;=y;)<br><span class="hljs-keyword">if</span>(d[mid<span class="hljs-number">-1</span>][<span class="hljs-number">1</span>]+_b&gt;d[i-mid][<span class="hljs-number">0</span>]+_a)<br>    d[i][<span class="hljs-number">1</span>]=min(d[i][<span class="hljs-number">1</span>],d[mid<span class="hljs-number">-1</span>][<span class="hljs-number">1</span>]+_b),y=mid<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">else</span> d[i][<span class="hljs-number">1</span>]=min(d[i][<span class="hljs-number">1</span>],d[i-mid][<span class="hljs-number">0</span>]+_a),x=mid+<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(_x)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,d[n][<span class="hljs-number">1</span>]);<span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,d[n][<span class="hljs-number">0</span>]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="解法二-枚举"><a href="#解法二-枚举" class="headerlink" title="解法二(枚举)"></a>解法二(枚举)</h4><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 200005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 2097152</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pi 3.1415926535897931</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">1e18</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br> <br> <br><br><br><br><span class="hljs-keyword">int</span> n,_x,_y,p[NM][<span class="hljs-number">2</span>];<br>ll d[NM][<span class="hljs-number">2</span>],_a,_b;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> _=read();<span class="hljs-keyword">while</span>(_--)&#123;<br>_x=read();_y=read();_a=read();_b=read();<br>n=_y-_x;<br>d[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]=_a;d[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br>inc(i,<span class="hljs-number">1</span>,n)&#123;<br>    d[i][<span class="hljs-number">0</span>]=d[i][<span class="hljs-number">1</span>]=inf;<br>    inc(j,p[i<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>],i)<br><span class="hljs-keyword">if</span>(d[j<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>]+_b&lt;d[i-j][<span class="hljs-number">0</span>]+_a)<br>    d[i][<span class="hljs-number">0</span>]=d[i-j][<span class="hljs-number">0</span>]+_a;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">if</span>(d[i][<span class="hljs-number">0</span>]&gt;d[j<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>]+_b)<br>d[i][<span class="hljs-number">0</span>]=d[j<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>]+_b,p[i][<span class="hljs-number">0</span>]=j;<br>    <span class="hljs-keyword">else</span> p[i][<span class="hljs-number">0</span>]=j<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">break</span>;<br>&#125;<br>    inc(j,p[i<span class="hljs-number">-1</span>][<span class="hljs-number">1</span>],i)<br><span class="hljs-keyword">if</span>(d[j<span class="hljs-number">-1</span>][<span class="hljs-number">1</span>]+_b&lt;d[i-j][<span class="hljs-number">0</span>]+_a)<br>    d[i][<span class="hljs-number">1</span>]=d[i-j][<span class="hljs-number">0</span>]+_a;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">if</span>(d[i][<span class="hljs-number">1</span>]&gt;d[j<span class="hljs-number">-1</span>][<span class="hljs-number">1</span>]+_b)<br>d[i][<span class="hljs-number">1</span>]=d[j<span class="hljs-number">-1</span>][<span class="hljs-number">1</span>]+_b,p[i][<span class="hljs-number">1</span>]=j;<br>    <span class="hljs-keyword">else</span> p[i][<span class="hljs-number">1</span>]=j<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(_x)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,d[n][<span class="hljs-number">1</span>]);<span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,d[n][<span class="hljs-number">0</span>]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>loj2340(欧拉回路+状压DP+子集卷积)</title>
      <link href="/loj2340/"/>
      <url>/loj2340/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://loj.ac/problem/2340" target="_blank" rel="noopener">https://loj.ac/problem/2340</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>很容易想到一个状压，设 $d[S]$ 为 $S$ 状态的方案数</p><p>然后转移需要预处理合法的州，不存在欧拉回路或者不连通均可，其价值设为 $f[S]$ ，那么有</p><script type="math/tex; mode=display">d[S]=\frac{1}{f[S]} \sum_{T\subset S,T\neq \emptyset}f[T]d[S-T]</script><p>这是个简单的子集卷积。。由于点数是可以逐渐增加的所以可以在求完当前的卷积之后乘上系数。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 22</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 2097152</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pi 3.1415926535897931</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">998244353</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br> <br> <br><br><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reduce</span><span class="hljs-params">(ll&amp;x)</span></span>&#123;x+=x&gt;&gt;<span class="hljs-number">63</span>&amp;inf;&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">qpow</span><span class="hljs-params">(ll x,ll t)</span></span>&#123;<br>    ll s=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(;t;t&gt;&gt;=<span class="hljs-number">1</span>,x=x*x%inf)<span class="hljs-keyword">if</span>(t&amp;<span class="hljs-number">1</span>)s=s*x%inf;<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br><span class="hljs-keyword">int</span> n,m,p,b[NM],tot,a[NM],_x,_y,fa[NM];<br>ll f[NM][nm],d[NM][nm],c[nm];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fmt</span><span class="hljs-params">(ll*a,<span class="hljs-keyword">int</span> f=<span class="hljs-number">0</span>)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(f)f=<span class="hljs-number">-1</span>;<span class="hljs-keyword">else</span> f=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;succ(i)&lt;tot;i++)<br>inc(j,<span class="hljs-number">0</span>,tot<span class="hljs-number">-1</span>)<span class="hljs-keyword">if</span>(j&gt;&gt;i&amp;<span class="hljs-number">1</span>)<br>    a[j]+=f*a[j^<span class="hljs-number">1</span>&lt;&lt;i];<br>    inc(i,<span class="hljs-number">0</span>,tot<span class="hljs-number">-1</span>)reduce(a[i]%=inf);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<span class="hljs-keyword">return</span> fa[x]==x?x:fa[x]=find(fa[x]);&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();m=read();p=read();<br>    inc(i,<span class="hljs-number">1</span>,m)&#123;_x=read();_y=read();b[_x]|=succ(_y<span class="hljs-number">-1</span>);b[_y]|=succ(_x<span class="hljs-number">-1</span>);&#125;<br>    inc(i,<span class="hljs-number">1</span>,n)a[i]=read();<br>    tot=succ(n);<br>    inc(i,<span class="hljs-number">1</span>,tot<span class="hljs-number">-1</span>)&#123;<br><span class="hljs-keyword">bool</span> _f=<span class="hljs-literal">false</span>;<br><span class="hljs-keyword">int</span> pos;<br>inc(j,<span class="hljs-number">1</span>,n)fa[j]=j;<br>inc(j,<span class="hljs-number">1</span>,n)<span class="hljs-keyword">if</span>(i&amp;succ(j<span class="hljs-number">-1</span>))&#123;<br>    pos=j;<br>    <span class="hljs-keyword">int</span> t=b[j]&amp;i;<br>    <span class="hljs-keyword">if</span>(__builtin_popcount(t)&amp;<span class="hljs-number">1</span>)_f=<span class="hljs-literal">true</span>;<br>    inc(k,<span class="hljs-number">1</span>,n)<span class="hljs-keyword">if</span>(succ(k<span class="hljs-number">-1</span>)&amp;t)&#123;<br><span class="hljs-keyword">int</span> x=find(j),y=find(k);<br><span class="hljs-keyword">if</span>(x==y)<span class="hljs-keyword">continue</span>;<br>fa[x]=y;<br>    &#125;<br>    c[i]+=a[j];<br>&#125;<br>inc(j,<span class="hljs-number">1</span>,n)<span class="hljs-keyword">if</span>(i&amp;succ(j<span class="hljs-number">-1</span>))<span class="hljs-keyword">if</span>(find(j)!=find(pos))_f=<span class="hljs-literal">true</span>;<br><span class="hljs-keyword">if</span>(p==<span class="hljs-number">0</span>)c[i]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(p==<span class="hljs-number">2</span>)c[i]=c[i]*c[i]%inf;<br><span class="hljs-keyword">if</span>(_f)f[__builtin_popcount(i)][i]=c[i];<br>    &#125;<br>    inc(i,<span class="hljs-number">0</span>,tot)c[i]=qpow(c[i],inf<span class="hljs-number">-2</span>);<br>    inc(i,<span class="hljs-number">0</span>,n)fmt(f[i]);<br>    d[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    inc(i,<span class="hljs-number">1</span>,n)&#123;<br>fmt(d[i<span class="hljs-number">-1</span>]);<br>inc(j,<span class="hljs-number">1</span>,i)inc(k,<span class="hljs-number">0</span>,tot<span class="hljs-number">-1</span>)(d[i][k]+=f[j][k]*d[i-j][k])%=inf;<br>fmt(d[i],<span class="hljs-number">1</span>);<br>inc(k,<span class="hljs-number">0</span>,tot<span class="hljs-number">-1</span>)d[i][k]=d[i][k]*c[k]%inf;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,d[n][tot<span class="hljs-number">-1</span>]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> FFT </tag>
            
            <tag> DP </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>loj152(子集卷积模板)</title>
      <link href="/loj152/"/>
      <url>/loj152/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://loj.ac/problem/152" target="_blank" rel="noopener">https://loj.ac/problem/152</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>做子集卷积的时候主要是对集合的交和并都有要求，所以很难找到合适的变换。。然而如果我们记 $a’_{S,i}=[|S|=i]a_S$ 的话，就能将并为空的条件去掉了。。然后剩下或的条件就直接上 $FMT$ 即可。。</p><p>然后在乘积的时候可以交换求和顺序，让内存访问连续，效果显著。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 1048576</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 21</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pi 3.1415926535897931</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">9</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br> <br> <br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reduce</span><span class="hljs-params">(ll&amp;x)</span></span>&#123;x+=x&gt;&gt;<span class="hljs-number">63</span>&amp;inf;&#125;<br><br><span class="hljs-keyword">int</span> n,m,cnt[NM];<br>ll a[nm][NM],b[nm][NM],c[nm][NM];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ifmt</span><span class="hljs-params">(ll*a)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;succ(i)&lt;n;i++)<br>inc(j,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)<span class="hljs-keyword">if</span>(j&gt;&gt;i&amp;<span class="hljs-number">1</span>)<br>    reduce(a[j]-=a[j^<span class="hljs-number">1</span>&lt;&lt;i]);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fmt</span><span class="hljs-params">(ll*a)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;succ(i)&lt;n;i++)<br>inc(j,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)<span class="hljs-keyword">if</span>(j&gt;&gt;i&amp;<span class="hljs-number">1</span>)<br>    reduce(a[j]+=a[j^<span class="hljs-number">1</span>&lt;&lt;i]-inf);<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    m=read();n=<span class="hljs-number">1</span>&lt;&lt;m;<br>    inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)cnt[i]=__builtin_popcount(i);<br>    inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)a[cnt[i]][i]=read();<br>    inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)b[cnt[i]][i]=read();<br>    inc(i,<span class="hljs-number">0</span>,m)fmt(a[i]),fmt(b[i]);<br>    inc(j,<span class="hljs-number">0</span>,m)inc(k,<span class="hljs-number">0</span>,j)inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)(c[j][i]+=a[k][i]*b[j-k][i])%=inf;<br>    inc(i,<span class="hljs-number">0</span>,m)ifmt(c[i]);<br>    inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld%c"</span>,c[cnt[i]][i],<span class="hljs-string">" \n"</span>[i==n<span class="hljs-number">-1</span>]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> FFT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>now888J(容斥+生成函数)</title>
      <link href="/now888J/"/>
      <url>/now888J/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://ac.nowcoder.com/acm/contest/888/J?&amp;headNav=www" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/contest/888/J?&amp;headNav=www</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定 $L$ 和 $d$ ，要从 $0$ 走到 $L$ ，要求每次走的步长不小于 $d$ ，再给定 $m$ 个限制，要求在 $t_i$ 时刻不能在 $p_i$ 位置上，在这些限制条件下从 $0$ 走到 $L$ 的方案数</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>如果没有限制的话，我们可以预处理 $f[i]$ 表示从 $0$ 走到 $i$ 的方案数，那么有 $f[i]=\sum_{j=1}^{i-d}f[j]$</p><p>然后考虑 $m$ 个限制，利用容斥就可以了，不经过不合法的点到 $i$ 的方案数，设为 $d[i]$ ，那么 $d[i]=count(S,i)-\sum_jd[j]*count(j,i)$</p><p>其中 $count(j,i)$ 为从 $j$ 到 $i$ 的方案数，这个在场上利用生成函数解决的，设 $G(x)=\frac{x^d}{1-x}$ ，那么</p><script type="math/tex; mode=display">G^n(x)=\frac{x^{dn}}{(1-x)^n}\\ [x^m]G^n(x)=\binom{n+m-dn-1}{m-dn}</script><p>然后就可以转移了。。</p><p>然后我们就可以枚举不合法方案中第一个经过的不合法的点，然后把他们减去就可以了，即减去 $d[i]*f[n-p_i]$</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 3005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 20000005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pi 3.1415926535897931</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">998244353</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br> <br> <br><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">P</span>&#123;</span><br>    <span class="hljs-keyword">int</span> x,y;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-keyword">const</span> P&amp;o)<span class="hljs-keyword">const</span>&#123;<span class="hljs-keyword">return</span> x&lt;o.x;&#125;<br>&#125;a[NM];<br><span class="hljs-keyword">int</span> L,_d,m;<br>ll d[NM],ans,f[nm&gt;&gt;<span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> p[nm],invp[nm],inv[nm];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">count</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n,<span class="hljs-keyword">int</span> m)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-number">1l</span>l*n*_d&gt;m)<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> p[n+m-n*_d<span class="hljs-number">-1</span>]*invp[n<span class="hljs-number">-1</span>]%inf*invp[m-n*_d]%inf;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    L=read();_d=read();m=read();<br>    p[<span class="hljs-number">1</span>]=inv[<span class="hljs-number">1</span>]=p[<span class="hljs-number">0</span>]=invp[<span class="hljs-number">0</span>]=invp[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    inc(i,<span class="hljs-number">2</span>,L&lt;&lt;<span class="hljs-number">1</span>)inv[i]=inv[inf%i]*(inf-inf/i)%inf,invp[i]=<span class="hljs-number">1l</span>l*invp[i<span class="hljs-number">-1</span>]*inv[i]%inf,p[i]=<span class="hljs-number">1l</span>l*p[i<span class="hljs-number">-1</span>]*i%inf;<br>    inc(i,<span class="hljs-number">1</span>,m)a[i].x=read(),a[i].y=read();<br>    sort(a+<span class="hljs-number">1</span>,a+<span class="hljs-number">1</span>+m);<br>    inc(i,<span class="hljs-number">1</span>,m)<span class="hljs-keyword">if</span>(<span class="hljs-number">1l</span>l*a[i].x*_d&lt;=a[i].y)&#123;<br>d[i]=count(a[i].x,a[i].y);<br>inc(j,<span class="hljs-number">1</span>,m)<span class="hljs-keyword">if</span>(a[i].x&gt;a[j].x&amp;&amp;a[i].y&gt;a[j].y)&#123;<br>    d[i]=(d[i]+inf-d[j]*count(a[i].x-a[j].x,a[i].y-a[j].y)%inf)%inf;<br>&#125;<br>    &#125;<br>    f[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    inc(i,<span class="hljs-number">1</span>,L)&#123;<br><span class="hljs-keyword">if</span>(i&gt;=_d)f[i]=f[i-_d];<br>f[i]+=f[i<span class="hljs-number">-1</span>];f[i]%=inf;<br>    &#125;<br>    dec(i,L,<span class="hljs-number">1</span>)f[i]+=inf-f[i<span class="hljs-number">-1</span>],f[i]%=inf;<br>    ans=f[L];<br>    inc(i,<span class="hljs-number">1</span>,m)ans+=inf-d[i]*f[L-a[i].y]%inf,ans%=inf;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 组合数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bzoj4036(min-max容斥+FMT)</title>
      <link href="/bzoj4036/"/>
      <url>/bzoj4036/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=4036" target="_blank" rel="noopener">https://www.lydsy.com/JudgeOnline/problem.php?id=4036</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>裸 min-max 容斥，题目求的是 $\max {U}$ ，可以转化为求每个集合的 $\min{T}$ ，然后显然有</p><script type="math/tex; mode=display">\min\{T\}=\frac{1}{1-\displaystyle \sum_{i\in U-T}p_i}</script><p>然后对每个集合枚举元素即可，这里用了 FMT ，复杂度同样为 $O(n2^n)$</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 1048576</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 1024</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pi 3.1415926535897931</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">998244353</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br> <br> <br><br><br><br><span class="hljs-keyword">int</span> n,m;<br><span class="hljs-keyword">double</span> a[NM],ans;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fmt</span><span class="hljs-params">(<span class="hljs-keyword">double</span>*a)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;succ(i)&lt;n;i++)<br>inc(j,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)<span class="hljs-keyword">if</span>(j&gt;&gt;i&amp;<span class="hljs-number">1</span>)<br>    a[j]=a[j]+a[j^<span class="hljs-number">1</span>&lt;&lt;i];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    m=read();<br>    n=succ(m);<br>    inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%lf"</span>,a+i);<br>    fmt(a);<br>    inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-2</span>)&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">fabs</span>(a[i]<span class="hljs-number">-1</span>)&lt;eps)<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>*<span class="hljs-built_in">printf</span>(<span class="hljs-string">"INF\n"</span>);<br><span class="hljs-keyword">if</span>((m-__builtin_popcount(i)+<span class="hljs-number">1</span>)&amp;<span class="hljs-number">1</span>)ans-=<span class="hljs-number">1</span>/(<span class="hljs-number">1</span>-a[i]);<br><span class="hljs-keyword">else</span> ans+=<span class="hljs-number">1</span>/(<span class="hljs-number">1</span>-a[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>*<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%.7lf\n"</span>,ans);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> FFT </tag>
            
            <tag> 组合数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hdu5977(子集反演+DP)</title>
      <link href="/hdu5977/"/>
      <url>/hdu5977/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5977" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=5977</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定 $n$ 个点的树和 $m$ 种物品，每个点上仅一个物品且属于第 $a_i$ 种，问有多少条路径能够获得所有物品</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h4><p>直接点分治上做状压背包就可以了，代码见<a href="https://blog.csdn.net/qkoqhh/article/details/82814941" target="_blank" rel="noopener">这里</a></p><h4 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h4><p>这个方法据说是北师大在那场AK之后没事想出来的orz</p><p>发现这个状压背包的合并实质上在做一个子集或，那么可以利用子集反演将背包的合并转化成点乘，即用 $\displaystyle g(S)=\sum_{T\subset S}f(T)$ 来代替现有的背包，这样合并复杂度变成 $O(m)$ 了，总复杂度直接为 $O(nm)$</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 50005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 1024</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pi 3.1415926535897931</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">998244353</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br> <br> <br><br><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span>&#123;</span><span class="hljs-keyword">int</span> t;edge*next;&#125;e[NM&lt;&lt;<span class="hljs-number">1</span>],*h[NM],*o=e;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;o-&gt;t=y;o-&gt;next=h[x];h[x]=o++;&#125;<br><span class="hljs-keyword">int</span> n,m,tot,a[NM],_x,_y;<br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">short</span> d[NM][nm];<br>ll ans[nm];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> f)</span></span>&#123;<br>    inc(i,<span class="hljs-number">0</span>,tot)<span class="hljs-keyword">if</span>(i&amp;succ(a[x]<span class="hljs-number">-1</span>))d[x][i]=<span class="hljs-number">1</span>;<span class="hljs-keyword">else</span> d[x][i]=<span class="hljs-number">0</span>;<br>    link(x)<span class="hljs-keyword">if</span>(j-&gt;t!=f)&#123;<br>dfs(j-&gt;t,x);<br>inc(i,<span class="hljs-number">0</span>,tot)ans[i]+=<span class="hljs-number">1l</span>l*d[x][i]*d[j-&gt;t][i];<br>inc(i,<span class="hljs-number">0</span>,tot)<span class="hljs-keyword">if</span>(i&amp;succ(a[x]<span class="hljs-number">-1</span>))d[x][i]+=d[j-&gt;t][i];<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d"</span>,&amp;n,&amp;m))&#123;<br>tot=succ(m)<span class="hljs-number">-1</span>;mem(e);mem(h);mem(ans);o=e;<br>inc(i,<span class="hljs-number">1</span>,n)a[i]=read();<br>inc(i,<span class="hljs-number">2</span>,n)&#123;_x=read();_y=read();add(_x,_y);add(_y,_x);&#125;<br><span class="hljs-keyword">if</span>(m==<span class="hljs-number">1</span>)&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,<span class="hljs-number">1l</span>l*n*n);<span class="hljs-keyword">continue</span>;&#125;<br>dfs(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br>ll s=<span class="hljs-number">0</span>;<br>inc(i,<span class="hljs-number">0</span>,tot)<span class="hljs-keyword">if</span>((m-__builtin_popcount(i))&amp;<span class="hljs-number">1</span>)s-=ans[i];<span class="hljs-keyword">else</span> s+=ans[i];<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,s&lt;&lt;<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 分治 </tag>
            
            <tag> 组合数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hdu6643(DP+点分治)</title>
      <link href="/hdu6643/"/>
      <url>/hdu6643/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6643" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=6643</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定 $n$ 个点的树，每个点的权值为 $w_i$ ，求连通子图的个数，满足联通子图的权值的乘积不超过 $m$</p><p>$n\le 2000,m\le10^6$</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>这个题感觉 idea 还不错？可惜数据水了，跑得快的都是暴力。。</p><p>如果直接树背包应该是 $O(nm^2)$ 的，可是如果把背包设成 $\lfloor\frac{n}{i} \rfloor$ 那么背包容量就只有 $O(\sqrt m)$ 了。。</p><p>然后如果在用点分治来避免背包合并的话，复杂度就可以降到 $O(n\sqrt mlogn)$</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 2005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 1000005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reduce</span><span class="hljs-params">(ll&amp;x)</span></span>&#123;x+=x&gt;&gt;<span class="hljs-number">63</span>&amp;inf;&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span>&#123;</span><span class="hljs-keyword">int</span> t;edge*next;&#125;e[NM&lt;&lt;<span class="hljs-number">1</span>],*h[NM],*o=e;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;o-&gt;t=y;o-&gt;next=h[x];h[x]=o++;&#125;<br><span class="hljs-keyword">int</span> n,m,cnt,_x,_y,a[NM],mp[nm],c[NM];<br>ll d[NM][NM],ans;<br><span class="hljs-keyword">int</span> size[NM],smin,tot,root;<br><span class="hljs-keyword">bool</span> v[NM];<br><br><br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> f)</span></span>&#123;size[x]=<span class="hljs-number">1</span>;link(x)<span class="hljs-keyword">if</span>(!v[j-&gt;t]&amp;&amp;j-&gt;t!=f)dfs1(j-&gt;t,x),size[x]+=size[j-&gt;t];&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getroot</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> f)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> s=tot-size[x];<br>    link(x)<span class="hljs-keyword">if</span>(!v[j-&gt;t]&amp;&amp;j-&gt;t!=f)getroot(j-&gt;t,x),s=max(s,size[j-&gt;t]);<br>    <span class="hljs-keyword">if</span>(s&lt;smin)smin=s,root=x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> f)</span></span>&#123;<br>    link(x)<span class="hljs-keyword">if</span>(!v[j-&gt;t]&amp;&amp;j-&gt;t!=f)&#123;<br>mem(d[j-&gt;t]);<br>inc(i,<span class="hljs-number">1</span>,cnt)reduce(d[j-&gt;t][mp[c[i]/a[j-&gt;t]]]+=d[x][i]-inf);<br>dfs(j-&gt;t,x);<br>inc(i,<span class="hljs-number">1</span>,cnt)reduce(d[x][i]+=d[j-&gt;t][i]-inf);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">div</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br>    dfs1(x,<span class="hljs-number">0</span>);<br>    tot=size[x];smin=n;<br>    getroot(x,<span class="hljs-number">0</span>);<br>    v[root]++;<br>    mem(d[root]);<br>    d[root][mp[m/a[root]]]++;<br>    dfs(root,<span class="hljs-number">0</span>);<br>    inc(i,<span class="hljs-number">1</span>,cnt<span class="hljs-number">-1</span>)reduce(ans+=d[root][i]-inf);<br>    <span class="hljs-comment">//printf("%d:%lld\n",root,ans);</span><br>    link(root)<span class="hljs-keyword">if</span>(!v[j-&gt;t])div(j-&gt;t);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> _=read();<span class="hljs-keyword">while</span>(_--)&#123;<br>n=read();m=read();ans=cnt=<span class="hljs-number">0</span>;<br>mem(h);mem(v);o=e;mem(mp);<br>inc(i,<span class="hljs-number">1</span>,n)a[i]=read();<br>inc(i,<span class="hljs-number">2</span>,n)&#123;_x=read();_y=read();add(_x,_y);add(_y,_x);&#125;<br>inc(i,<span class="hljs-number">1</span>,m+<span class="hljs-number">1</span>)<span class="hljs-keyword">if</span>(!mp[m/i])mp[m/i]=++cnt,c[cnt]=m/i;<br>div(<span class="hljs-number">1</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 分治 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xdoj1158(生成函数)</title>
      <link href="/xdoj1158/"/>
      <url>/xdoj1158/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://acm.xidian.edu.cn/problem.php?id=1158" target="_blank" rel="noopener">http://acm.xidian.edu.cn/problem.php?id=1158</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>感觉自己上去写肯定是要自闭了，显然是求</p><script type="math/tex; mode=display">\sum\binom xi\binom y{i+k}</script><p>但是这个 $O(n)$ 会T。。</p><p>然后大大课上用生成函数秒了。。生成函数可以这样构造</p><script type="math/tex; mode=display">\sum (1+z^{-1})^x\sum(1+z)^y</script><p>然后求 $x^k$ 的系数，二项式展开一下就没了。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 2000005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 200005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br>  <br> <br><span class="hljs-keyword">int</span> n,m,k;<br>ll p[NM],inv[NM],invp[NM];<br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=<span class="hljs-number">2e6</span>;p[<span class="hljs-number">1</span>]=inv[<span class="hljs-number">1</span>]=invp[<span class="hljs-number">0</span>]=invp[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    inc(i,<span class="hljs-number">2</span>,n)inv[i]=inv[inf%i]*(inf-inf/i)%inf,invp[i]=invp[i<span class="hljs-number">-1</span>]*inv[i]%inf,p[i]=p[i<span class="hljs-number">-1</span>]*i%inf;<br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;k))<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,p[n+m]*invp[k+n]%inf*invp[m-k]%inf);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 组合数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>now146H(FWT)</title>
      <link href="/now146H/"/>
      <url>/now146H/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://ac.nowcoder.com/acm/contest/146/H" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/contest/146/H</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定 $n$ 堆石子，每堆石子个数为 $a_i$ ，问最多取多少堆石子使得先手败胜</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>一道挺经典的题？</p><p>设所有数的异或和为 $s$ ，那么这个题可以转化为最少取多少个数使得异或和为 $s$</p><p>这个看起来很不可做，其实结合线性基的知识仔细想想由这些数构成的线性空间其基底最多只有 $logn$ 个，所以直接暴力枚举就可以了。。</p><p><del>由于数据范围比较大，所以需要用 $FWT$ ，然而 $FWT$ 会产生自身异或的情况，所以我们需要把这种情况去掉</del></p><p><del>设 $A_m$ 为 $m$ 个不相同的数异或的结果，那么我们只需要去掉 $AABCDE…$ 这种情况即可，此时 $A$ 有 $n-(m-2)$ 中取法，所以有</del></p><script type="math/tex; mode=display">A_m=A_{m-1}*A_1-(m-n+2)A_{n-2}</script><p><del>由于 $FWT$ 是线性变换，上式也在变换之后成立，所以直接只做一次 $FWT$ 即可，判断的时候由于只关心 $a[s]$ 是否为 $0$ ，所以针对这一项用 $O(n)$ 暴力求得，因此总复杂度从 $O(nlog^2n)$ 降到 $O(nlogn)$</del></p><p>upd</p><p>其实根本就不用考虑重复的情况啊，有重复说明前面早就有解了，直接一个一个卷上去判断就完事了啊。。</p><p>好～～菜～～啊～～</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 524288</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 200005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">99993601</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reduce</span><span class="hljs-params">(ll&amp;x)</span></span>&#123;x+=x&gt;&gt;<span class="hljs-number">63</span>&amp;inf;&#125;<br><br><br><span class="hljs-keyword">int</span> n,ans,m,<span class="hljs-keyword">_t</span>,s,cnt[NM];<br>ll a[NM],f[NM];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fwt</span><span class="hljs-params">(ll*a)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">1</span>;k&lt;n;k&lt;&lt;=<span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i+=k&lt;&lt;<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;k;j++)&#123;<br>ll x=a[i+j],y=a[i+j+k];<br>reduce(a[i+j]=x+y-inf);reduce(a[i+j+k]=x-y);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    m=read();inc(i,<span class="hljs-number">1</span>,m)<span class="hljs-keyword">_t</span>=read(),f[<span class="hljs-keyword">_t</span>]++,s^=<span class="hljs-keyword">_t</span>;<br>    n=<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">19</span>;<br>    inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)cnt[i]=(__builtin_popcount(i&amp;s)&amp;<span class="hljs-number">1</span>)?<span class="hljs-number">-1</span>:<span class="hljs-number">1</span>;<br>    a[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    fwt(f);fwt(a);<br>    <span class="hljs-keyword">do</span>&#123;<br>ll s=<span class="hljs-number">0</span>;<br>inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)s+=a[i]*cnt[i],s%=inf;<br><span class="hljs-keyword">if</span>(s)<span class="hljs-keyword">break</span>;<br>ans++;<br>inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)a[i]=a[i]*f[i]%inf;<br>    &#125;<span class="hljs-keyword">while</span>(ans&lt;m);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,m-ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> FFT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xdoj1085(循环卷积)</title>
      <link href="/xdoj1085/"/>
      <url>/xdoj1085/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://acm.xidian.edu.cn/problem.php?id=1085" target="_blank" rel="noopener">http://acm.xidian.edu.cn/problem.php?id=1085</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>主要是理解循环卷积的定义，用 $FFT$ 求解的时候，实际上求的是</p><script type="math/tex; mode=display">c_k=\sum_{(i+j)\bmod{lim}=k}a_ib_j</script><p>所以我们需要将 $lim$ 开到最高次数以上，防止出现循环卷积。。</p><p>这个题反而是直接是做循环卷积，所以可以在频域上直接快速幂。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 524288</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 200005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">99993601</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reduce</span><span class="hljs-params">(ll&amp;x)</span></span>&#123;x+=x&gt;&gt;<span class="hljs-number">63</span>&amp;inf;&#125;<br><br><br><span class="hljs-keyword">int</span> n,ans,m,<span class="hljs-keyword">_t</span>,s,cnt[NM];<br>ll a[<span class="hljs-number">3</span>][NM],f[NM];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fwt</span><span class="hljs-params">(ll*a)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">1</span>;k&lt;n;k&lt;&lt;=<span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i+=k&lt;&lt;<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;k;j++)&#123;<br>ll x=a[i+j],y=a[i+j+k];<br>reduce(a[i+j]=x+y-inf);reduce(a[i+j+k]=x-y);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    m=read();inc(i,<span class="hljs-number">1</span>,m)<span class="hljs-keyword">_t</span>=read(),f[<span class="hljs-keyword">_t</span>]++,s^=<span class="hljs-keyword">_t</span>;<br>    n=<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">19</span>;<br>    inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)cnt[i]=(__builtin_popcount(i&amp;s)&amp;<span class="hljs-number">1</span>)?<span class="hljs-number">-1</span>:<span class="hljs-number">1</span>;<br>    a[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    fwt(f);fwt(a[<span class="hljs-number">0</span>]);<br>    <span class="hljs-keyword">do</span>&#123;<br>ll s=<span class="hljs-number">0</span>;<br>inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)s+=a[ans%<span class="hljs-number">3</span>][i]*cnt[i],s%=inf;<br><span class="hljs-keyword">if</span>(s)<span class="hljs-keyword">break</span>;<br>ans++;<br>inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)a[ans%<span class="hljs-number">3</span>][i]=a[(ans+<span class="hljs-number">2</span>)%<span class="hljs-number">3</span>][i]*f[i]%inf;<br><span class="hljs-keyword">if</span>(ans&gt;<span class="hljs-number">1</span>)inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)reduce(a[ans%<span class="hljs-number">3</span>][i]-=(m-ans+<span class="hljs-number">2</span>)*a[(ans+<span class="hljs-number">1</span>)%<span class="hljs-number">3</span>][i]%inf);<br>    &#125;<span class="hljs-keyword">while</span>(ans&lt;m);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,m-ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> FFT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>now886H(最短路)</title>
      <link href="/now886H/"/>
      <url>/now886H/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://ac.nowcoder.com/acm/contest/886/H" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/contest/886/H</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定 $n$ 个点 $m$ 条权值为 $1$ 的无向图，给定点集 $A$ 和 $B$ ，有一个人会等概率在 $A$ 中的某一个点，有一个人会等概率在 $B$ 中的某个一点，有一个人等概率出现在 $n$ 个点中，他们三人选择一个最优点汇合，问三人走到汇合点的路径和的期望(先确定各自的位置后确定最优汇合点)</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>这个题有点神奇。。首先要能够作一些转化，枚举 $A$ 和 $B$ 的位置，然后再快速确定第三个人的位置和汇合点的贡献。记 $d[i]=dis(a,i)+dis(b,i)$，然后跑一遍多源多汇的最短路即可。。</p><p>简单的想法可以通过建超级源点跑最短路，然而会 $TLE$ ，需要严格 $O(m)$</p><p>很容易想到需要利用边权为 $1$ 的性质 ，这个带来的好处是 $d[i]\le n$ ，利用这个我们可以利用桶排来代替优先队列，然后直接把复杂度降到 $O(n+m)$ </p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 100005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 200005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br> <br><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span>&#123;</span><span class="hljs-keyword">int</span> t;edge*next;&#125;e[nm],*h[NM],*o=e;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;o-&gt;t=y;o-&gt;next=h[x];h[x]=o++;&#125;<br><span class="hljs-keyword">int</span> n,m,_x,_y,<span class="hljs-keyword">_t</span>,a[<span class="hljs-number">21</span>],b[<span class="hljs-number">21</span>],ca,p, _a[<span class="hljs-number">21</span>][NM],_b[<span class="hljs-number">21</span>][NM],d[NM];<br>ll ans,_ans;<br><span class="hljs-keyword">bool</span> v[NM];<br><span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt;q;<br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span></span>&#123;<br>    inc(i,<span class="hljs-number">1</span>,n)d[i]=inf,v[i]=<span class="hljs-literal">false</span>;<br>    d[u]=<span class="hljs-number">0</span>;q.push(u);<br>    <span class="hljs-keyword">while</span>(!q.empty())&#123;<br><span class="hljs-keyword">int</span> t=q.front();q.pop();<br>link(t)<span class="hljs-keyword">if</span>(d[j-&gt;t]&gt;d[t]+<span class="hljs-number">1</span>)&#123;<br>    d[j-&gt;t]=d[t]+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(!v[j-&gt;t])q.push(j-&gt;t),v[j-&gt;t]++;<br>&#125;<br>    &#125;<br>&#125;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;vec[NM];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span></span>&#123;<br>    inc(i,<span class="hljs-number">1</span>,n)v[i]=<span class="hljs-literal">false</span>;<br>    inc(i,<span class="hljs-number">0</span>,n)<span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp;t:vec[i])<span class="hljs-keyword">if</span>(!v[t])&#123;<br>v[t]++;<br>link(t)<span class="hljs-keyword">if</span>(d[j-&gt;t]&gt;d[t]+<span class="hljs-number">1</span>)vec[d[j-&gt;t]=d[t]+<span class="hljs-number">1</span>].push_back(j-&gt;t);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    srand(time(<span class="hljs-number">0</span>));<br>    <span class="hljs-keyword">int</span> _=read();<span class="hljs-keyword">while</span>(_--)&#123;<br>n=read();m=read();o=e;mem(h);<br>inc(i,<span class="hljs-number">1</span>,m)&#123;_x=read();_y=read();add(_x,_y);add(_y,_x);&#125;<br>m=read();inc(i,<span class="hljs-number">1</span>,m)a[i]=read();<br>p=read();inc(i,<span class="hljs-number">1</span>,p)b[i]=read();<br>inc(i,<span class="hljs-number">1</span>,m)&#123;<br>    bfs(a[i]);<br>    inc(j,<span class="hljs-number">1</span>,n)_a[i][j]=d[j];<br>&#125;<br>inc(i,<span class="hljs-number">1</span>,p)&#123;<br>    bfs(b[i]);<br>    inc(j,<span class="hljs-number">1</span>,n)_b[i][j]=d[j];<br>&#125;<br>ans=<span class="hljs-number">0</span>;<br>inc(i,<span class="hljs-number">1</span>,m)inc(j,<span class="hljs-number">1</span>,p)&#123;<br>    inc(k,<span class="hljs-number">0</span>,n)vec[k].clear();<br>    inc(k,<span class="hljs-number">1</span>,n)&#123;<br>d[k]=_a[i][k]+_b[j][k];<br><span class="hljs-keyword">if</span>(d[k]&lt;=n)vec[d[k]].push_back(k);<br>    &#125;<br>    bfs();<br>    inc(k,<span class="hljs-number">1</span>,n)ans+=d[k];<br>&#125;<br>_ans=n*m*p;<br>ll t=__gcd(ans,_ans);ans/=t;_ans/=t;<br><span class="hljs-keyword">if</span>(_ans==<span class="hljs-number">1</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"Case #%d: %lld\n"</span>,++ca,ans);<span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Case #%d: %lld/%lld\n"</span>,++ca,ans,_ans);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 最短路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>now855E(状压DP)</title>
      <link href="/now885E/"/>
      <url>/now885E/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://ac.nowcoder.com/acm/contest/885/E" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/contest/885/E</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定 $n$ 个点 $m$  条边的无向图，求所有的导出子图的独立集的大小之和</p><p>$n\le26$</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>感觉自己傻到家了。。状压就可以了。。</p><p>情况其实并没有想象中的那么复杂，对当前点集来说，我们选择其中一个点，那么这个独立集要么包括他要么不包括他。。所以可以得到</p><script type="math/tex; mode=display">d[S]=\max\{d[S-i],d[S\&(\sim a[i])]+1 \}</script><p>由于点数小，不管是邻接矩阵还是状态转移都可以用位运算完成，所以转移复杂度可以直接降到 $O(1)$</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 1005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 67108864</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br> <br> <br><span class="hljs-keyword">int</span> n,m,_x,_y,tot;<br><span class="hljs-keyword">int</span> a[NM],ans;<br><span class="hljs-keyword">char</span> d[nm];<br><br><span class="hljs-function"><span class="hljs-keyword">char</span> <span class="hljs-title">Max</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<span class="hljs-keyword">return</span> x&gt;y?x:y;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();m=read();<br>    inc(i,<span class="hljs-number">1</span>,m)&#123;<br>_x=read();_y=read();<br>a[_x]|=succ(_y);a[_y]|=succ(_x);<br>    &#125;<br>    inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)a[i]|=succ(i);<br>    tot=succ(n)<span class="hljs-number">-1</span>;<br>    inc(i,<span class="hljs-number">1</span>,tot)d[i]=Max(d[i^lowbit(i)],d[i&amp;(~a[__builtin_ctz(i)])]+<span class="hljs-number">1</span>),ans+=d[i];<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>now885C(BSGS+分块)</title>
      <link href="/now885C/"/>
      <url>/now885C/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://ac.nowcoder.com/acm/contest/885/C?&amp;headNav=acm" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/contest/885/C?&amp;headNav=acm</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定 $n,x<em>0,a,b,p$ ，$p$ 为质数，生成长度为 $n$ 的序列 $x_i=(ax</em>{i-1}+b)\bmod p$ ，再给定 $m$ 次询问，问 $v$ 是否在数列中，并求出最早出现的下标</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>这个序列可以求通项公式，有</p><script type="math/tex; mode=display">\begin{eqnarray*}x_n&\equiv&v&\pmod{p}\\a^nx_0+\sum_{i=1}^{n-1}a^ib &\equiv&v&\pmod{p}\\a^nx_0+b\frac{1-a^n}{1-a} &\equiv&v&\pmod{p}\\a^nx_0+b\frac{1-a^n}{1-a} &\equiv&v&\pmod{p}\\(x_0+\frac{b}{a-1} )a^n&\equiv &v+\frac{b}{a-1}&\pmod p\\a^n&\equiv &\frac{v+\frac{b}{a-1}}{x_0+\frac{b}{a-1} } &\pmod p\end{eqnarray*}</script><p>上面涉及到除法。。所以需要特判分母为 $0$ 的地方，比较操蛋。。</p><p>然后这样就可以用 $BSGS$ 了，直接用显然是会 $T$ 的，然而底数是一样的，那么预处理可以一遍完成，考虑预处理规模 $x$ ，那么预处理复杂度为 $O(x)$ ，查询复杂度为 $O(q\frac{p}{x})$ ，那么取个均值复杂度就可以降到 $O(\sqrt{qp})$</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 1005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 2005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br> <br> <br> <br>ll _n,_x,_a,_b,inf,cnt;<br><span class="hljs-keyword">int</span> m,n,ans[NM];<br><span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt;v;<br> <br><span class="hljs-function">ll <span class="hljs-title">qpow</span><span class="hljs-params">(ll x,ll t)</span></span>&#123;<br>    ll s=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(;t;t&gt;&gt;=<span class="hljs-number">1</span>,x=x*x%inf)<span class="hljs-keyword">if</span>(t&amp;<span class="hljs-number">1</span>)s=s*x%inf;<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br> <br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> _=read();<span class="hljs-keyword">while</span>(_--)&#123;<br>_n=read();_x=read();_a=read();_b=read();inf=read();<br>_n=min(_n,inf);<br>m=read();n=<span class="hljs-built_in">sqrt</span>(m*inf&gt;&gt;<span class="hljs-number">1</span>);<br><span class="hljs-keyword">if</span>(_a==<span class="hljs-number">1</span>)&#123;<br>    <span class="hljs-keyword">if</span>(_b&gt;<span class="hljs-number">0</span>)&#123;<br><span class="hljs-keyword">while</span>(m--)&#123;<br>    ll t=(read()-_x+inf)%inf*qpow(_b,inf<span class="hljs-number">-2</span>)%inf;<br>    <span class="hljs-keyword">if</span>(t&lt;_n)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,t);<span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">"-1\n"</span>);<br>&#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">while</span>(m--)<span class="hljs-keyword">if</span>(read()==_x)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"0\n"</span>);<span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">"-1\n"</span>);<br>    &#125;<br>    <span class="hljs-keyword">continue</span>;<br>&#125;<br>_b=_b*qpow(_a<span class="hljs-number">-1</span>,inf<span class="hljs-number">-2</span>)%inf;<br>_x+=_b;_x%=inf;_x=qpow(_x,inf<span class="hljs-number">-2</span>);<br><span class="hljs-keyword">if</span>(_x==<span class="hljs-number">0</span>)&#123;<br>    _b=(inf-_b)%inf;<br>    <span class="hljs-keyword">while</span>(m--)<span class="hljs-keyword">if</span>(read()==_b)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"0\n"</span>);<span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">"-1\n"</span>);<br>    <span class="hljs-keyword">continue</span>;<br>&#125;<br>v.clear();<br>cnt=<span class="hljs-number">1</span>;v[cnt]=<span class="hljs-number">0</span>;<br>inc(i,<span class="hljs-number">1</span>,n)&#123;<br>    cnt=cnt*_a%inf;<br>    <span class="hljs-keyword">if</span>(!v.count(cnt))v[cnt]=i;<span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<br>&#125;<br>cnt=qpow(cnt,inf<span class="hljs-number">-2</span>);<br>inc(i,<span class="hljs-number">1</span>,m)&#123;<br>ans[i]=_n;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>,t=(_b+read())*_x%inf;j*n&lt;inf;j++,t=<span class="hljs-number">1l</span>l*t*cnt%inf)<br>    <span class="hljs-keyword">if</span>(v.count(t))ans[i]=min(ans[i],j*n+v[t]);<br>&#125;<br>inc(i,<span class="hljs-number">1</span>,m)<span class="hljs-keyword">if</span>(ans[i]&gt;=_n)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"-1\n"</span>);<span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,ans[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> BSGS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hdu6619(贪心+斜率优化)</title>
      <link href="/hdu6619/"/>
      <url>/hdu6619/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6619" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=6619</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>有 $n$ 棵树，高度分别为 $h_i$ ，需要依次跳过这 $n$ 棵树，每次跳跃体力值减 $h_i$ (体力值可以为负)，每次跳跃之后的体力值做为分数累计</p><p>每次跳跃之前，可以选择吃掉这棵树，最多吃 $M$ 次，此时树的高度为零</p><p>每次跳跃后，可以选择休息，最多休息 $K$ 次，体力值恢复成之前吃掉的树的高度和</p><p>求最大的分数</p><p>$n\le10^4,M\le50,K\le50$</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>前面的结论感觉就十分的卡人。。</p><p>首先吃和休息这两个操作是独立的。。对一个吃来说，如果后面没有休息，那么他产生的贡献显然是 $h_i(n-i+1)$ ，如果有休息，本来恢复成 $0$ 的体力值恢复成了 $h_i$ ，即后面的点不管有没有经过休息，其体力值都比原来多了 $h_i$ ，所以吃的贡献永远都是 $h_i(n-i+1)$ ，所以对吃直接选最大的贡献吃了就可以了。。</p><p>然后问题就简单很多了。。对休息，我们设 $d[i][j]$ 为到 $i$ 休息了 $j$ 次的最大分数，列完方程直接斜率优化即可。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 100005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 2005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">1e18</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><span class="hljs-keyword">int</span> n,m,p,q[NM],qh,qt;<br>ll d[NM],g[NM],ans,a[NM],b[NM];<br><br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">slope</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-number">1.0</span>*(g[x]-b[x]-g[y]+b[y])/(a[x]-a[y]);&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> _=read();<span class="hljs-keyword">while</span>(_--)&#123;<br>n=read();m=read()+<span class="hljs-number">1</span>;p=read();<br>inc(i,<span class="hljs-number">1</span>,n)a[i]=read(),b[i]=a[i]*(n-i+<span class="hljs-number">1</span>);<br>sort(b+<span class="hljs-number">1</span>,b+<span class="hljs-number">1</span>+n,greater&lt;ll&gt;());<br>ans=<span class="hljs-number">0</span>;<br>inc(i,<span class="hljs-number">1</span>,p)ans+=b[i];<br>inc(i,<span class="hljs-number">1</span>,n)b[i]=i*a[i]+b[i<span class="hljs-number">-1</span>],a[i]+=a[i<span class="hljs-number">-1</span>];<br>inc(i,<span class="hljs-number">1</span>,n)d[i]=-inf;<br>inc(j,<span class="hljs-number">1</span>,m)&#123;<br>    inc(i,<span class="hljs-number">1</span>,n)g[i]=d[i];g[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br>    q[qh=qt=<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br>    inc(i,<span class="hljs-number">1</span>,n)&#123;<br><span class="hljs-keyword">while</span>(qh&lt;qt&amp;&amp;slope(q[qh],q[qh+<span class="hljs-number">1</span>])&gt;-i<span class="hljs-number">-1</span>)qh++;<br>d[i]=g[q[qh]]-(i+<span class="hljs-number">1</span>)*(a[i]-a[q[qh]])+b[i]-b[q[qh]];<br><span class="hljs-keyword">while</span>(qh&lt;qt&amp;&amp;slope(q[qt<span class="hljs-number">-1</span>],q[qt])&lt;slope(q[qt],i))qt--;<br>q[++qt]=i;<br>    &#125;<br>&#125;<br>ans+=d[n];<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hdu6613(树DP)</title>
      <link href="/hdu6613/"/>
      <url>/hdu6613/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6613" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=6613</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定 $n$ 个点的树，可以将某一条边的边权变成 $0$ ，然后选定起点，使得该点到其他点的距离的最大值最小</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>这个一上来就二分答案然后讨论到死。。</p><p>其实直接树DP上搞搞下搞搞就完事了。。维护每个点有没有断边的最大值。。然后转移的时候要多维护几个变量，比较烦。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 200005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 400005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span>&#123;</span><span class="hljs-keyword">int</span> t,v;edge*next;&#125;e[nm],*h[NM],*o=e;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y,<span class="hljs-keyword">int</span> v)</span></span>&#123;o-&gt;t=y;o-&gt;v=v;o-&gt;next=h[x];h[x]=o++;&#125;<br><span class="hljs-keyword">int</span> n,m,_x,_y,<span class="hljs-keyword">_t</span>,d[NM][<span class="hljs-number">2</span>],p[NM][<span class="hljs-number">2</span>],ans;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> f)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> s1=<span class="hljs-number">0</span>,s2=<span class="hljs-number">0</span>,t1=<span class="hljs-number">0</span>,t2=<span class="hljs-number">0</span>;<br>    link(x)<span class="hljs-keyword">if</span>(j-&gt;t!=f)&#123;<br>dfs1(j-&gt;t,x);<br><span class="hljs-keyword">if</span>(d[j-&gt;t][<span class="hljs-number">0</span>]+j-&gt;v&gt;s1)s2=s1,t2=t1,s1=d[j-&gt;t][<span class="hljs-number">0</span>]+j-&gt;v,t1=min(d[j-&gt;t][<span class="hljs-number">1</span>]+j-&gt;v,d[j-&gt;t][<span class="hljs-number">0</span>]);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(d[j-&gt;t][<span class="hljs-number">0</span>]+j-&gt;v&gt;s2)s2=d[j-&gt;t][<span class="hljs-number">0</span>]+j-&gt;v,t2=max(d[j-&gt;t][<span class="hljs-number">1</span>]+j-&gt;v,d[j-&gt;t][<span class="hljs-number">0</span>]);<br>    &#125;<br>    d[x][<span class="hljs-number">0</span>]=s1;d[x][<span class="hljs-number">1</span>]=max(t1,s2);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> f)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> s1=<span class="hljs-number">0</span>,s2=<span class="hljs-number">0</span>,s3=<span class="hljs-number">0</span>,t1=<span class="hljs-number">0</span>,t2=<span class="hljs-number">0</span>,t3=<span class="hljs-number">0</span>,i1=<span class="hljs-number">0</span>,i2=<span class="hljs-number">0</span>,i3=<span class="hljs-number">0</span>;<br>    link(x)<span class="hljs-keyword">if</span>(j-&gt;t!=f)&#123;<br><span class="hljs-keyword">if</span>(d[j-&gt;t][<span class="hljs-number">0</span>]+j-&gt;v&gt;s1)s3=s2,t3=t2,i3=i2,s2=s1,t2=t1,i2=i1,s1=d[j-&gt;t][<span class="hljs-number">0</span>]+j-&gt;v,t1=min(d[j-&gt;t][<span class="hljs-number">1</span>]+j-&gt;v,d[j-&gt;t][<span class="hljs-number">0</span>]),i1=j-&gt;t;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(d[j-&gt;t][<span class="hljs-number">0</span>]+j-&gt;v&gt;s2)s3=s2,t3=t2,i3=i2,s2=d[j-&gt;t][<span class="hljs-number">0</span>]+j-&gt;v,t2=min(d[j-&gt;t][<span class="hljs-number">1</span>]+j-&gt;v,d[j-&gt;t][<span class="hljs-number">0</span>]),i2=j-&gt;t;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(d[j-&gt;t][<span class="hljs-number">0</span>]+j-&gt;v&gt;s3)s3=d[j-&gt;t][<span class="hljs-number">0</span>]+j-&gt;v,t3=min(d[j-&gt;t][<span class="hljs-number">1</span>]+j-&gt;v,d[j-&gt;t][<span class="hljs-number">0</span>]),i3=j-&gt;t;<br>    &#125;<br>    link(x)<span class="hljs-keyword">if</span>(j-&gt;t!=f)&#123;<br><span class="hljs-keyword">if</span>(j-&gt;t==i1)&#123;<br>    p[j-&gt;t][<span class="hljs-number">0</span>]=max(s2,p[x][<span class="hljs-number">0</span>])+j-&gt;v;<br>    p[j-&gt;t][<span class="hljs-number">1</span>]=min(min(max(p[x][<span class="hljs-number">0</span>],max(t2,s3)),max(p[x][<span class="hljs-number">1</span>],s2))+j-&gt;v,max(s2,p[x][<span class="hljs-number">0</span>]));<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(j-&gt;t==i2)&#123;<br>    p[j-&gt;t][<span class="hljs-number">0</span>]=max(s1,p[x][<span class="hljs-number">0</span>])+j-&gt;v;<br>    p[j-&gt;t][<span class="hljs-number">1</span>]=min(min(max(p[x][<span class="hljs-number">0</span>],max(t1,s3)),max(p[x][<span class="hljs-number">1</span>],s1))+j-&gt;v,max(s1,p[x][<span class="hljs-number">0</span>]));<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    p[j-&gt;t][<span class="hljs-number">0</span>]=max(s1,p[x][<span class="hljs-number">0</span>])+j-&gt;v;<br>    p[j-&gt;t][<span class="hljs-number">1</span>]=min(min(max(p[x][<span class="hljs-number">0</span>],max(t1,s2)),max(p[x][<span class="hljs-number">1</span>],s1))+j-&gt;v,max(s1,p[x][<span class="hljs-number">0</span>]));<br>&#125;<br>dfs2(j-&gt;t,x);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> _=read();<span class="hljs-keyword">while</span>(_--)&#123;<br>n=read();<br>inc(i,<span class="hljs-number">1</span>,n)h[i]=<span class="hljs-number">0</span>;o=e;<br>inc(i,<span class="hljs-number">2</span>,n)&#123;_x=read();_y=read();<span class="hljs-keyword">_t</span>=read();add(_x,_y,<span class="hljs-keyword">_t</span>);add(_y,_x,<span class="hljs-keyword">_t</span>);&#125;<br>inc(i,<span class="hljs-number">1</span>,n)inc(j,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)d[i][j]=p[i][j]=<span class="hljs-number">0</span>;<br>dfs1(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);dfs2(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);ans=inf;<br>inc(i,<span class="hljs-number">1</span>,n)inc(j,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)ans=min(ans,max(d[i][j],p[i][j^<span class="hljs-number">1</span>]));<br>inc(i,<span class="hljs-number">1</span>,n)<span class="hljs-keyword">if</span>(ans==max(d[i][<span class="hljs-number">0</span>],p[i][<span class="hljs-number">1</span>])||ans==max(d[i][<span class="hljs-number">1</span>],p[i][<span class="hljs-number">0</span>]))&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d "</span>,i);<span class="hljs-keyword">break</span>;&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,ans);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hdu6606(二分答案+DP+线段树)</title>
      <link href="/hdu6606/"/>
      <url>/hdu6606/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6606" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=6606</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定 $n$ 个数，选定一个前缀，将前缀分成 $k$ 段，最小化每段的和的最大值</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>显然先二分答案，然后一段一段地往上加就可以，那么可以想到设 $d[i][j]$ 为到 $i$ 位置分了 $j$ 段</p><p>然而发现这个 $dp$ 值只有 $true/false$ ，所以可以压缩状态，设 $d[i]$ 为到 $i$ 位置能够分的最大段数。。</p><p>然后转移的时候需要在权值上满足二分答案的条件，所以用一个权值线段树去转移就可以了。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 200005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 400005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">2e14</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><span class="hljs-keyword">int</span> n,m,tmp[NM],<span class="hljs-keyword">_t</span>,c[NM];<br>ll a[NM],ans,_x;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<span class="hljs-keyword">return</span> a[x]&lt;a[y];&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span>&#123;</span><br>    <span class="hljs-keyword">int</span> x,y;<br>    node*l,*r;<br>    <span class="hljs-keyword">int</span> s;<br>    node(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y,node*l=<span class="hljs-number">0</span>,node*r=<span class="hljs-number">0</span>):x(x),y(y),l(l),r(r)&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">upd</span><span class="hljs-params">()</span></span>&#123;s=max(l-&gt;s,r-&gt;s);&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">mod</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">if</span>(x==y)&#123;s=<span class="hljs-keyword">_t</span>;<span class="hljs-keyword">return</span>;&#125;<br><span class="hljs-keyword">if</span>(_x&lt;=mid)l-&gt;mod();<span class="hljs-keyword">else</span> r-&gt;mod();upd();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">query</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">if</span>(a[x]&gt;=_x)<span class="hljs-keyword">return</span> s;<br><span class="hljs-keyword">if</span>(a[mid]&gt;=_x) <span class="hljs-keyword">return</span> max(l-&gt;query(),r-&gt;s);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> r-&gt;query();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123;<br>s=-n;<span class="hljs-keyword">if</span>(x==y)<span class="hljs-keyword">return</span>;<br>l-&gt;init();r-&gt;init();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">res</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">if</span>(x==y)<span class="hljs-keyword">return</span>;<br>l-&gt;res();r-&gt;res();<br><span class="hljs-built_in">free</span>(l);<span class="hljs-built_in">free</span>(r);<br>    &#125;<br>&#125;*root;<br><span class="hljs-function">node*<span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<span class="hljs-keyword">return</span> x==y?<span class="hljs-keyword">new</span> node(x,y):<span class="hljs-keyword">new</span> node(x,y,build(x,mid),build(mid+<span class="hljs-number">1</span>,y));&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(ll t)</span></span>&#123;<br>    root-&gt;init();<br>    <span class="hljs-keyword">_t</span>=<span class="hljs-number">0</span>;_x=c[<span class="hljs-number">0</span>];root-&gt;mod();<br>    inc(i,<span class="hljs-number">1</span>,n)&#123;<br>_x=a[c[i]]-t;<br><span class="hljs-keyword">if</span>(_x&gt;a[n])<span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">_t</span>=root-&gt;query()+<span class="hljs-number">1</span>;<br>_x=c[i];<br>root-&gt;mod();<br>    &#125;<br>    <span class="hljs-keyword">return</span> root-&gt;s&gt;=m;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> _=read();<span class="hljs-keyword">while</span>(_--)&#123;<br>n=read();m=read();a[<span class="hljs-number">0</span>]=tmp[<span class="hljs-number">0</span>]=c[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br>inc(i,<span class="hljs-number">1</span>,n)a[i]=a[i<span class="hljs-number">-1</span>]+read(),tmp[i]=i;<br>sort(tmp,tmp+<span class="hljs-number">1</span>+n,cmp);<br>sort(a,a+<span class="hljs-number">1</span>+n);<br>inc(i,<span class="hljs-number">0</span>,n)c[tmp[i]]=i;<br>root=build(<span class="hljs-number">0</span>,n);<br><span class="hljs-keyword">for</span>(ll x=-inf,y=inf;x&lt;=y;)<br>    <span class="hljs-keyword">if</span>(check(mid))ans=mid,y=mid<span class="hljs-number">-1</span>;<span class="hljs-keyword">else</span> x=mid+<span class="hljs-number">1</span>;<br>root-&gt;res();<span class="hljs-built_in">free</span>(root);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> DP </tag>
            
            <tag> 二分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hdu4336(min-max容斥)</title>
      <link href="/hdu4336/"/>
      <url>/hdu4336/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=4336" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=4336</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>有 $n$ 种卡牌，每次抽中的概率为 $p_i$ ，每次最多抽中一张卡牌，问收集完所有卡牌的期望次数</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>这个题除了概率 $DP$ 以外还有另外一种做法，min-max 容斥</p><p>这个容斥的基本形式如下：</p><script type="math/tex; mode=display">\max\{S\}=\sum_{T\subset S}(-1)^{|T|+1}\min\{T\}\\\min\{S\}=\sum_{T\subset S}(-1)^{|T|+1}\max\{T\}</script><p>这个的证明其实非常简单，以第一个式子为例，除了等于 $max$ 部分只有一项之外，其他的都有两项是两两相消的。。</p><p>然后我们需要求的是 $max{S}$ ，可以转化为 $min{T}$ 来求，而显然</p><script type="math/tex; mode=display">\min \{T\}=\frac{1}{\sum_{i\in T}P_i}</script><p>直接枚举子集求解即可。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 1100005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 400005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">998244353</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><span class="hljs-keyword">int</span> n,tot;<br><span class="hljs-keyword">double</span> ans,a[NM];<br><br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;n))&#123;<br>inc(i,<span class="hljs-number">1</span>,n)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%lf"</span>,a+i);<br>tot=succ(n)<span class="hljs-number">-1</span>;<br>ans=<span class="hljs-number">0</span>;<br>inc(i,<span class="hljs-number">1</span>,tot)&#123;<br>    <span class="hljs-keyword">int</span> cnt=<span class="hljs-number">0</span>;<span class="hljs-keyword">double</span> t=<span class="hljs-number">0</span>;<br>    inc(j,<span class="hljs-number">1</span>,n)<span class="hljs-keyword">if</span>(succ(j<span class="hljs-number">-1</span>)&amp;i)t+=a[j],cnt++;<br>    t=<span class="hljs-number">1</span>/t;<span class="hljs-keyword">if</span>(cnt&amp;<span class="hljs-number">1</span>)ans+=t;<span class="hljs-keyword">else</span> ans-=t;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lf\n"</span>,ans);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 组合数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cf622C(FWT)</title>
      <link href="/cf622C/"/>
      <url>/cf622C/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://codeforces.com/problemset/problem/662/C" target="_blank" rel="noopener">https://codeforces.com/problemset/problem/662/C</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定 $n\times m$ 的 $01$ 矩阵，每次可以对行或列进行 $01$ 反转，问最少能使矩阵有多少个 $1$</p><p>$n\le 20，m\le 10^5$</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>把每列当做一个数$a_i$  的话，给每行反转相当于对每个数在该位上做一个异或，所以可以得知要求的是</p><script type="math/tex; mode=display">\min\limits_{x=1}^{2^n-1}\sum_{i=1}^m\min\{|a_i\oplus x|,n-|a_i\oplus x|\}</script><p>把后面的 $min$ 看作一个序列，然后得到</p><script type="math/tex; mode=display">\min\limits_{x=1}^{2^n-1}\sum_{i=1}^mf(a_i\oplus x)=\min\limits_{x=1}^{2^n-1}\sum_{i\oplus a=x}f(i)count(a)</script><p>直接 $FWT$ 之后取最值即可。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 1100005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 400005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">998244353</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><span class="hljs-keyword">int</span> n,m,tot;<br>ll a[NM],b[NM],c[NM],ans;<br><span class="hljs-keyword">char</span> _s[NM];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fwt</span><span class="hljs-params">(ll*a,<span class="hljs-keyword">int</span> f=<span class="hljs-number">0</span>)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">1</span>;k&lt;n;k&lt;&lt;=<span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i+=k&lt;&lt;<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;k;j++)&#123;<br>ll x=a[i+j],y=a[i+j+k];<br>a[i+j]=x+y;<br>a[i+j+k]=x-y;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(f)inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)a[i]/=n;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();m=read();<br>    inc(i,<span class="hljs-number">1</span>,n)&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>,_s+<span class="hljs-number">1</span>);<br>inc(j,<span class="hljs-number">1</span>,m)<span class="hljs-keyword">if</span>(_s[j]-<span class="hljs-string">'0'</span>)a[j]|=succ(i<span class="hljs-number">-1</span>);<br>    &#125;<br>    inc(i,<span class="hljs-number">1</span>,m)c[a[i]]++;<br>    tot=succ(n);<br>    inc(i,<span class="hljs-number">0</span>,tot<span class="hljs-number">-1</span>)b[i]=__builtin_popcount(i),b[i]=min(b[i],n-b[i]);<br>    n=tot;<br>    fwt(c);fwt(b);<br>    inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)b[i]=b[i]*c[i];<br>    fwt(b,<span class="hljs-number">1</span>);<br>    ans=inf;<br>    inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)ans=min(ans,b[i]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> FFT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cf453D(FWT+快速乘)</title>
      <link href="/cf453D/"/>
      <url>/cf453D/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://codeforces.com/contest/453/problem/D" target="_blank" rel="noopener">https://codeforces.com/contest/453/problem/D</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定 $b$ 、$t$ 和长度为 $2^m$ 的数组 $e<em>0$ ，已知 $e_i[u]=\sum</em>{v}e_{i-1}b[|u\oplus v|]$ ，求 $e_t$</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>直接把 $b$ 扩展成 $2^m$ 的数组，然后就是 $e_0$ 和 $b^n$ 做卷积。。</p><p>然后模数不是质数，做 $IFWT$ 的时候不能直接除以 $2^m$ ，所以要将模数乘上 $2^m$ ，然后发现会爆 longlong ，需要快速乘。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 1100005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 400005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><span class="hljs-keyword">int</span> n,m;<br>ll <span class="hljs-keyword">_t</span>,inf;<br>ll a[NM],b[NM],c[NM];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">plu</span><span class="hljs-params">(<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> x,<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> y)</span></span>&#123;<br>    ll tmp=(x*y-(ll)((<span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span>)x/inf*y+<span class="hljs-number">1.0e-8</span>)*inf);<br>    <span class="hljs-keyword">return</span> tmp&lt;<span class="hljs-number">0</span> ? tmp+inf : tmp;<br>&#125;<br><br><span class="hljs-function">ll <span class="hljs-title">qpow</span><span class="hljs-params">(ll x,ll t)</span></span>&#123;<br>    ll s=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(;t;t&gt;&gt;=<span class="hljs-number">1</span>,x=plu(x,x))<span class="hljs-keyword">if</span>(t&amp;<span class="hljs-number">1</span>)s=plu(s,x);<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fwt</span><span class="hljs-params">(ll*a)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">1</span>;k&lt;n;k&lt;&lt;=<span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i+=k&lt;&lt;<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;k;j++)&#123;<br>ll x=a[i+j],y=a[i+j+k];<br>a[i+j]=(x+y)%inf;<br>a[i+j+k]=(x-y+inf)%inf;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    m=read();n=succ(m);<span class="hljs-keyword">_t</span>=read();inf=read()*n;<br>    inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)a[i]=read()%inf;<br>    inc(i,<span class="hljs-number">0</span>,m)b[i]=read()%inf;<br>    inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)c[i]=b[__builtin_popcount(i)];<br>    fwt(c);fwt(a);<br>    inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)a[i]=plu(a[i],qpow(c[i],<span class="hljs-keyword">_t</span>));<br>    fwt(a);<br>    inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,a[i]/n);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> FFT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fwt</title>
      <link href="/fwt/"/>
      <url>/fwt/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="http://blog.leanote.com/post/rockdu/TX20" target="_blank" rel="noopener">http://blog.leanote.com/post/rockdu/TX20</a></p><p><a href="http://vfleaking.blog.uoj.ac/blog/87" target="_blank" rel="noopener">http://vfleaking.blog.uoj.ac/blog/87</a></p><p><a href="http://blog.miskcoo.com/2015/12/inversion-magic-binomial-inversion" target="_blank" rel="noopener">http://blog.miskcoo.com/2015/12/inversion-magic-binomial-inversion</a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>之前只学习了 $FWT$ 和 $FMT$ 的模板，对其原理一点都不理解。</p><p>有时，一些题目中会涉及到对这些变换的理解和变形，这要求窝必须彻底理解这些变换的原理。</p><p>很多博客对这些变换的证明和理解只字不提，经过一番寻找终于找到了一些适合的文章(如上)，经过学习也感受到了这些变换的奇妙之处，这里也来复现他们的证明过程，加深理解。</p><h3 id="反演和变换"><a href="#反演和变换" class="headerlink" title="反演和变换"></a>反演和变换</h3><p>变换是对数列做一个线性变换，主要形式如下</p><script type="math/tex; mode=display">g(n)=\sum_ka_{n,k}f(k)</script><p>反演主要满足以下形式</p><script type="math/tex; mode=display">g(n)=\sum_k a_{n,k}f(k)\leftrightarrow f(n)=\sum_k b_{n,k}g(k)</script><p>由上可见，反演实质上就是一个线性逆变换，那么在做反演和变换时，我们可以将数列看作列向量，即</p><script type="math/tex; mode=display">G=AF\leftrightarrow F=BG</script><p>定义 $Kronecker’s\,delta$ 函数 $\delta(i,j)=[i=j]$ ，显然</p><script type="math/tex; mode=display">\delta(i,j)=\sum_k a_{i,k}b_{k,j}</script><p>即</p><script type="math/tex; mode=display">E=AB</script><p>所以 $Kronecker’s\,delta$ 函数表示成矩阵形式就是单位矩阵</p><p>那么，对一个变换，寻求其反演公式，本质就是在求逆矩阵</p><h3 id="子集变换和子集反演"><a href="#子集变换和子集反演" class="headerlink" title="子集变换和子集反演"></a>子集变换和子集反演</h3><p>子集变换定义如下：</p><script type="math/tex; mode=display">G(S)=\sum_{T\subset S}F(T)</script><p>为求其反演公式，我们需要找到其逆矩阵，而我们有</p><script type="math/tex; mode=display">\sum_{T\subset S}(-1)^{|T|}=[|S|=0]</script><p>那么，得到逆变换之后直接开始推导吧</p><script type="math/tex; mode=display">\begin{aligned}F(S)=&\sum_{R\subset S}[|S|=|R|]F(R)\\=&\sum_{R\subset S}\sum_{T\subset S-R}(-1)^{|T|}F(R)\\=&\sum_{T\subset S}(-1)^{|T|}\sum_{R\subset S-T}F(R)\\=&\sum_{T\subset S}(-1)^{|T|}G(S-T)\\=&\sum_{T\subset S}(-1)^{|S|-|T|}G(T)\end{aligned}</script><p>所以可以得到子集反演公式</p><script type="math/tex; mode=display">G(S)=\sum_{T\subset S}F(T)\leftrightarrow F(S)=\sum_{T\subset S}(-1)^{|S|-|T|}G(T)</script><p>这个公式也就是我们所熟知的容斥原理</p><h3 id="快速莫比乌斯变换-FMT"><a href="#快速莫比乌斯变换-FMT" class="headerlink" title="快速莫比乌斯变换(FMT)"></a>快速莫比乌斯变换(FMT)</h3><p>快速莫比乌斯变换算是子集变换，他主要解决并集卷积和交集卷积的加速</p><script type="math/tex; mode=display">c_i=\sum_{j|k=i}a_kb_j\\c_i=\sum_{j\& k=i}a_kb_j</script><p>先以比较简单的并集为例，我们的目的是使这个式子和 $FFT$ 一样能够经过变换之后直接做乘法，即</p><script type="math/tex; mode=display">FMT(C)=FMT(A)*FMT(B)</script><p>这个东西其实比较容易构造，事实上</p><script type="math/tex; mode=display">FMT(A)=\sum_{i\subset S}a_i</script><p>而</p><script type="math/tex; mode=display">\begin{aligned}FMT(C)=&\sum_{i\subset x}c_i\\=&\sum_{i\subset C}\sum_{j|k=i}a_jb_k\\=&\sum_{j\subset x}a_j\sum_{j\subset x}b_k\\=&FMT(A)*FMT(b)\end{aligned}</script>]]></content>
      
      
      
        <tags>
            
            <tag> unfinished </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>now881D(FWT+容斥)</title>
      <link href="/now881D/"/>
      <url>/now881D/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://ac.nowcoder.com/acm/contest/881/D" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/contest/881/D</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定 $n$ 个 $m$ 元组$a<em>{i,1},a</em>{i,2}..a<em>{i,m}$，设 $count(x)$ 为满足元组内所有元素 $x$ 做与操作之后有奇数个 $1$ 的元组的个数，求 $\oplus</em>{x=0}^{2^k-1}(count(x)3^x\bmod{10^9+7})$</p><p>$n\le10^5,m\le10,k\le20$</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>主要是 $count$ 这个东西不太好搞。。比较绕。。</p><p>由奇偶性容易想到异或运算，在 $FWT$ 的证明中用到 $(-1)^{|i\&amp; x|}$ 来表示奇偶性，同样我们可以用这个来构造</p><script type="math/tex; mode=display">\begin{aligned}count(x)=&\sum_{i=1}^n\prod_{j=1}^m(1-(-1)^{|a_{i,j}\&x|})\\=&\sum_{i=1}^n\frac{1}{2^m} \sum_{S}(-1)^{|\oplus a\& x|}(-1)^{|S|}\\=&\frac{1}{2^m}\sum_{S}(-1)^{|\oplus a\& x|}(-1)^{|S|}\end{aligned}</script><p>发现这个和式是 $FWT$ 的定义式，直接 $FWT$ 即可。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 1100005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 400005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reduce</span><span class="hljs-params">(ll&amp;x)</span></span>&#123;x+=x&gt;&gt;<span class="hljs-number">63</span>&amp;inf;&#125;<br><span class="hljs-keyword">int</span> n,a[NM],b[NM],ctz[NM],popcount[NM],m,tot,p;<br>ll c[NM],ans,pw[NM];<br><br><span class="hljs-function">ll <span class="hljs-title">qpow</span><span class="hljs-params">(ll x,ll t)</span></span>&#123;<br>    ll s=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(;t;t&gt;&gt;=<span class="hljs-number">1</span>,x=x*x%inf)<span class="hljs-keyword">if</span>(t&amp;<span class="hljs-number">1</span>)s=s*x%inf;<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fwt</span><span class="hljs-params">(ll*a)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">1</span>;k&lt;n;k&lt;&lt;=<span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i+=k&lt;&lt;<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;k;j++)&#123;<br>ll x=a[i+j],y=a[i+j+k];<br>reduce(a[i+j]=x+y-inf);<br>reduce(a[i+j+k]=x-y);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    inc(i,<span class="hljs-number">0</span>,<span class="hljs-number">1023</span>)ctz[i]=<span class="hljs-number">1</span>+__builtin_ctz(i),popcount[i]=__builtin_popcount(i);<br>    pw[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;inc(i,<span class="hljs-number">1</span>,<span class="hljs-number">1048576</span>)pw[i]=<span class="hljs-number">3</span>*pw[i<span class="hljs-number">-1</span>]%inf;<br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;p))&#123;<br>tot=succ(p)<span class="hljs-number">-1</span>;<br>inc(i,<span class="hljs-number">0</span>,tot)c[i]=<span class="hljs-number">0</span>;<br>tot=succ(m)<span class="hljs-number">-1</span>;<br>c[<span class="hljs-number">0</span>]=n;<br>inc(i,<span class="hljs-number">1</span>,n)&#123;<br>    inc(j,<span class="hljs-number">1</span>,m)a[j]=read();<br>    inc(j,<span class="hljs-number">1</span>,tot)&#123;<br>b[j]=b[j^lowbit(j)]^a[ctz[j]];<br><span class="hljs-keyword">if</span>(popcount[j]&amp;<span class="hljs-number">1</span>)c[b[j]]--;<span class="hljs-keyword">else</span> c[b[j]]++;<br>    &#125;<br>&#125;<br>n=succ(p);ans=<span class="hljs-number">0</span>;<br><span class="hljs-comment">//inc(i,0,n-1)printf("%lld ",c[i]);putchar('\n');</span><br>inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)reduce(c[i]%=inf);<br>fwt(c);<br>m=qpow(inf+<span class="hljs-number">1</span>&gt;&gt;<span class="hljs-number">1</span>,m);<br>inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)ans^=pw[i]*c[i]%inf*m%inf;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> FFT </tag>
            
            <tag> 组合数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>now884E(子集反演/容斥)</title>
      <link href="/now884E/"/>
      <url>/now884E/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://ac.nowcoder.com/acm/contest/884/E" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/contest/884/E</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定 $n$ 和 $a$ ，求长度为 $n$ 由三的倍数构成的序列，使得其或和为 $a$</p><p>$n\le 10^{18},a\le 10^{18}$</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>首先不考虑数据范围的话很容易想到做 $FMT$ 后直接 $n$ 次方，然后再做一次 $IFMT$ 就可以了。。</p><p>然而数据范围太大，但是大体思路没错，需要细化细节来加速计算</p><p>首先是 </p><script type="math/tex; mode=display">g(S)=\sum_{i\subset S} [3|i]</script><p>为了保证 $i\subset S$ ， $i$ 的位只能在 $S$ 的位上选取，考虑每个位的情况，他余 $3$ 只能是 $1$ 或 $2$ ，那么只要统计出这些位的个数，然后做个小模背包 $DP$ 就完事了。。</p><p>然后设答案为 $F(S)$ ，那么</p><script type="math/tex; mode=display">F(S)=\sum_{T\subset S}(-1)^{|S|-|T|}G^n(T)</script><p>然而这个也需要 $O(a)$ 。。</p><p>考虑到 $G(T)$ 的计算由位的个数决定，那么枚举这些位，有</p><script type="math/tex; mode=display">F(S)=\sum_{i=1} ^{n_1}\sum_{j=1} ^{n_2}\binom{n_1}i\binom{n_2}{j} G^n(i,j)</script><p>然后就可以做到 $O(log^2a(logn+loga))$</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) ((1ll)&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 100005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 400005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">998244353</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><span class="hljs-function">ll <span class="hljs-title">qpow</span><span class="hljs-params">(ll x,ll t)</span></span>&#123;<br>    ll s=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(;t;t&gt;&gt;=<span class="hljs-number">1</span>,x=x*x%inf)<span class="hljs-keyword">if</span>(t&amp;<span class="hljs-number">1</span>)s=s*x%inf;<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br><br>ll n,m,ans,d[<span class="hljs-number">6</span>],inv[NM],p[NM],invp[NM];<br><span class="hljs-keyword">int</span> v[<span class="hljs-number">5</span>],_x,_y;<br><br><span class="hljs-function">ll <span class="hljs-title">binom</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n,<span class="hljs-keyword">int</span> m)</span></span>&#123;<span class="hljs-keyword">return</span> p[n]*invp[m]%inf*invp[n-m]%inf;&#125;<br><br><span class="hljs-function">ll <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<br>    ll s=<span class="hljs-number">0</span>;<br>    mem(d);<br>    d[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    inc(k,<span class="hljs-number">1</span>,x)&#123;<br>dec(j,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>)d[j]+=d[j<span class="hljs-number">-1</span>],d[j]%=inf;<br>d[<span class="hljs-number">0</span>]+=d[<span class="hljs-number">3</span>];d[<span class="hljs-number">3</span>]=<span class="hljs-number">0</span>;d[<span class="hljs-number">0</span>]%=inf;<br>    &#125;<br>    inc(k,<span class="hljs-number">1</span>,y)&#123;<br>dec(j,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>)d[j]+=d[j<span class="hljs-number">-2</span>],d[j]%=inf;<br>d[<span class="hljs-number">0</span>]+=d[<span class="hljs-number">3</span>];d[<span class="hljs-number">3</span>]=<span class="hljs-number">0</span>;d[<span class="hljs-number">0</span>]%=inf;<br>d[<span class="hljs-number">1</span>]+=d[<span class="hljs-number">4</span>];d[<span class="hljs-number">4</span>]=<span class="hljs-number">0</span>;d[<span class="hljs-number">1</span>]%=inf;<br>    &#125;<br>    <span class="hljs-keyword">return</span> qpow(d[<span class="hljs-number">0</span>],n);<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=<span class="hljs-number">100</span>;p[<span class="hljs-number">0</span>]=p[<span class="hljs-number">1</span>]=inv[<span class="hljs-number">1</span>]=invp[<span class="hljs-number">1</span>]=invp[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    inc(i,<span class="hljs-number">2</span>,n)p[i]=p[i<span class="hljs-number">-1</span>]*i%inf,inv[i]=inv[inf%i]*(inf-inf/i)%inf,invp[i]=invp[i<span class="hljs-number">-1</span>]*inv[i]%inf;<br>    <span class="hljs-keyword">int</span> _=read();<span class="hljs-keyword">while</span>(_--)&#123;<br>n=read();m=read();_x=_y=<span class="hljs-number">0</span>;<br>inc(i,<span class="hljs-number">0</span>,<span class="hljs-number">61</span>)<span class="hljs-keyword">if</span>((succ(i)|m)==m)&#123;<br>    <span class="hljs-keyword">if</span>(succ(i)%<span class="hljs-number">3</span>==<span class="hljs-number">1</span>)_x++;<br>    <span class="hljs-keyword">else</span> _y++;<br>&#125;<br>ans=<span class="hljs-number">0</span>;<br>inc(i,<span class="hljs-number">0</span>,_x)inc(j,<span class="hljs-number">0</span>,_y)&#123;<br>    <span class="hljs-keyword">if</span>((_x-i+_y-j)%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>)<br>ans+=f(i,j)*binom(_x,i)%inf*binom(_y,j)%inf;<br>    <span class="hljs-keyword">else</span> ans+=inf-f(i,j)*binom(_x,i)%inf*binom(_y,j)%inf;<br>    ans%=inf;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 组合数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hdu6593(斯特林数+多项式多点求值)</title>
      <link href="/hdu6593/"/>
      <url>/hdu6593/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://acm.hdu.edu.cn/status.php?first=&amp;pid=&amp;user=qkoqhh&amp;lang=0&amp;status=0" target="_blank" rel="noopener">http://acm.hdu.edu.cn/status.php?first=&amp;pid=&amp;user=qkoqhh&amp;lang=0&amp;status=0</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定 $n$ 和一个函数 $\displaystyle f(x)=\frac{b}{c+e^{ax+d}}$ ，令 $ax+d=0$ 的解为 $x_0$ ，将 $f(x)$ 在 $x_0$ 处展开(模 $998244353$ 下)</p><p>给定 $m$ 组询问，每组询问给定 $f(x)$ 的四个参数 $a,b,c,d$ ，要求 $f(x)$ 的 $n$ 次项系数</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>感觉这个题比较教科书吧。。所以就上去干了一发。。</p><p>首先要把 $f(x)$ 展开，展开的方式窝和题解不太一样</p><script type="math/tex; mode=display">\begin{aligned}f(x)=&\frac{b}{c+e^{ax+d}}\\=&\frac{b}{c+e^{a(x-x_0)}}\\=&\frac{b}{c}\frac{1}{1+\frac{1}{c}e^{a(x-x_0)}}\\=&\frac{b}{c}\sum_{N=0}^{\infty}(-\frac{1}{c}e^{a(x-x_0)})^N\\=&\frac{b}{c}\sum_{N=0}^{\infty}(-\frac{1}{c})^Ne^{aN(x-x_0)}\\=&\frac{b}{c}\sum_{N=0}^{\infty}(-\frac{1}{c})^N\sum_{n=0}^{\infty}\frac{(aN)^n}{n!}(x-x_0)^n\\=&\sum_{n=0}^{\infty}\frac{a^nb}{cn!}\sum_{N=0}^{\infty}N^n(-\frac{1}{c})^N(x-x_0)^n\end{aligned}</script><p>这里有个注意的地方是除了 $c$ ，所以当 $c=0$ 的时候要另做讨论</p><script type="math/tex; mode=display">f(x)=be^{-a(x-x_0)}=\sum_{n=0}^{\infty}b\frac{(-a)^n}{n!}(x-x_0)^n</script><p>这个问题倒是不大。。</p><p>所以当 $c\neq 0$ 时，要求的就是</p><script type="math/tex; mode=display">\frac{a^nb}{cn!}\sum_{N=0}^{\infty}N^n(-\frac{1}{c})^N</script><p>然后后面那个和式比较令人头痛啊。。幂级数乘等比的求和感觉也只能用错位相减。。然而做出差来不像等比一样是个常数就很尴尬。。</p><p>因此考虑做差比较方便的下降幂函数，那么设$S(q,k)=\sum_{n=0}^{\infty}n^{\underline k}q^n$ ，做错位相减得</p><script type="math/tex; mode=display">\begin{eqnarray*}(1-q)S(q,k)&=&\sum_{n=0}^{\infty}(n^{\underline{k}}-(n-1)^{\underline{k}})q^n\\(1-q)S(q,k)&=&\sum_{n=0}^{\infty}k(n-1)^{\underline{k-1}}q^n\\(1-q)S(q,k)&=&kqS(q,k-1)\\S(q,k)&=&\frac{kq}{1-q} S(q,k-1)\\S(q,k)&=&\frac{k!q^k}{(1-q)^{k}} S(q,0)\\S(q,k)&=&\frac{k!q^k}{(1-q)^{k+1}} \\\end{eqnarray*}</script><p>然后代入上式</p><script type="math/tex; mode=display">\begin{aligned}ans=&\frac{a^nb}{cn!}\sum_{N=0}^{\infty}N^n(-\frac{1}{c})^N\\=&\frac{a^nb}{cn!}\sum_{k=0}^{n}{n\brace k}\sum_{N=0}^{\infty} N^{\underline{k}}(-\frac{1}{c})^N\\=&\frac{a^nb}{cn!}\sum_{k=0}^{n}{n\brace k}\frac{k!(-\frac{1}{c})^k}{(1+\frac{1}{c})^{k+1}}\\=&\frac{a^nb}{(c+1)n!}\sum_{k=0}^{n}{n\brace k}(-1)^kk! (\frac{1}{c+1})^k\end{aligned}</script><p>对多次询问，由于 $n$ 是相同的，所以可以先预处理斯特林数构造多项式，然后变成一个多点求值问题。。</p><p><br></p><p>后记：错位相减法杀我啊啊啊啊</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 140005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 400005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">998244353</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reduce</span><span class="hljs-params">(ll&amp;x)</span></span>&#123;x+=x&gt;&gt;<span class="hljs-number">63</span>&amp;inf;&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">qpow</span><span class="hljs-params">(ll x,ll t)</span></span>&#123;<br>    ll s=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(;t;t&gt;&gt;=<span class="hljs-number">1</span>,x=x*x%inf)<span class="hljs-keyword">if</span>(t&amp;<span class="hljs-number">1</span>)s=s*x%inf;<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br><br><span class="hljs-keyword">namespace</span> Poly&#123;<br>    <span class="hljs-keyword">int</span> lim,bit,rev[NM],w[NM],W[NM];<br>    ll invn;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">clear</span><span class="hljs-params">(ll*a,ll*b)</span></span>&#123;<span class="hljs-keyword">if</span>(a&lt;b)<span class="hljs-built_in">memset</span>(a,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(ll)*(b-a));&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-keyword">int</span> m)</span></span>&#123;<br><span class="hljs-keyword">for</span>(lim=<span class="hljs-number">1</span>,bit=<span class="hljs-number">0</span>;lim&lt;m;lim&lt;&lt;=<span class="hljs-number">1</span>)bit++;invn=qpow(lim,inf<span class="hljs-number">-2</span>);<br>inc(i,<span class="hljs-number">1</span>,lim<span class="hljs-number">-1</span>)rev[i]=(rev[i&gt;&gt;<span class="hljs-number">1</span>]&gt;&gt;<span class="hljs-number">1</span>)|((i&amp;<span class="hljs-number">1</span>)&lt;&lt;(bit<span class="hljs-number">-1</span>));<br>ll t=qpow(<span class="hljs-number">3</span>,(inf<span class="hljs-number">-1</span>)/lim);W[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>inc(i,<span class="hljs-number">1</span>,lim)W[i]=W[i<span class="hljs-number">-1</span>]*t%inf;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fft</span><span class="hljs-params">(ll*a,<span class="hljs-keyword">int</span> f=<span class="hljs-number">0</span>)</span></span>&#123;<br><span class="hljs-keyword">int</span> n=lim;<br>inc(i,<span class="hljs-number">1</span>,n<span class="hljs-number">-1</span>)<span class="hljs-keyword">if</span>(i&lt;rev[i])swap(a[i],a[rev[i]]);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">1</span>;k&lt;n;k&lt;&lt;=<span class="hljs-number">1</span>)&#123;<br>    <span class="hljs-keyword">int</span> t=n/k&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>,j=<span class="hljs-number">0</span>;i&lt;k;i++,j+=t)w[i]=W[f?n-j:j];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i+=k&lt;&lt;<span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;k;j++)&#123;<br>    ll x=a[i+j],y=w[j]*a[i+j+k]%inf;<br>    reduce(a[i+j]=x+y-inf);reduce(a[i+j+k]=x-y);<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(f)inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)a[i]=a[i]*invn%inf;<br>    &#125;<br>    ll _a[NM];<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">inv</span><span class="hljs-params">(ll*b,ll*a,<span class="hljs-keyword">int</span> m)</span></span>&#123;<br><span class="hljs-keyword">if</span>(m==<span class="hljs-number">1</span>)&#123;b[<span class="hljs-number">0</span>]=qpow(a[<span class="hljs-number">0</span>],inf<span class="hljs-number">-2</span>);<span class="hljs-keyword">return</span>;&#125;<br>inv(b,a,m+<span class="hljs-number">1</span>&gt;&gt;<span class="hljs-number">1</span>);init(m&lt;&lt;<span class="hljs-number">1</span>);<br>copy(a,a+m,_a);clear(_a+m,_a+lim);clear(b+m,b+lim);<br>fft(b);fft(_a);<br>inc(i,<span class="hljs-number">0</span>,lim<span class="hljs-number">-1</span>)b[i]=b[i]*(<span class="hljs-number">2</span>-_a[i]*b[i]%inf+inf)%inf;<br>fft(b,<span class="hljs-number">1</span>);clear(b+m,b+lim);<br>    &#125;<br>    ll _b[NM];<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">div</span><span class="hljs-params">(ll*c,ll*d,ll*a,ll*b,<span class="hljs-keyword">int</span> n,<span class="hljs-keyword">int</span> m)</span></span>&#123;<br>reverse_copy(a,a+n,c);reverse_copy(b,b+m,d);<br>inv(_b,d,n-m+<span class="hljs-number">1</span>);reverse(d,d+m);<br>init(n-m+<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">1</span>);clear(c+n-m+<span class="hljs-number">1</span>,c+lim);<br>fft(_b);fft(c);<br>inc(i,<span class="hljs-number">0</span>,lim<span class="hljs-number">-1</span>)c[i]=c[i]*_b[i]%inf;<br>fft(c,<span class="hljs-number">1</span>);<br>reverse(c,c+n-m+<span class="hljs-number">1</span>);clear(c+n-m+<span class="hljs-number">1</span>,c+lim);<br>init(n);<br>copy(c,c+n-m+<span class="hljs-number">1</span>,_b);clear(_b+n-m+<span class="hljs-number">1</span>,_b+lim);<br>m--;clear(d+m,d+lim);<br>fft(_b);fft(d);<br>inc(i,<span class="hljs-number">0</span>,lim<span class="hljs-number">-1</span>)d[i]=d[i]*_b[i]%inf;<br>fft(d,<span class="hljs-number">1</span>);<br>clear(d+m,d+lim);clear(_b,_b+lim);<br>inc(i,<span class="hljs-number">0</span>,m<span class="hljs-number">-1</span>)reduce(d[i]=a[i]-d[i]);<br>    &#125;<br>    <span class="hljs-built_in">vector</span>&lt;ll&gt;p[NM],q[NM];ll _c[NM];<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i,<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y,<span class="hljs-keyword">const</span> ll*a)</span></span>&#123;<br><span class="hljs-keyword">if</span>(x==y)&#123;p[i].clear();p[i].push_back(inf-a[x]);p[i].push_back(<span class="hljs-number">1</span>);<span class="hljs-keyword">return</span>;&#125;<br>build(i&lt;&lt;<span class="hljs-number">1</span>,x,mid,a);build(i&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,y,a);<br><span class="hljs-keyword">int</span> n=p[i&lt;&lt;<span class="hljs-number">1</span>].size(),m=p[i&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>].size();<br>init(n+m<span class="hljs-number">-1</span>);<br>copy(p[i&lt;&lt;<span class="hljs-number">1</span>].begin(),p[i&lt;&lt;<span class="hljs-number">1</span>].end(),_a);clear(_a+n,_a+lim);<br>copy(p[i&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>].begin(),p[i&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>].end(),_b);clear(_b+m,_b+lim);<br>fft(_a);fft(_b);<br>inc(j,<span class="hljs-number">0</span>,lim<span class="hljs-number">-1</span>)_c[j]=_a[j]*_b[j]%inf;<br>fft(_c,<span class="hljs-number">1</span>);p[i].assign(_c,_c+n+m<span class="hljs-number">-1</span>);<br>    &#125;<br>    ll _d[NM],tmp[NM],ret[NM];<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DIV</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<br><span class="hljs-keyword">if</span>(q[x].size()&lt;p[y].size())&#123;q[y]=q[x];<span class="hljs-keyword">return</span>;&#125;<br>copy(q[x].begin(),q[x].end(),_c);copy(p[y].begin(),p[y].end(),_d);<br>div(tmp,ret,_c,_d,q[x].size(),p[y].size());<br>q[y].assign(ret,ret+p[y].size()<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">while</span>(!q[y].back())q[y].pop_back();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">cal</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i,<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y,ll*a)</span></span>&#123;<br><span class="hljs-keyword">if</span>(x==y)&#123;a[x]=q[i][<span class="hljs-number">0</span>];<span class="hljs-keyword">return</span>;&#125;<br>DIV(i,i&lt;&lt;<span class="hljs-number">1</span>);DIV(i,i&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>);<br>cal(i&lt;&lt;<span class="hljs-number">1</span>,x,mid,a);cal(i&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,y,a);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">out</span><span class="hljs-params">(ll*a,<span class="hljs-keyword">int</span> m)</span></span>&#123;inc(i,<span class="hljs-number">0</span>,m<span class="hljs-number">-1</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld%c"</span>,a[i],<span class="hljs-string">" \n"</span>[i==m<span class="hljs-number">-1</span>]);&#125;<br>&#125;<br><br><span class="hljs-keyword">int</span> n,m;<br>ll _x,_y,<span class="hljs-keyword">_t</span>;<br>ll inv[NM],invp[NM],p[NM];<br>ll b[NM],c[NM],st[NM],a[NM],ans[NM];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123;<br>    inc(i,<span class="hljs-number">0</span>,n)<span class="hljs-keyword">if</span>(i&amp;<span class="hljs-number">1</span>)a[i]=inf-invp[i];<span class="hljs-keyword">else</span> a[i]=invp[i];<br>    inc(i,<span class="hljs-number">0</span>,n)st[i]=qpow(i,n)*invp[i]%inf;<br>    Poly::init(n&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>);<br>    Poly::clear(a+n+<span class="hljs-number">1</span>,a+Poly::lim);<br>    Poly::clear(st+n+<span class="hljs-number">1</span>,st+Poly::lim);<br>    Poly::fft(a);Poly::fft(st);<br>    inc(i,<span class="hljs-number">0</span>,Poly::lim<span class="hljs-number">-1</span>)st[i]=st[i]*a[i]%inf;<br>    Poly::fft(st,<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=<span class="hljs-number">5e4</span>;p[<span class="hljs-number">0</span>]=p[<span class="hljs-number">1</span>]=inv[<span class="hljs-number">1</span>]=invp[<span class="hljs-number">0</span>]=invp[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    inc(i,<span class="hljs-number">2</span>,n)p[i]=p[i<span class="hljs-number">-1</span>]*i%inf,inv[i]=inv[inf%i]*(inf-inf/i)%inf,invp[i]=invp[i<span class="hljs-number">-1</span>]*inv[i]%inf;<br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d"</span>,&amp;n,&amp;m))&#123;<br>inc(i,<span class="hljs-number">1</span>,m)&#123;<br>    reduce(_x=read()%inf);reduce(_y=read()%inf);reduce(<span class="hljs-keyword">_t</span>=read()%inf);read();<br>    b[i]=qpow(<span class="hljs-keyword">_t</span>+<span class="hljs-number">1</span>,inf<span class="hljs-number">-2</span>);<br>    c[i]=qpow(_x,n)*_y%inf*b[i]%inf*invp[n]%inf;<br>&#125;<br>init();<br>inc(i,<span class="hljs-number">0</span>,n)<span class="hljs-keyword">if</span>(i&amp;<span class="hljs-number">1</span>)a[i]=inf-st[i]*p[i]%inf;<span class="hljs-keyword">else</span> a[i]=st[i]*p[i]%inf;<br><span class="hljs-comment">//Poly::out(a,n+1);</span><br>Poly::build(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,m,b);<br>Poly::q[<span class="hljs-number">0</span>].assign(a,a+n+<span class="hljs-number">1</span>);<br>Poly::DIV(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>);<br>Poly::cal(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,m,ans);<br>inc(i,<span class="hljs-number">1</span>,m)ans[i]=ans[i]*c[i]%inf;<br><span class="hljs-comment">//inc(i,1,m)printf("%lld ",ans[i]);putchar('\n');</span><br>inc(i,<span class="hljs-number">1</span>,m)<span class="hljs-keyword">if</span>(b[i]==<span class="hljs-number">1</span>)&#123;<br>    <span class="hljs-keyword">if</span>(n&amp;<span class="hljs-number">1</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,(inf-c[i])%inf);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,c[i]);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(b[i]==<span class="hljs-number">0</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"-1\n"</span>);<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> FFT </tag>
            
            <tag> 组合数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>now883I(DP)</title>
      <link href="/now883I/"/>
      <url>/now883I/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://ac.nowcoder.com/acm/contest/883/I" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/contest/883/I</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>有一个长度为 $n$ 的序列 $A$ ，构造一个序列 $B$ ，$b<em>i$ 为 $a_i,a</em>{i+1},a_{i+2}$ 的中位数，现在给出 $B$ ，要求还原 $A$</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>一个比较好的假题，彻底把窝假死了。。看起来就很构造啊qaq</p><p> 然后有一个显然的结论就是每个位置选的数必然是  $a<em>i,a</em>{i+1},a_{i+2}$ 中的一个，因为总比选其他数什么贡献都不产生好。。</p><p>然后直接一遍 DP 过去就行了。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y)/2</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 100005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 30005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><span class="hljs-keyword">int</span> n,a[NM],ans[NM],p[NM][<span class="hljs-number">3</span>][<span class="hljs-number">3</span>];<br><span class="hljs-keyword">bool</span> d[NM][<span class="hljs-number">3</span>][<span class="hljs-number">3</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">med</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y,<span class="hljs-keyword">int</span> z)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(x&gt;y)swap(x,y);<br>    <span class="hljs-keyword">if</span>(x&gt;z)swap(x,z);<br>    <span class="hljs-keyword">if</span>(y&gt;z)swap(y,z);<br>    <span class="hljs-keyword">return</span> y;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> _=read();<span class="hljs-keyword">while</span>(_--)&#123;<br>n=read()<span class="hljs-number">-2</span>;inc(i,<span class="hljs-number">1</span>,n)a[i]=read();<br>inc(i,<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>)inc(j,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)inc(k,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)d[i][j][k]=<span class="hljs-literal">false</span>,p[i][j][k]=<span class="hljs-number">0</span>;<br>d[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>][<span class="hljs-number">2</span>]=d[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>][<span class="hljs-number">2</span>]=<span class="hljs-literal">true</span>;<br>inc(i,<span class="hljs-number">1</span>,n)inc(j,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)<span class="hljs-keyword">if</span>(i+j<span class="hljs-number">-1</span>&gt;<span class="hljs-number">0</span>&amp;&amp;i+j<span class="hljs-number">-1</span>&lt;=n)inc(k,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)<span class="hljs-keyword">if</span>(i<span class="hljs-number">-1</span>+k<span class="hljs-number">-1</span>&gt;<span class="hljs-number">0</span>&amp;&amp;i<span class="hljs-number">-1</span>+k<span class="hljs-number">-1</span>&lt;=n&amp;&amp;d[i][j][k])&#123;<br>    inc(v,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)<span class="hljs-keyword">if</span>(i+<span class="hljs-number">1</span>+v<span class="hljs-number">-1</span>&gt;<span class="hljs-number">0</span>&amp;&amp;i+<span class="hljs-number">1</span>+v<span class="hljs-number">-1</span>&lt;=n&amp;&amp;!d[i+<span class="hljs-number">1</span>][v][j]&amp;&amp;med(a[i<span class="hljs-number">-1</span>+k<span class="hljs-number">-1</span>],a[i+j<span class="hljs-number">-1</span>],a[i+<span class="hljs-number">1</span>+v<span class="hljs-number">-1</span>])==a[i])&#123;<br>d[i+<span class="hljs-number">1</span>][v][j]++;<br>p[i+<span class="hljs-number">1</span>][v][j]=k;<br>    &#125;<br>&#125;<br>ans[<span class="hljs-number">0</span>]=-inf;<br>inc(j,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)inc(k,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)<span class="hljs-keyword">if</span>(d[n+<span class="hljs-number">1</span>][j][k])&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> x=n+<span class="hljs-number">1</span>;x&gt;<span class="hljs-number">1</span>;x--)&#123;<br>ans[x]=a[x+j<span class="hljs-number">-1</span>];<br><span class="hljs-keyword">int</span> t=p[x][j][k];<br>j=k;k=t;<br>    &#125;<br>    ans[<span class="hljs-number">1</span>]=a[<span class="hljs-number">1</span>+j<span class="hljs-number">-1</span>];<br>    ans[<span class="hljs-number">0</span>]=a[k<span class="hljs-number">-1</span>];<br>    <span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(ans[<span class="hljs-number">0</span>]&lt;<span class="hljs-number">0</span>)&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"-1\n"</span>);<span class="hljs-keyword">continue</span>;&#125;<br>inc(i,<span class="hljs-number">0</span>,n)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d "</span>,ans[i]);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,ans[n+<span class="hljs-number">1</span>]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hdu6598(最小割)</title>
      <link href="/hdu6598/"/>
      <url>/hdu6598/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6598" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=6598</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定 $n$ 个点，$m$ 条边，将这 $n$ 个点黑白染色，对每条边，如果两个点同是黑色，产生 $a$ 贡献，同是白色，产生 $b$ 贡献，否则产生 $c$ 贡献，问产生的最大贡献</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>一个十分神奇的模型。。直接贴题解。。</p><p>分成两个点集的问题可以用最小割解决，考虑一条边的情况，可以构造下图</p><p><img src="/images/hdu6598.png" alt=""></p><p>由于要求最大价值，所以用割边代表损失的价值，用总价值减去最小割即可。。那么有</p><script type="math/tex; mode=display">\begin{eqnarray*}a+b&=&B+C\\c+d&=&A+B\\a+e+d&=&A+C\\b+e+c&=&c+d\end{eqnarray*}</script><p> 解得</p><script type="math/tex; mode=display">\begin{eqnarray*}a=b=\frac{B+C}{2}\\c=d=\frac{A+B}{2}\\e=\frac{2B-A-C}{2}\end{eqnarray*}</script><p>然后对所有边进行一次累加，图就建完了。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y)/2</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 505</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 30005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">1e18</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span>&#123;</span><span class="hljs-keyword">int</span> t;ll v;edge*next,*rev;&#125;e[nm],*h[NM],*o=e,*tmp[NM],*p[NM];<br><span class="hljs-keyword">void</span> _add(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y,<span class="hljs-keyword">int</span> v)&#123;o-&gt;t=y;o-&gt;v=v;o-&gt;next=h[x];h[x]=o++;&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y,<span class="hljs-keyword">int</span> v)</span></span>&#123;_add(x,y,v);_add(y,x,<span class="hljs-number">0</span>);h[x]-&gt;rev=h[y];h[y]-&gt;rev=h[x];&#125;<br><br><span class="hljs-keyword">int</span> n,m,_a,_b,_c,_x,_y;<br><span class="hljs-keyword">int</span> tot,cnt[NM],d[NM];<br>ll a[NM],b[NM],s;<br><br><span class="hljs-function">ll <span class="hljs-title">maxflow</span><span class="hljs-params">()</span></span>&#123;<br>    ll flow=<span class="hljs-number">0</span>;edge*j;<br>    inc(i,<span class="hljs-number">0</span>,n)tmp[i]=h[i],cnt[i]=d[i]=<span class="hljs-number">0</span>;<br>    cnt[<span class="hljs-number">0</span>]=tot=n+<span class="hljs-number">1</span>;<br>    ll s=inf;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> x=<span class="hljs-number">0</span>;d[x]&lt;tot;)&#123;<br><span class="hljs-keyword">for</span>(j=tmp[x];j;j=j-&gt;next)<span class="hljs-keyword">if</span>(j-&gt;v&amp;&amp;d[j-&gt;t]+<span class="hljs-number">1</span>==d[x])<span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">if</span>(j)&#123;<br>    s=min(s,j-&gt;v);tmp[x]=p[j-&gt;t]=j;<br>    <span class="hljs-keyword">if</span>((x=j-&gt;t)==n)&#123;<br><span class="hljs-keyword">for</span>(;x;x=p[x]-&gt;rev-&gt;t)p[x]-&gt;v-=s,p[x]-&gt;rev-&gt;v+=s;<br>flow+=s;s=inf;<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">if</span>(!--cnt[d[x]])<span class="hljs-keyword">break</span>;d[x]=tot;<br>    link(x)<span class="hljs-keyword">if</span>(j-&gt;v&amp;&amp;d[x]&gt;d[j-&gt;t]+<span class="hljs-number">1</span>)d[x]=d[j-&gt;t]+<span class="hljs-number">1</span>,tmp[x]=j;<br>    cnt[d[x]]++;<br>    <span class="hljs-keyword">if</span>(p[x])x=p[x]-&gt;rev-&gt;t;<br>&#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> flow;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d"</span>,&amp;n,&amp;m))&#123;<br>inc(i,<span class="hljs-number">1</span>,n)a[i]=b[i]=<span class="hljs-number">0</span>;<br>inc(i,<span class="hljs-number">0</span>,n+<span class="hljs-number">1</span>)h[i]=<span class="hljs-number">0</span>;<br>o=e;s=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(m--)&#123;<br>    _x=read();_y=read();_a=read();_b=read();_c=read();<br>    s+=_a+_b+_c;<br>    a[_x]+=_b+_c;a[_y]+=_b+_c;<br>    b[_x]+=_a+_b;b[_y]+=_a+_b;<br>    _add(_x,_y,_a+_c<span class="hljs-number">-2</span>*_b);_add(_y,_x,_a+_c-_b*<span class="hljs-number">2</span>);<br>    h[_x]-&gt;rev=h[_y];h[_y]-&gt;rev=h[_x];<br>&#125;<br>inc(i,<span class="hljs-number">1</span>,n)add(<span class="hljs-number">0</span>,i,a[i]),add(i,n+<span class="hljs-number">1</span>,b[i]);<br>s&lt;&lt;=<span class="hljs-number">1</span>;<br>n++;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,s-maxflow()&gt;&gt;<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 网络流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>luogu4313(最小割)</title>
      <link href="/luogu4313/"/>
      <url>/luogu4313/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.org/problem/P4313" target="_blank" rel="noopener">https://www.luogu.org/problem/P4313</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>将点分为俩个集合，显然可以往二分图或者最小割的方向考虑</p><p>那么关键在于同集合中的价值要怎么考虑。。</p><p>对每些相邻的点，我们另开一个点，从源点(汇点)连一个权值为价值的边，然后向需要在该集合中的点连无穷的边就可以了。。</p><p>然后跑最小割即可。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　　　┏┓　　 　┏┓<br> * 　　　　　　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　　　┃　　　　　　　┃ 　<br> * 　　　　　　　┃　　　━　　 　┃<br> * 　　　　　　　┃　＞　　　＜　┃<br> * 　　　　　　　┃　　　　　　　┃<br> * 　　　　　　　┃...　⌒　... 　┃<br> * 　　　　　　　┃　　　　　　　┃<br> * 　　　　　　　┗━┓　　　┏━┛<br> * 　　　　　　　　　┃　　　┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃　　　┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃　　　┃　　　　　　　　　　　<br> * 　　　　　　　　　┃　　　┃  　　　　　　<br> * 　　　　　　　　　┃　　　┃<br> * 　　　　　　　　　┃　　　┃　　　　　　　　　　　<br> * 　　　　　　　　　┃　　　┗━━━┓<br> * 　　　　　　　　　┃　　　　　　　┣┓<br> * 　　　　　　　　　┃　　　　　　　┏┛<br> * 　　　　　　　　　┗┓┓┏━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫　┃┫┫<br> * 　　　　　　　　　　┗┻┛　┗┻┛<br> */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-12</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1LL&lt;&lt;(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 30005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 400005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pi 3.1415926535897931</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span>&#123;</span><span class="hljs-keyword">int</span> t,v;edge*next,*rev;&#125;e[nm],*h[NM],*o=e,*p[NM],*tmp[NM];<br><span class="hljs-keyword">void</span> _add(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y,<span class="hljs-keyword">int</span> v)&#123;o-&gt;t=y;o-&gt;v=v;o-&gt;next=h[x];h[x]=o++;&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y,<span class="hljs-keyword">int</span> v)</span></span>&#123;_add(x,y,v);_add(y,x,<span class="hljs-number">0</span>);h[x]-&gt;rev=h[y];h[y]-&gt;rev=h[x];&#125;<br><span class="hljs-keyword">int</span> d[NM],cnt[NM],t;<br><span class="hljs-keyword">int</span> n,m,_x,_y,<span class="hljs-keyword">_t</span>,tot,b[<span class="hljs-number">105</span>][<span class="hljs-number">105</span>];<br><span class="hljs-keyword">int</span> s;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> dir[][<span class="hljs-number">2</span>]=&#123;&#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;,&#123;<span class="hljs-number">1</span>,<span class="hljs-number">0</span>&#125;,&#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>&#125;,&#123;<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>&#125;,&#123;<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>&#125;&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">maxflow</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> flow=<span class="hljs-number">0</span>;edge*j;<br>    inc(i,<span class="hljs-number">0</span>,tot)tmp[i]=h[i];<br>    cnt[<span class="hljs-number">0</span>]=++tot;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> x=<span class="hljs-number">0</span>,s=inf;d[x]&lt;tot;)&#123;<br><span class="hljs-keyword">for</span>(j=tmp[x];j;j=j-&gt;next)<span class="hljs-keyword">if</span>(j-&gt;v&amp;&amp;d[j-&gt;t]+<span class="hljs-number">1</span>==d[x])<span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">if</span>(j)&#123;<br>    s=min(j-&gt;v,s);tmp[x]=p[j-&gt;t]=j;<br>    <span class="hljs-keyword">if</span>((x=j-&gt;t)==n)&#123;<br><span class="hljs-keyword">for</span>(;x;x=p[x]-&gt;rev-&gt;t)p[x]-&gt;v-=s,p[x]-&gt;rev-&gt;v+=s;<br>flow+=s;s=inf;<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">if</span>(!--cnt[d[x]])<span class="hljs-keyword">break</span>;d[x]=tot;<br>    link(x)<span class="hljs-keyword">if</span>(j-&gt;v&amp;&amp;d[x]&gt;d[j-&gt;t]+<span class="hljs-number">1</span>)d[x]=d[j-&gt;t]+<span class="hljs-number">1</span>,tmp[x]=j;<br>    cnt[d[x]]++;<br>    <span class="hljs-keyword">if</span>(p[x])x=p[x]-&gt;rev-&gt;t;<br>&#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> flow;<br>&#125;<br><br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();m=read();<br>    inc(i,<span class="hljs-number">1</span>,n)inc(j,<span class="hljs-number">1</span>,m)b[i][j]=++tot;<br>    tot++;<br>    inc(i,<span class="hljs-number">1</span>,n)inc(j,<span class="hljs-number">1</span>,m)&#123;<br><span class="hljs-keyword">_t</span>=read();<span class="hljs-keyword">if</span>(<span class="hljs-keyword">_t</span>==<span class="hljs-number">0</span>)<span class="hljs-keyword">continue</span>;<br>add(<span class="hljs-number">0</span>,b[i][j],<span class="hljs-keyword">_t</span>),s+=<span class="hljs-keyword">_t</span>;<br>    &#125;<br>    inc(i,<span class="hljs-number">1</span>,n)inc(j,<span class="hljs-number">1</span>,m)&#123;<br><span class="hljs-keyword">_t</span>=read();<span class="hljs-keyword">if</span>(<span class="hljs-keyword">_t</span>==<span class="hljs-number">0</span>)<span class="hljs-keyword">continue</span>;<br>add(b[i][j],tot,<span class="hljs-keyword">_t</span>);s+=<span class="hljs-keyword">_t</span>;<br>    &#125;<br>    inc(i,<span class="hljs-number">1</span>,n)inc(j,<span class="hljs-number">1</span>,m)&#123;<br><span class="hljs-keyword">_t</span>=read();<span class="hljs-keyword">if</span>(<span class="hljs-keyword">_t</span>==<span class="hljs-number">0</span>)<span class="hljs-keyword">continue</span>;<br>s+=<span class="hljs-keyword">_t</span>;tot++;<br>add(<span class="hljs-number">0</span>,tot,<span class="hljs-keyword">_t</span>);<br>inc(k,<span class="hljs-number">0</span>,<span class="hljs-number">4</span>)<span class="hljs-keyword">if</span>(b[i+dir[k][<span class="hljs-number">0</span>]][j+dir[k][<span class="hljs-number">1</span>]])<br>    add(tot,b[i+dir[k][<span class="hljs-number">0</span>]][j+dir[k][<span class="hljs-number">1</span>]],inf);<br>    &#125;<br>    inc(i,<span class="hljs-number">1</span>,n)inc(j,<span class="hljs-number">1</span>,m)&#123;<br><span class="hljs-keyword">_t</span>=read();<span class="hljs-keyword">if</span>(<span class="hljs-keyword">_t</span>==<span class="hljs-number">0</span>)<span class="hljs-keyword">continue</span>;<br>s+=<span class="hljs-keyword">_t</span>;tot++;<br>add(tot,n*m+<span class="hljs-number">1</span>,<span class="hljs-keyword">_t</span>);<br>inc(k,<span class="hljs-number">0</span>,<span class="hljs-number">4</span>)<span class="hljs-keyword">if</span>(b[i+dir[k][<span class="hljs-number">0</span>]][j+dir[k][<span class="hljs-number">1</span>]])add(b[i+dir[k][<span class="hljs-number">0</span>]][j+dir[k][<span class="hljs-number">1</span>]],tot,inf);<br>    &#125;<br>    n=n*m+<span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,s-maxflow());<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 网络流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uoj62(莫比乌斯反演)</title>
      <link href="/uoj62/"/>
      <url>/uoj62/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://uoj.ac/problem/62" target="_blank" rel="noopener">http://uoj.ac/problem/62</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>需要经过很长的推导。。主要参考 <a href="http://vfleaking.blog.uoj.ac/blog/87" target="_blank" rel="noopener">VFK的博客</a></p><script type="math/tex; mode=display">\begin{eqnarray*}b_i&=&\sum_{j=1}^ngcd^C(i,j)lcm^D(i,j)x_j\\&=&\sum_{j=1}^ni^Dj^D(i,j)^{C-D}x_j\end{eqnarray*}</script><p>所以</p><script type="math/tex; mode=display">\begin{eqnarray*}\frac{b_i}{i^D}&=&\sum_{d|i}d^{C-D}\sum_{j=1}^nj^Dx_j[(i,j)=d]\\&=&\sum_{d|i}d^{C-D}\sum_{j=1}^nj^Dx_j\sum_{dd'|i,dd'j}\mu(d')\\&=&\sum_{d|i}\sum_{d'|d}\mu(d')(\frac{d}{d'})^{C-D}\sum_{d|j}j^Dx_j\end{eqnarray*}</script><p>对上式做莫比乌斯反演，得</p><script type="math/tex; mode=display">\begin{eqnarray*}\sum_{i|m}\frac{b_i}{i^D}\mu(\frac{m}{i}) &=&\sum_{d|m}\mu(d)(\frac{m}{d})^{C-D}\sum_{m|j}j^Dx_j\\\frac{\displaystyle\sum_{i|m}\frac{b_i}{i^D}\mu(\frac mi)}{\displaystyle\sum_{d|m}\mu(\frac{m}{d})d^{C-D}}&=&\sum_{m|j}j^Dx_j\end{eqnarray*}</script><p>再做一次莫比乌斯反演</p><script type="math/tex; mode=display">\begin{eqnarray*}m^Dx_m&=&\sum_{m|j}\frac{\displaystyle\sum_{i|j}\frac{b_i}{i^D}\mu(\frac ji)}{\displaystyle\sum_{d|j}\mu(\frac{j}{d})d^{C-D}}\\x_m&=&\frac 1{m^D}\sum_{m|j}\frac{\displaystyle\sum_{i|j}\frac{b_i}{i^D}\mu(\frac ji)}{\displaystyle\sum_{d|j}\mu(\frac{j}{d})d^{C-D}}\end{eqnarray*}</script><p>反演的话，万能的VFK还提供了一个非常好使的代码，如下：</p><p>若$\displaystyle f(n)=\sum_{d|n}g(d)$ ，有</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    g[i]=f[i];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=i+i;j&lt;=n;j+=i)<br>        g[j]-=g[i];<br></code></pre></td></tr></table></figure><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　　　┏┓　　 　┏┓<br> * 　　　　　　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　　　┃　　　　　　　┃ 　<br> * 　　　　　　　┃　　　━　　 　┃<br> * 　　　　　　　┃　＞　　　＜　┃<br> * 　　　　　　　┃　　　　　　　┃<br> * 　　　　　　　┃...　⌒　... 　┃<br> * 　　　　　　　┃　　　　　　　┃<br> * 　　　　　　　┗━┓　　　┏━┛<br> * 　　　　　　　　　┃　　　┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃　　　┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃　　　┃　　　　　　　　　　　<br> * 　　　　　　　　　┃　　　┃  　　　　　　<br> * 　　　　　　　　　┃　　　┃<br> * 　　　　　　　　　┃　　　┃　　　　　　　　　　　<br> * 　　　　　　　　　┃　　　┗━━━┓<br> * 　　　　　　　　　┃　　　　　　　┣┓<br> * 　　　　　　　　　┃　　　　　　　┏┛<br> * 　　　　　　　　　┗┓┓┏━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫　┃┫┫<br> * 　　　　　　　　　　┗┻┛　┗┻┛<br> */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-12</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1LL&lt;&lt;(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid ((x+y)&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 100005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 11</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pi 3.1415926535897931</span><br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">998244353</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><br><span class="hljs-keyword">int</span> n;<br>ll _c,_d,c[NM],d[NM],b[NM];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reduce</span><span class="hljs-params">(ll&amp;x)</span></span>&#123;x+=x&gt;&gt;<span class="hljs-number">63</span>&amp;inf;&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">qpow</span><span class="hljs-params">(ll x,ll t)</span></span>&#123;<br>    ll s=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(;t;t&gt;&gt;=<span class="hljs-number">1</span>,x=sqr(x)%inf)<span class="hljs-keyword">if</span>(t&amp;<span class="hljs-number">1</span>)s=s*x%inf;<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();_c=read()%(inf<span class="hljs-number">-1</span>);_d=read()%(inf<span class="hljs-number">-1</span>);<span class="hljs-keyword">int</span> _=read();<br>    _c-=_d;_d=inf<span class="hljs-number">-1</span>-_d;<br>    <span class="hljs-keyword">if</span>(_c&lt;<span class="hljs-number">0</span>)_c=inf<span class="hljs-number">-1</span>+_c;<br>    inc(i,<span class="hljs-number">1</span>,n)c[i]=qpow(i,_c),d[i]=qpow(i,_d);<br>    inc(i,<span class="hljs-number">1</span>,n)<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=i&lt;&lt;<span class="hljs-number">1</span>;j&lt;=n;j+=i)reduce(c[j]-=c[i]);<br>    inc(i,<span class="hljs-number">1</span>,n)c[i]=qpow(c[i],inf<span class="hljs-number">-2</span>);<br>    <span class="hljs-keyword">while</span>(_--)&#123;<br>inc(i,<span class="hljs-number">1</span>,n)b[i]=read()*d[i]%inf;<br>inc(i,<span class="hljs-number">1</span>,n)<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=i&lt;&lt;<span class="hljs-number">1</span>;j&lt;=n;j+=i)reduce(b[j]-=b[i]);<br><span class="hljs-keyword">bool</span> _f=<span class="hljs-literal">true</span>;<br>inc(i,<span class="hljs-number">1</span>,n)<span class="hljs-keyword">if</span>(c[i]==<span class="hljs-number">0</span>&amp;&amp;b[i]!=<span class="hljs-number">0</span>)&#123;_f=<span class="hljs-literal">false</span>;<span class="hljs-keyword">break</span>;&#125;<span class="hljs-keyword">else</span> b[i]=b[i]*c[i]%inf;<br><span class="hljs-keyword">if</span>(!_f)&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"-1\n"</span>);<span class="hljs-keyword">continue</span>;&#125;<br>dec(i,n,<span class="hljs-number">1</span>)<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=i&lt;&lt;<span class="hljs-number">1</span>;j&lt;=n;j+=i)reduce(b[i]-=b[j]);<br>inc(i,<span class="hljs-number">1</span>,n)b[i]=b[i]*d[i]%inf;<br>inc(i,<span class="hljs-number">1</span>,n)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld%c"</span>,b[i],<span class="hljs-string">" \n"</span>[i==n]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hdu6588(数论)</title>
      <link href="/hdu6588/"/>
      <url>/hdu6588/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6588" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=6588</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>求  $\displaystyle \sum_{I=1}^N (\sqrt[3]i,i)\bmod{998244353}$</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>显然枚举 $\sqrt[3]i$ ，那么有</p><script type="math/tex; mode=display">\begin{aligned}&\sum_{i=1}^N(\sqrt[3]i,i)\\=&\sum_{i=1}^n \sum_{j=i^3}^{i^3-1}(i,j)\end{aligned}</script><p>其中 $n=\sqrt[3]N$</p><p>第二层和式可以差分化简</p><script type="math/tex; mode=display">\begin{aligned}&\sum_{k=1}^j(i,k)\\=&\sum_{k=1}^j \sum_{d|i,d|k}\varphi(d)\\=&\sum_{d|i}\varphi(d)\lfloor\frac{j}{d} \rfloor\end{aligned}</script><p>然后有</p><script type="math/tex; mode=display">\begin{aligned}&\sum_{i=1}^N(\sqrt[3]i,i)\\=&\sum_{i=1}^n \sum_{j=i^3}^{i^3-1}(i,j)\\=&\sum_{i=1}^n\sum_{d|i}\varphi(d)(\lfloor\frac{(i+1)^3-1}{d} \rfloor-\lfloor\frac{i^3-1}{d} \rfloor)\\=&\sum_{i=1}^n\sum_{d|i}\varphi(d)(\frac{i^3+3i^2+3i}{d} -(\frac{i^3}{d}-1) )\\=&\sum_{i=1}^n\sum_{d|i}\varphi(d)(\frac{3i^2+3i}{d}+1)\\=&\sum_{d}\frac{\varphi(d)}{d}\sum_{i=1}^{\lfloor\frac{n}{d} \rfloor}3i^2d^2+3id+\sum_{i=1}^n\sum_{d|i}\varphi(d)\\=&\sum_{d}\varphi(d)d\sum_{i=1}^{\lfloor\frac{n}{d} \rfloor}i^2+\sum_{d}\varphi(d)\sum_{i=1}^{\lfloor\frac{n}{d} \rfloor}i+\sum_{i=1}^ni\end{aligned}</script><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　　　┏┓　　 　┏┓<br> * 　　　　　　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　　　┃　　　　　　　┃ 　<br> * 　　　　　　　┃　　　━　　 　┃<br> * 　　　　　　　┃　＞　　　＜　┃<br> * 　　　　　　　┃　　　　　　　┃<br> * 　　　　　　　┃...　⌒　... 　┃<br> * 　　　　　　　┃　　　　　　　┃<br> * 　　　　　　　┗━┓　　　┏━┛<br> * 　　　　　　　　　┃　　　┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃　　　┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃　　　┃　　　　　　　　　　　<br> * 　　　　　　　　　┃　　　┃  　　　　　　<br> * 　　　　　　　　　┃　　　┃<br> * 　　　　　　　　　┃　　　┃　　　　　　　　　　　<br> * 　　　　　　　　　┃　　　┗━━━┓<br> * 　　　　　　　　　┃　　　　　　　┣┓<br> * 　　　　　　　　　┃　　　　　　　┏┛<br> * 　　　　　　　　　┗┓┓┏━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫　┃┫┫<br> * 　　　　　　　　　　┗┻┛　┗┻┛<br> */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-12</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1LL&lt;&lt;(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid ((x+y)&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 10000005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 11</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pi 3.1415926535897931</span><br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">998244353</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<br><span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>) &#123;</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">char</span> ch;<span class="hljs-keyword">static</span> <span class="hljs-keyword">bool</span> neg;<br><span class="hljs-keyword">for</span>(ch=neg=<span class="hljs-number">0</span>;ch&lt;<span class="hljs-string">'0'</span> || <span class="hljs-string">'9'</span>&lt;ch;neg|=ch==<span class="hljs-string">'-'</span>,ch=getchar());<br><span class="hljs-keyword">for</span>(x=<span class="hljs-number">0</span>;<span class="hljs-string">'0'</span>&lt;=ch &amp;&amp; ch&lt;=<span class="hljs-string">'9'</span>;(x*=<span class="hljs-number">10</span>)+=ch-<span class="hljs-string">'0'</span>,ch=getchar());<br>x=neg?-x:x;<br>&#125;<br><br><br>__int128 p;<br><span class="hljs-keyword">int</span> n,prime[NM],tot,phi[NM];<br>ll ans,_x,_y,pre[NM],sum[NM];<br><span class="hljs-keyword">bool</span> v[NM];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123;<br>    n=<span class="hljs-number">1e7</span>;phi[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    inc(i,<span class="hljs-number">1</span>,n)sum[i]=(sum[i<span class="hljs-number">-1</span>]+i)%inf,pre[i]=(pre[i<span class="hljs-number">-1</span>]+<span class="hljs-number">1l</span>l*i*i)%inf;<br>    inc(i,<span class="hljs-number">2</span>,n)&#123;<br><span class="hljs-keyword">if</span>(!v[i])prime[++tot]=i,phi[i]=i<span class="hljs-number">-1</span>;<br>inc(j,<span class="hljs-number">1</span>,tot)&#123;<br>    <span class="hljs-keyword">if</span>(i*prime[j]&gt;n)<span class="hljs-keyword">break</span>;<br>    v[i*prime[j]]++;<br>    <span class="hljs-keyword">if</span>(i%prime[j]==<span class="hljs-number">0</span>)&#123;<br>phi[i*prime[j]]=phi[i]*prime[j];<br><span class="hljs-keyword">break</span>;<br>    &#125;<br>    phi[i*prime[j]]=phi[i]*phi[prime[j]];<br>&#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    init();<br>    <span class="hljs-keyword">int</span> _=read();<span class="hljs-keyword">while</span>(_--)&#123;<br>read(p);<br><span class="hljs-keyword">for</span>(__int128 x=<span class="hljs-number">0</span>,y=<span class="hljs-number">1e7</span>;x&lt;=y;)&#123;<br>    __int128 t=x+y&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(t*t*t&lt;=p)n=t,x=t+<span class="hljs-number">1</span>;<span class="hljs-keyword">else</span> y=t<span class="hljs-number">-1</span>;<br>&#125;<br>n--;ans=<span class="hljs-number">1l</span>l*n*(n+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>%inf;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>    ans+=<span class="hljs-number">3l</span>l*phi[i]*i%inf*pre[n/i]%inf;<br>    ans+=<span class="hljs-number">3l</span>l*phi[i]*sum[n/i]%inf;<br>    ans%=inf;<br>&#125;<br>n++;<br>__int128 t=n;t=t*t*t<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i*i&lt;=n;i++)<span class="hljs-keyword">if</span>(n%i==<span class="hljs-number">0</span>)&#123;<br>    ans+=phi[i]*(p/i%inf-t/i%inf+inf)%inf;<br>    <span class="hljs-keyword">if</span>(i*i&lt;n)ans+=phi[n/i]*(p/(n/i)%inf-t/(n/i)%inf+inf)%inf;<br>    ans%=inf;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>now882I(差分)</title>
      <link href="/now882I/"/>
      <url>/now882I/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://ac.nowcoder.com/acm/contest/882/I" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/contest/882/I</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定 $n\times m$ 的矩阵，选定两个子矩阵，使价值最大</p><p>价值定义为正好属于一个矩阵的元素的和</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>这个题其实疯狂差分就可以了。。</p><p>首先把两个子矩阵没交的情况判了。。</p><p>然后考虑交的情况，我们在行上划四条线，表示两个矩阵选定的行，而且这个行上的区间有交</p><p>其次考虑列，列上同样要划四条线，不过我们可以不断求前缀，这样能够保证 $O(m)$ 的复杂度</p><p>这四个列也要求有交，然后再图上画一下这些列之后写一下价值的表达式就可以了。。</p><p>有个坑点是有包含的情况，需要考虑。。（感谢汪聚聚提供对拍</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　　　┏┓　　 　┏┓<br> * 　　　　　　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　　　┃　　　　　　　┃ 　<br> * 　　　　　　　┃　　　━　　 　┃<br> * 　　　　　　　┃　＞　　　＜　┃<br> * 　　　　　　　┃　　　　　　　┃<br> * 　　　　　　　┃...　⌒　... 　┃<br> * 　　　　　　　┃　　　　　　　┃<br> * 　　　　　　　┗━┓　　　┏━┛<br> * 　　　　　　　　　┃　　　┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃　　　┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃　　　┃　　　　　　　　　　　<br> * 　　　　　　　　　┃　　　┃  　　　　　　<br> * 　　　　　　　　　┃　　　┃<br> * 　　　　　　　　　┃　　　┃　　　　　　　　　　　<br> * 　　　　　　　　　┃　　　┗━━━┓<br> * 　　　　　　　　　┃　　　　　　　┣┓<br> * 　　　　　　　　　┃　　　　　　　┏┛<br> * 　　　　　　　　　┗┓┓┏━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫　┃┫┫<br> * 　　　　　　　　　　┗┻┛　┗┻┛<br> */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-12</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1LL&lt;&lt;(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid ((x+y)&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 50005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 11</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pi 3.1415926535897931</span><br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><br><br><span class="hljs-keyword">char</span> _s[NM][nm];<br><span class="hljs-keyword">int</span> n,m,<span class="hljs-keyword">_t</span>,_x,_y;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mat</span>&#123;</span><span class="hljs-keyword">int</span> n,m;ll a[nm][nm];&#125;;<br>mat <span class="hljs-keyword">operator</span>*(<span class="hljs-keyword">const</span> mat&amp;a,<span class="hljs-keyword">const</span> mat&amp;b)&#123;<br>    mat s;mem(s.a);s.n=a.n;s.m=b.m;<br>    inc(i,<span class="hljs-number">1</span>,s.n)inc(k,<span class="hljs-number">1</span>,a.m)inc(j,<span class="hljs-number">1</span>,s.m)(s.a[i][j]+=a.a[i][k]*b.a[k][j])%=inf;<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span>&#123;</span><br>    <span class="hljs-keyword">int</span> x,y;<br>    node*l,*r;<br>    mat s;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">upd</span><span class="hljs-params">()</span></span>&#123;s=l-&gt;s*r-&gt;s;&#125;<br>    node(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y,node*l=<span class="hljs-number">0</span>,node*r=<span class="hljs-number">0</span>):x(x),y(y),l(l),r(r)&#123;<br>s.n=s.m=m;<br><span class="hljs-keyword">if</span>(x==y)&#123;<br>    inc(i,<span class="hljs-number">1</span>,m)<span class="hljs-keyword">if</span>(_s[x][i]==<span class="hljs-string">'0'</span>)&#123;<br>s.a[i][i]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=i<span class="hljs-number">-1</span>;s.a[j][j]==<span class="hljs-number">1</span>;j--)s.a[j][i]=s.a[i][j]=<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">else</span> upd();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">mod</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">if</span>(x==y)&#123;<br>    <span class="hljs-keyword">int</span> l,r;<br>    <span class="hljs-keyword">for</span>(l=_y<span class="hljs-number">-1</span>;s.a[l][l]==<span class="hljs-number">1</span>;l--);l++;<br>    <span class="hljs-keyword">for</span>(r=_y+<span class="hljs-number">1</span>;s.a[r][r]==<span class="hljs-number">1</span>;r++);r--;<br>    <span class="hljs-keyword">if</span>(s.a[_y][_y]==<span class="hljs-number">1</span>)&#123;<br>inc(i,l,_y)inc(j,_y,r)s.a[i][j]=<span class="hljs-number">0</span>;<br>inc(i,_y,r)inc(j,l,_y)s.a[i][j]=<span class="hljs-number">0</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>inc(i,l,_y)inc(j,_y,r)s.a[i][j]=<span class="hljs-number">1</span>;<br>inc(i,_y,r)inc(j,l,_y)s.a[i][j]=<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(_x&lt;=mid)l-&gt;mod();<span class="hljs-keyword">else</span> r-&gt;mod();upd();<br>    &#125;<br>&#125;*root;<br><span class="hljs-function">node*<span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<span class="hljs-keyword">return</span> x==y?<span class="hljs-keyword">new</span> node(x,y):<span class="hljs-keyword">new</span> node(x,y,build(x,mid),build(mid+<span class="hljs-number">1</span>,y));&#125;<br><br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();m=read();<span class="hljs-keyword">int</span> _=read();<br>    inc(i,<span class="hljs-number">1</span>,n)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>,_s[i]+<span class="hljs-number">1</span>);<br>    root=build(<span class="hljs-number">1</span>,n);<br>    <span class="hljs-keyword">while</span>(_--)&#123;<br><span class="hljs-keyword">_t</span>=read();_x=read();_y=read();<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">_t</span>==<span class="hljs-number">1</span>)&#123;<br>    root-&gt;mod();<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    mat t;<br>    mem(t.a);t.n=<span class="hljs-number">1</span>;t.m=m;t.a[<span class="hljs-number">1</span>][_x]=<span class="hljs-number">1</span>;<br>    t=t*root-&gt;s;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,t.a[<span class="hljs-number">1</span>][_y]);<br>&#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> unclassified </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>now882E(动态DP)</title>
      <link href="/now882E/"/>
      <url>/now882E/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://ac.nowcoder.com/acm/contest/882/E" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/contest/882/E</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定一个 $n\times m$ 的方格，只能向下向左向右，不能重复经过同一点，有两个操作：</p><ol><li>把方格中的某个点从空地变成墙或者从墙变成空地</li><li>询问从第一行的某个位置走到最后一行的某个位置的方案数</li></ol><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>考虑不带修的情况，那么设 $d[i][j]$ 为到 $(i,j)$ 的方案数，然后转移考虑上一层形成的联通块，包含 $j$ 联通块必然可以到达该点</p><p>然后考虑带修，由于这个转移是个非常简单的求和，所以可以写成矩阵形式，然后修改的话只需要该对应点的矩阵即可。。然后快速求和可以考虑用线段树维护就可以了。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　　　┏┓　　 　┏┓<br> * 　　　　　　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　　　┃　　　　　　　┃ 　<br> * 　　　　　　　┃　　　━　　 　┃<br> * 　　　　　　　┃　＞　　　＜　┃<br> * 　　　　　　　┃　　　　　　　┃<br> * 　　　　　　　┃...　⌒　... 　┃<br> * 　　　　　　　┃　　　　　　　┃<br> * 　　　　　　　┗━┓　　　┏━┛<br> * 　　　　　　　　　┃　　　┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃　　　┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃　　　┃　　　　　　　　　　　<br> * 　　　　　　　　　┃　　　┃  　　　　　　<br> * 　　　　　　　　　┃　　　┃<br> * 　　　　　　　　　┃　　　┃　　　　　　　　　　　<br> * 　　　　　　　　　┃　　　┗━━━┓<br> * 　　　　　　　　　┃　　　　　　　┣┓<br> * 　　　　　　　　　┃　　　　　　　┏┛<br> * 　　　　　　　　　┗┓┓┏━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫　┃┫┫<br> * 　　　　　　　　　　┗┻┛　┗┻┛<br> */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-12</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1LL&lt;&lt;(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid ((x+y)&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 50005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 11</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pi 3.1415926535897931</span><br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><br><br><span class="hljs-keyword">char</span> _s[NM][nm];<br><span class="hljs-keyword">int</span> n,m,<span class="hljs-keyword">_t</span>,_x,_y;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mat</span>&#123;</span><span class="hljs-keyword">int</span> n,m;ll a[nm][nm];&#125;;<br>mat <span class="hljs-keyword">operator</span>*(<span class="hljs-keyword">const</span> mat&amp;a,<span class="hljs-keyword">const</span> mat&amp;b)&#123;<br>    mat s;mem(s.a);s.n=a.n;s.m=b.m;<br>    inc(i,<span class="hljs-number">1</span>,s.n)inc(k,<span class="hljs-number">1</span>,a.m)inc(j,<span class="hljs-number">1</span>,s.m)(s.a[i][j]+=a.a[i][k]*b.a[k][j])%=inf;<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span>&#123;</span><br>    <span class="hljs-keyword">int</span> x,y;<br>    node*l,*r;<br>    mat s;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">upd</span><span class="hljs-params">()</span></span>&#123;s=l-&gt;s*r-&gt;s;&#125;<br>    node(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y,node*l=<span class="hljs-number">0</span>,node*r=<span class="hljs-number">0</span>):x(x),y(y),l(l),r(r)&#123;<br>s.n=s.m=m;<br><span class="hljs-keyword">if</span>(x==y)&#123;<br>    inc(i,<span class="hljs-number">1</span>,m)<span class="hljs-keyword">if</span>(_s[x][i]==<span class="hljs-string">'0'</span>)&#123;<br>s.a[i][i]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=i<span class="hljs-number">-1</span>;s.a[j][j]==<span class="hljs-number">1</span>;j--)s.a[j][i]=s.a[i][j]=<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">else</span> upd();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">mod</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">if</span>(x==y)&#123;<br>    <span class="hljs-keyword">int</span> l,r;<br>    <span class="hljs-keyword">for</span>(l=_y<span class="hljs-number">-1</span>;s.a[l][l]==<span class="hljs-number">1</span>;l--);l++;<br>    <span class="hljs-keyword">for</span>(r=_y+<span class="hljs-number">1</span>;s.a[r][r]==<span class="hljs-number">1</span>;r++);r--;<br>    <span class="hljs-keyword">if</span>(s.a[_y][_y]==<span class="hljs-number">1</span>)&#123;<br>inc(i,l,_y)inc(j,_y,r)s.a[i][j]=<span class="hljs-number">0</span>;<br>inc(i,_y,r)inc(j,l,_y)s.a[i][j]=<span class="hljs-number">0</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>inc(i,l,_y)inc(j,_y,r)s.a[i][j]=<span class="hljs-number">1</span>;<br>inc(i,_y,r)inc(j,l,_y)s.a[i][j]=<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(_x&lt;=mid)l-&gt;mod();<span class="hljs-keyword">else</span> r-&gt;mod();upd();<br>    &#125;<br>&#125;*root;<br><span class="hljs-function">node*<span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<span class="hljs-keyword">return</span> x==y?<span class="hljs-keyword">new</span> node(x,y):<span class="hljs-keyword">new</span> node(x,y,build(x,mid),build(mid+<span class="hljs-number">1</span>,y));&#125;<br><br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();m=read();<span class="hljs-keyword">int</span> _=read();<br>    inc(i,<span class="hljs-number">1</span>,n)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>,_s[i]+<span class="hljs-number">1</span>);<br>    root=build(<span class="hljs-number">1</span>,n);<br>    <span class="hljs-keyword">while</span>(_--)&#123;<br><span class="hljs-keyword">_t</span>=read();_x=read();_y=read();<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">_t</span>==<span class="hljs-number">1</span>)&#123;<br>    root-&gt;mod();<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    mat t;<br>    mem(t.a);t.n=<span class="hljs-number">1</span>;t.m=m;t.a[<span class="hljs-number">1</span>][_x]=<span class="hljs-number">1</span>;<br>    t=t*root-&gt;s;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,t.a[<span class="hljs-number">1</span>][_y]);<br>&#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hdu6566(树背包+轻链剖分)</title>
      <link href="/hdu6566/"/>
      <url>/hdu6566/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6566" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=6566</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定 $n$ 个点的树，每个节点有权值 $a<em>i$ 、$b_i$ ，选定独立点集 $S$ ，令 $A(S)=\sum</em>{i\in S} a<em>i$ ，$B(S)=\sum</em>{i\in S}b_i$ ，定义 $f(x)$ 为满足 $A(s)=x$ 的所有 $S$ 中最大的 $B(S)$ 的个数</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>好题。。</p><p>一个显然的解法是直接做树背包，然而复杂度是 $O(nm^2)$</p><p>发现背包合并的复杂度过大，所以需要将点依次加进背包中，所以考虑将树转化成序列，在 $DFS$ 序上做背包。。</p><p>对整棵树做轻链剖分，在 $DP$ 的时候先走轻儿子，设 $d[i][S][j]$ 为到第 $i$ 个点，状态为 $S$ ，背包容量为  $j$ 的最大的 $B(S)$ 及其个数</p><p>$S$ 表示的是 $i$ 到根路径上各个重链头的父亲和 $i$ 自己是否在独立集内，即每个链上都在转接点处保留当前点的状态，由于链的个数只有 $\log n$ 个，那么 $S$ 的大小也只有 $2^{\log n}=n$ 个</p><p>这个做法的巧妙之处就是，将转接点处的点的状态保存了下来，所以我们只要管当前重链的转移情况就可以了，然后合并的时候也只需要按我们所分的不同的情况直接取个 $MAX$ 即可。。</p><p>那么转移的时候要分 $4$ 种情况考虑</p><ol><li>从重链转移向轻儿子</li><li>沿着重链往下走</li><li>从轻儿子往重儿子转移</li><li>从轻儿子往轻儿子转移</li></ol><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 55</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 5005</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">10007</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br> <br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span>&#123;</span><span class="hljs-keyword">int</span> t;edge*next;&#125;e[NM&lt;&lt;<span class="hljs-number">1</span>],*h[NM],*o=e;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;o-&gt;t=y;o-&gt;next=h[x];h[x]=o++;&#125;<br><span class="hljs-keyword">int</span> n,m,a[NM],b[NM],_x,_y,ca,<span class="hljs-keyword">_t</span>;<br><span class="hljs-keyword">int</span> f[NM],size[NM],c[NM],id[NM],tot,son[NM],cnt[NM];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br>    size[x]=<span class="hljs-number">1</span>;<br>    link(x)<span class="hljs-keyword">if</span>(j-&gt;t!=f[x])&#123;<br>f[j-&gt;t]=x;<br>dfs1(j-&gt;t);<br>size[x]+=size[j-&gt;t];<br><span class="hljs-keyword">if</span>(size[son[x]]&lt;size[j-&gt;t])son[x]=j-&gt;t;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> t)</span></span>&#123;<br>    id[x]=++tot;c[tot]=x;cnt[tot]=t;<br>    link(x)<span class="hljs-keyword">if</span>(j-&gt;t!=f[x]&amp;&amp;j-&gt;t!=son[x])dfs2(j-&gt;t,t+<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span>(son[x])dfs2(son[x],t);<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">P</span>&#123;</span>ll x,y;&#125;d[<span class="hljs-number">2</span>][NM][nm],ans[nm];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">upd</span><span class="hljs-params">(P&amp;a,<span class="hljs-keyword">const</span> P b)</span></span>&#123;<span class="hljs-keyword">if</span>(b.y)<span class="hljs-keyword">if</span>(a.x&lt;b.x)a=b;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a.x==b.x)a.y+=b.y;&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">upd</span><span class="hljs-params">(P&amp;a,<span class="hljs-keyword">const</span> P b,<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> k)</span></span>&#123;<span class="hljs-keyword">if</span>(b.y)<span class="hljs-keyword">if</span>(a.x&lt;b.x+k)a=b,a.x+=k;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a.x==b.x+k)a.y+=b.y;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> _=read();<span class="hljs-keyword">while</span>(_--)&#123;<br>mem(son);tot=<span class="hljs-number">0</span>;mem(ans);mem(h);o=e;mem(f);mem(size);mem(c);mem(id);mem(cnt);mem(e);<br>n=read();m=read();<br>inc(i,<span class="hljs-number">1</span>,n)a[i]=read(),b[i]=read();<br>inc(i,<span class="hljs-number">2</span>,n)&#123;_x=read();_y=read();add(_x,_y);add(_y,_x);&#125;<br>dfs1(<span class="hljs-number">1</span>);dfs2(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br>mem(d[<span class="hljs-number">0</span>]);<br>d[<span class="hljs-keyword">_t</span>=<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>].y=<span class="hljs-number">1</span>;<br>inc(i,<span class="hljs-number">1</span>,n)&#123;<br>    <span class="hljs-keyword">_t</span>^=<span class="hljs-number">1</span>;mem(d[<span class="hljs-keyword">_t</span>]);<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> x=a[c[i]],y=b[c[i]];<br>    <span class="hljs-keyword">if</span>(f[c[i]]==c[i<span class="hljs-number">-1</span>])&#123;<br><span class="hljs-keyword">if</span>(cnt[i]==cnt[i<span class="hljs-number">-1</span>])&#123;<br>    inc(j,<span class="hljs-number">0</span>,succ(cnt[i])<span class="hljs-number">-1</span>)<span class="hljs-keyword">if</span>(j&amp;<span class="hljs-number">1</span>)&#123;<br>inc(k,x,m)upd(d[<span class="hljs-keyword">_t</span>][j][k],d[<span class="hljs-keyword">_t</span>^<span class="hljs-number">1</span>][j^<span class="hljs-number">1</span>][k-x],y);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>inc(k,<span class="hljs-number">0</span>,m)upd(d[<span class="hljs-keyword">_t</span>][j][k],d[<span class="hljs-keyword">_t</span>^<span class="hljs-number">1</span>][j][k]),upd(d[<span class="hljs-keyword">_t</span>][j][k],d[<span class="hljs-keyword">_t</span>^<span class="hljs-number">1</span>][j^<span class="hljs-number">1</span>][k]);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    inc(j,<span class="hljs-number">0</span>,succ(cnt[i])<span class="hljs-number">-1</span>)<span class="hljs-keyword">if</span>(j%<span class="hljs-number">4</span>==<span class="hljs-number">3</span>)<span class="hljs-keyword">continue</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(j&amp;<span class="hljs-number">1</span>)&#123;<br>inc(k,x,m)upd(d[<span class="hljs-keyword">_t</span>][j][k],d[<span class="hljs-keyword">_t</span>^<span class="hljs-number">1</span>][j&gt;&gt;<span class="hljs-number">1</span>][k-x],y);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>inc(k,<span class="hljs-number">0</span>,m)upd(d[<span class="hljs-keyword">_t</span>][j][k],d[<span class="hljs-keyword">_t</span>^<span class="hljs-number">1</span>][j&gt;&gt;<span class="hljs-number">1</span>][k]);<br>    &#125;<br>&#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">if</span>(cnt[i]&lt;cnt[i<span class="hljs-number">-1</span>])&#123;<br>    inc(j,<span class="hljs-number">0</span>,succ(cnt[i])<span class="hljs-number">-1</span>)<span class="hljs-keyword">if</span>(j&amp;<span class="hljs-number">1</span>)&#123;<br>inc(_j,((j^<span class="hljs-number">1</span>)&lt;&lt;(cnt[i<span class="hljs-number">-1</span>]-cnt[i])),(( j&lt;&lt;(cnt[i<span class="hljs-number">-1</span>]-cnt[i]) )<span class="hljs-number">-1</span>) )<br>    inc(k,x,m)upd(d[<span class="hljs-keyword">_t</span>][j][k],d[<span class="hljs-keyword">_t</span>^<span class="hljs-number">1</span>][_j][k-x],y);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>inc(_j,(j&lt;&lt;(cnt[i<span class="hljs-number">-1</span>]-cnt[i]) ),(( (j+<span class="hljs-number">2</span>) &lt;&lt; (cnt[i<span class="hljs-number">-1</span>]-cnt[i]) )<span class="hljs-number">-1</span> ) )<br>    inc(k,<span class="hljs-number">0</span>,m)upd(d[<span class="hljs-keyword">_t</span>][j][k],d[<span class="hljs-keyword">_t</span>^<span class="hljs-number">1</span>][_j][k]);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    inc(j,<span class="hljs-number">0</span>,succ(cnt[i])<span class="hljs-number">-1</span>)<span class="hljs-keyword">if</span>(j%<span class="hljs-number">4</span>==<span class="hljs-number">3</span>)<span class="hljs-keyword">continue</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(j&amp;<span class="hljs-number">1</span>)&#123;<br>inc(_j,(j^<span class="hljs-number">1</span>),j)<br>    inc(k,x,m)upd(d[<span class="hljs-keyword">_t</span>][j][k],d[<span class="hljs-keyword">_t</span>^<span class="hljs-number">1</span>][_j][k-x],y);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>inc(_j,j,(j^<span class="hljs-number">1</span>))<br>    inc(k,<span class="hljs-number">0</span>,m)upd(d[<span class="hljs-keyword">_t</span>][j][k],d[<span class="hljs-keyword">_t</span>^<span class="hljs-number">1</span>][_j][k]);<br>    &#125;<br>&#125;<br>    &#125;<br>&#125;<br>inc(j,<span class="hljs-number">0</span>,succ(cnt[n])<span class="hljs-number">-1</span>)inc(k,<span class="hljs-number">1</span>,m)upd(ans[k],d[<span class="hljs-keyword">_t</span>][j][k]);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"Case %d:\n"</span>,++ca);<br>inc(i,<span class="hljs-number">1</span>,m)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld%c"</span>,ans[i].y,<span class="hljs-string">" \n"</span>[i==m]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 树链剖分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>luogu4827(下降幂函数)</title>
      <link href="/luogu4827/"/>
      <url>/luogu4827/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.org/problemnew/show/P4827" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P4827</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>好题！</p><p>$k=1$ 的情况就是傻逼题了，那么考虑沿着这个思路思考。。</p><p>发现 $(d+1)^k$ 可以用二项式展开，这样我们可以维护 $d^1,d^2,d^3..d^k$ ，然后每次转移为 $O(k)$ ，复杂度为 $O(nk^2)$ 。。</p><p>感觉好像会 $T$ 。。因为展开之后维护了很多多余的东西。。</p><p>这时候考虑使用下降幂来展开，会发现下降幂的差分方程非常优秀，这也是具体数学上强调的。。</p><script type="math/tex; mode=display">d^{\underline{k}}=(d-1)^{\underline{k}}+k(d-1)^{\underline{k-1}}</script><p>然后我们考虑维护下降幂的话，转移复杂度就变成 $O(1)$ ，总复杂度 $O(nk)$ ，解决！</p><p>最后求答案利用斯特林数即可。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 50005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 100005</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">10007</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br> <br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span>&#123;</span><span class="hljs-keyword">int</span> t;edge*next;&#125;e[nm],*h[NM],*o=e;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;o-&gt;t=y;o-&gt;next=h[x];h[x]=o++;&#125;<br><span class="hljs-keyword">int</span> n,m,_x,_y,st[<span class="hljs-number">155</span>][<span class="hljs-number">155</span>],d[NM][<span class="hljs-number">155</span>],p[NM][<span class="hljs-number">155</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> f)</span></span>&#123;<br>    link(x)<span class="hljs-keyword">if</span>(j-&gt;t!=f)&#123;<br>dfs1(j-&gt;t,x);<br>d[x][<span class="hljs-number">0</span>]+=d[j-&gt;t][<span class="hljs-number">0</span>];d[x][<span class="hljs-number">0</span>]%=inf;<br>inc(i,<span class="hljs-number">1</span>,m)d[x][i]+=d[j-&gt;t][i]+i*d[j-&gt;t][i<span class="hljs-number">-1</span>],d[x][i]%=inf;<br>    &#125;<br>    d[x][<span class="hljs-number">0</span>]++;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> f)</span></span>&#123;<br>    inc(i,<span class="hljs-number">0</span>,m)p[x][i]+=d[x][i],d[x][i]%=inf;<br>    link(x)<span class="hljs-keyword">if</span>(j-&gt;t!=f)&#123;<br>p[j-&gt;t][<span class="hljs-number">0</span>]=p[x][<span class="hljs-number">0</span>]-d[j-&gt;t][<span class="hljs-number">0</span>]+inf;p[j-&gt;t][<span class="hljs-number">0</span>]%=inf;<br>p[j-&gt;t][<span class="hljs-number">1</span>]=((p[x][<span class="hljs-number">1</span>]-d[j-&gt;t][<span class="hljs-number">1</span>]-d[j-&gt;t][<span class="hljs-number">0</span>])+(p[x][<span class="hljs-number">0</span>]-d[j-&gt;t][<span class="hljs-number">0</span>]))%inf+inf;p[j-&gt;t][<span class="hljs-number">1</span>]%=inf;<br>inc(i,<span class="hljs-number">2</span>,m)p[j-&gt;t][i]=((p[x][i]-d[j-&gt;t][i]-i*d[j-&gt;t][i<span class="hljs-number">-1</span>])%inf+i*(p[x][i<span class="hljs-number">-1</span>]-d[j-&gt;t][i<span class="hljs-number">-1</span>]-(i<span class="hljs-number">-1</span>)*d[j-&gt;t][i<span class="hljs-number">-2</span>]%inf))%inf+inf,p[j-&gt;t][i]%=inf;<br>dfs2(j-&gt;t,x);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();m=read();<br>    inc(i,<span class="hljs-number">2</span>,n)&#123;_x=read();_y=read();add(_x,_y);add(_y,_x);&#125;<br>    dfs1(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br>    dfs2(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br>    st[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    inc(i,<span class="hljs-number">2</span>,m)inc(j,<span class="hljs-number">1</span>,m)st[i][j]=(st[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>]+j*st[i<span class="hljs-number">-1</span>][j])%inf;<br>    inc(i,<span class="hljs-number">1</span>,n)&#123;<br><span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;<br>inc(j,<span class="hljs-number">0</span>,m)ans+=st[m][j]*p[i][j],ans%=inf;;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,ans);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 组合数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bzoj4555(斯特林数)</title>
      <link href="/bzoj4555/"/>
      <url>/bzoj4555/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=4555" target="_blank" rel="noopener">https://www.lydsy.com/JudgeOnline/problem.php?id=4555</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>还是用 $S_2$ 的卷积展开</p><script type="math/tex; mode=display">\begin{aligned}\sum_{i=0}^n\sum_{j=0}^i{i\brace j}2^jj!&=\sum_{i=0}^n\sum_{j=0}^n{i\brace j}2^jj!\\&=\sum_{j=0}^n\sum_{i=0}^n{i\brace j}2^jj!\\&=\sum_{j=0}^n2^jj!\sum_{i=0}^n\sum_{k=0}^j\frac{(-1)^k}{k!}\frac{(j-k)^i}{(j-k)!}\\&=\sum_{j=0}^n2^jj!\sum_{k=0}^j\frac{(-1)^k}{k!}\frac{\sum_{i=0}^n(j-k)^i}{(j-k)!}\\&=\sum_{j=0}^n2^jj!\sum_{k=0}^j\frac{(-1)^k}{k!}\frac{1-(j-k)^n}{(1-(j-k))(j-k)!}\end{aligned}</script><p>然后做个卷积就可以了。。</p><p>等比数列求和那里需要特判 $0$ 和 $1$ 的情况。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 270005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 100005</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">998244353</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br> <br><br><span class="hljs-keyword">int</span> n;<br>ll a[NM],b[NM],inv[NM],invp[NM],p[NM],ans;<br><br><span class="hljs-keyword">int</span> lim,bit,rev[NM],W[NM],w[NM],invn;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reduce</span><span class="hljs-params">(ll&amp;x)</span></span>&#123;x+=x&gt;&gt;<span class="hljs-number">63</span>&amp;inf;&#125;<br><span class="hljs-function">ll <span class="hljs-title">qpow</span><span class="hljs-params">(ll x,ll t)</span></span>&#123;<br>    ll s=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(;t;t&gt;&gt;=<span class="hljs-number">1</span>,x=x*x%inf)<span class="hljs-keyword">if</span>(t&amp;<span class="hljs-number">1</span>)s=s*x%inf;<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-keyword">int</span> m)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(lim=<span class="hljs-number">1</span>,bit=<span class="hljs-number">0</span>;lim&lt;m;lim&lt;&lt;=<span class="hljs-number">1</span>)bit++;invn=qpow(lim,inf<span class="hljs-number">-2</span>);<br>    inc(i,<span class="hljs-number">0</span>,lim<span class="hljs-number">-1</span>)rev[i]=(rev[i&gt;&gt;<span class="hljs-number">1</span>]&gt;&gt;<span class="hljs-number">1</span>)|((i&amp;<span class="hljs-number">1</span>)&lt;&lt;(bit<span class="hljs-number">-1</span>));<br>    ll t=qpow(<span class="hljs-number">3</span>,(inf<span class="hljs-number">-1</span>)/lim);W[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    inc(i,<span class="hljs-number">1</span>,lim)W[i]=W[i<span class="hljs-number">-1</span>]*t%inf;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fft</span><span class="hljs-params">(ll*a,<span class="hljs-keyword">int</span> f=<span class="hljs-number">0</span>)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> n=lim;<br>    inc(i,<span class="hljs-number">1</span>,n<span class="hljs-number">-1</span>)<span class="hljs-keyword">if</span>(i&lt;rev[i])swap(a[i],a[rev[i]]);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">1</span>;k&lt;n;k&lt;&lt;=<span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">int</span> t=n/k&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>,j=<span class="hljs-number">0</span>;i&lt;k;i++,j+=t)w[i]=W[f?n-j:j];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i+=k&lt;&lt;<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;k;j++)&#123;<br>ll x=a[i+j],y=w[j]*a[i+j+k]%inf;<br>reduce(a[i+j]=x+y-inf);reduce(a[i+j+k]=x-y);<br>    &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(f)inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)a[i]=a[i]*invn%inf;<br>&#125;<br><br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();<br>    p[<span class="hljs-number">0</span>]=p[<span class="hljs-number">1</span>]=invp[<span class="hljs-number">0</span>]=invp[<span class="hljs-number">1</span>]=inv[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    inc(i,<span class="hljs-number">2</span>,n)p[i]=p[i<span class="hljs-number">-1</span>]*i%inf,inv[i]=inv[inf%i]*(inf-inf/i)%inf,invp[i]=invp[i<span class="hljs-number">-1</span>]*inv[i]%inf;<br>    inc(i,<span class="hljs-number">0</span>,n)<span class="hljs-keyword">if</span>(i&amp;<span class="hljs-number">1</span>)a[i]=inf-invp[i];<span class="hljs-keyword">else</span> a[i]=invp[i];<br>    b[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;b[<span class="hljs-number">1</span>]=n+<span class="hljs-number">1</span>;inc(i,<span class="hljs-number">2</span>,n)b[i]=(qpow(i,n+<span class="hljs-number">1</span>)<span class="hljs-number">-1</span>+inf)%inf*inv[i<span class="hljs-number">-1</span>]%inf*invp[i]%inf;<br>    init(n+n+<span class="hljs-number">1</span>);<br>    fft(a);fft(b);<br>    inc(i,<span class="hljs-number">0</span>,lim<span class="hljs-number">-1</span>)a[i]=a[i]*b[i]%inf;<br>    fft(a,<span class="hljs-number">1</span>);<br>    inc(i,<span class="hljs-number">0</span>,n)ans+=qpow(<span class="hljs-number">2</span>,i)*p[i]%inf*a[i]%inf,ans%=inf;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 组合数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>comet-7-D(斜率优化)</title>
      <link href="/comet-7-D/"/>
      <url>/comet-7-D/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.cometoj.com/contest/52/problem/D?problem_id=2417" target="_blank" rel="noopener">https://www.cometoj.com/contest/52/problem/D?problem_id=2417</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>可以发现 $A$ 、$B$ 的取值只能是已有的 $x$ ，那么就变成了离散的题了</p><p>设 $A=x_j$ 、$B=x_i$ ，然后令 $f_i$ 为 $i$ 之前产生的贡献，$g_i$ 为 $i$ 之后产生的贡献</p><p>然后答案为</p><script type="math/tex; mode=display">\min_{i\le j}f_{i-1}+(x_i-x_j)^2+g_{j+1}</script><p>直接枚举是 $O(n^2)$ 的，需要优化</p><p>很容易想到先枚举 $i$ 再来快速定 $j$ ，那么有</p><script type="math/tex; mode=display">f_{i-1}+x_i^2+\min_{i\le j}g_{j+1}+x_j^2-2x_ix_j</script><p>比较棘手的应该是交叉项了，这个可以利用斜率优化，我们设两个决策点 $j&lt;k$ ，有</p><script type="math/tex; mode=display">\begin{aligned}g_{j+1}+x_j^2-2x_ix_j&<g_{k+1}+x_k^2-2x_ix_k\\\frac{g_{j+1}+x_j^2-g_{k+1}-x_k^2 }{x_j-x_k}&>2x_i\end{aligned}</script><p>那么如果按 $x_i$ 递增枚举，我们只需维护一个上凸包即可。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 200005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 100005</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">5e18</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br> <br><br><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">P</span>&#123;</span><br>    ll x,y;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-keyword">const</span> P&amp;o)<span class="hljs-keyword">const</span>&#123;<span class="hljs-keyword">return</span> x&lt;o.x;&#125;<br>&#125;a[NM];<br><span class="hljs-keyword">int</span> n,q[NM],qh,qt;<br>ll b[NM],c[NM],ans;<br><br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">slope</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1.0</span>*(b[x<span class="hljs-number">-1</span>]-b[y<span class="hljs-number">-1</span>])/(a[x].x-a[y].x)+a[x].x+a[y].x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();inc(i,<span class="hljs-number">1</span>,n)a[i].x=read(),a[i].y=read();<br>    sort(a+<span class="hljs-number">1</span>,a+<span class="hljs-number">1</span>+n);<br>    inc(i,<span class="hljs-number">1</span>,n)b[i]=b[i<span class="hljs-number">-1</span>]+(a[i].y&lt;<span class="hljs-number">0</span>?-a[i].y:<span class="hljs-number">0</span>);<br>    dec(i,n,<span class="hljs-number">1</span>)c[i]=c[i+<span class="hljs-number">1</span>]+(a[i].y&gt;<span class="hljs-number">0</span>?a[i].y:<span class="hljs-number">0</span>);<br>    ans=inf;<br>    qh=<span class="hljs-number">0</span>;qt=<span class="hljs-number">-1</span>;<br>    inc(i,<span class="hljs-number">1</span>,n)&#123;<br><span class="hljs-keyword">while</span>(qh&lt;qt&amp;&amp;slope(q[qt<span class="hljs-number">-1</span>],q[qt])&gt;slope(q[qt<span class="hljs-number">-1</span>],i))qt--;<br>q[++qt]=i;<br><span class="hljs-keyword">while</span>(qh&lt;qt&amp;&amp;slope(q[qh],q[qh+<span class="hljs-number">1</span>])&lt;<span class="hljs-number">2</span>*a[i].x)qh++;<br>ans=min(ans,b[q[qh]<span class="hljs-number">-1</span>]+sqr(a[q[qh]].x-a[i].x)+c[i+<span class="hljs-number">1</span>]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>*<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cf961G(第二类斯特林数)</title>
      <link href="/cf961G/"/>
      <url>/cf961G/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://codeforces.com/contest/961/problem/G" target="_blank" rel="noopener">https://codeforces.com/contest/961/problem/G</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>有 $n$ 个物品，每个物品有权值 $w_i$ </p><p>定义一个集合 $S$ 的权值为 $W(S)=|S|\sum_{x\in S}w_x$ </p><p>定义一个划分的 权值为 $W’(R)=\sum_{S\subset R}W(S)$</p><p>求将 $n$ 个物品划分成 $m$ 个集合的所有方案的权值和</p><p>$n,m\le2e5$</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>直接考虑单点贡献，有</p><script type="math/tex; mode=display">\begin{aligned}&\sum_{i=1}^{n}w_i\sum_{k=1}^{n-m}(k+1)\binom{n-1}{k}{n-k-1\brace m-1}\\=&\sum w (\sum \binom{n-1}{k}{n-k-1\brace m-1}+\sum k\binom{n-1}{k}{n-k-1\brace m-1})\end{aligned}</script><p>如果把式中的 $k+1$ 换成 $1$ ，事实上就是在求总方案数了，所以可以得到</p><script type="math/tex; mode=display">\sum\binom{n-1}{k}{n-k-1\brace m-1}={n\brace m}</script><p>这个式子可以由这个题的场景推导出来，也可以用公式，后面会给出证明</p><p>然后代进去</p><script type="math/tex; mode=display">\begin{aligned}&\sum w ({n\brace m}+\sum k\binom{n-2}{k-1}\frac{n-1}{k}{n-k-1\brace m-1})\\=&\sum w({n\brace m}+(n-1)\sum \binom{n-2}{k-1} {n-2-(k-1)\brace m-1})\\=&\sum w({ {n}\brace{m}} +(n-1){n-1\brace m})\end{aligned}</script><p>然后只要求两个斯特林数就可以了。。这个直接利用 $S_2$ 的卷积公式 $O(m)$ 求就可以了。。呃。。好像有个快速幂，那就 $O(mlogn)$ ，问题不大。。</p><p><br></p><h3 id="公式证明"><a href="#公式证明" class="headerlink" title="公式证明"></a>公式证明</h3><p>对刚才提到的公式，我们变成一个比较简洁的形式</p><script type="math/tex; mode=display">\sum_{k=0}^n\binom{n}{k}{m-k\brace m-1}={n+1\brace m}</script><p>感觉就像是先给第一个集合选 $k$ 个数再给后面的集合划分，然后答案是 $n\brace m$ ？其实不然，这样做会有一个问题就是会把第一个集合和其他集合形成相对顺序，然后会导致重复计数</p><p>这个可以用 $S_2$ 的卷积展开来推导</p><script type="math/tex; mode=display">\begin{aligned}\sum_{k=0}^n\binom{n}{k}{m-k\brace m-1}&=\sum_{k=0}^n\binom{n}{k} \sum_{j=0}^{m-1}\frac{(-1)^j}{j!}\frac{(m-1-j)^{n-k}}{(m-1-j)!}\\&=\sum_{j=0}^{m-1}\frac{(-1)^j}{j!(m-1-j)!}\sum_{k=0}^n\binom{n}{k}(m-1-j)^{n-k}\\&=\sum_{j=0}^{m-1}\frac{(-1)^j}{j!(m-1-j)!}(m-j)^n\\&=\sum_{j=0}^{m-1}\frac{(-1)^j}{j!}\frac{(m-j)^{n+1}}{(m-j)!}\\&={n+1\brace m}\end{aligned}</script><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 200005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 400005</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br> <br><br><br><br><br><span class="hljs-keyword">int</span> n,m;<br>ll ans,s,p[NM],inv[NM],invp[NM];<br><br><span class="hljs-function">ll <span class="hljs-title">qpow</span><span class="hljs-params">(ll x,ll t)</span></span>&#123;<br>    ll s=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(;t;t&gt;&gt;=<span class="hljs-number">1</span>,x=sqr(x)%inf)<span class="hljs-keyword">if</span>(t&amp;<span class="hljs-number">1</span>)s=s*x%inf;<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();m=read();<br>    inc(i,<span class="hljs-number">1</span>,n)ans+=read(),ans%=inf;<br>    p[<span class="hljs-number">0</span>]=p[<span class="hljs-number">1</span>]=invp[<span class="hljs-number">1</span>]=invp[<span class="hljs-number">0</span>]=inv[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    inc(i,<span class="hljs-number">2</span>,m)inv[i]=inv[inf%i]*(inf-inf/i)%inf,invp[i]=invp[i<span class="hljs-number">-1</span>]*inv[i]%inf,p[i]=p[i<span class="hljs-number">-1</span>]*i%inf;<br>    inc(k,<span class="hljs-number">0</span>,m)&#123;<br>ll t=qpow(m-k,n<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">if</span>(k&amp;<span class="hljs-number">1</span>)s+=inf-invp[k]*invp[m-k]%inf*t%inf*(m-k)%inf,s%=inf;<br><span class="hljs-keyword">else</span> s+=invp[k]*invp[m-k]%inf*t%inf*(m-k)%inf,s%=inf;<br><span class="hljs-keyword">if</span>(k&amp;<span class="hljs-number">1</span>)s+=inf-invp[k]*invp[m-k]%inf*t%inf*(n<span class="hljs-number">-1</span>)%inf,s%=inf;<br><span class="hljs-keyword">else</span> s+=invp[k]*invp[m-k]%inf*t%inf*(n<span class="hljs-number">-1</span>)%inf,s%=inf;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>*<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans*s%inf);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 组合数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cf932E(第二类斯特林数)</title>
      <link href="/cf932E/"/>
      <url>/cf932E/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://codeforces.com/contest/932/problem/E" target="_blank" rel="noopener">https://codeforces.com/contest/932/problem/E</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><script type="math/tex; mode=display">\sum_{i=1}^n\binom{n}{i}i^k(n\le10^9,k\le5000)</script><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>发现 $n$ 和 $k$ 的差距很大，所以要尽可能去掉 $n$ ，利用斯特林数的性质，得</p><script type="math/tex; mode=display">\begin{aligned}\sum_{i=1}^n\binom{n}{i}i^k&=\sum_{i=1}^n\binom{n}{i}\sum_{j=1}^k{k\brace j}i^{\underline{j}}\\&=\sum_{j=1}^k{k\brace j}\sum_{i=1}^n\binom{n}{i}\binom{i}{j}j!\\&=\sum_{j=1}^k{k\brace j}\sum_{i=1}^{n}\binom{n}{j}\binom{n-j}{i-j}j!\\&=\sum_{j=1}^k{k\brace j}n^{\underline{j}}\sum\binom{n-j}{i-j}\\&=\sum_{j=1}^k{k\brace j}n^{\underline{j}}2^{n-j}\end{aligned}</script><p>$k$ 那么小直接 $k^2$ 暴力预处理就够了</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 140005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 400005</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br> <br><br><span class="hljs-keyword">int</span> n,m;<br>ll d[NM],ans;<br><br><span class="hljs-function">ll <span class="hljs-title">qpow</span><span class="hljs-params">(ll x,ll t)</span></span>&#123;<br>    ll s=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(;t;t&gt;&gt;=<span class="hljs-number">1</span>,x=sqr(x)%inf)<span class="hljs-keyword">if</span>(t&amp;<span class="hljs-number">1</span>)s=s*x%inf;<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();m=read();<br>    d[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    inc(i,<span class="hljs-number">2</span>,m)dec(j,i,<span class="hljs-number">1</span>)d[j]=(j*d[j]+d[j<span class="hljs-number">-1</span>])%inf;<br>    ll t=<span class="hljs-number">1</span>;<br>    m=min(n,m);<br>    inc(i,<span class="hljs-number">1</span>,m)&#123;<br>t=t*(n-i+<span class="hljs-number">1</span>)%inf;<br>ans+=d[i]*qpow(<span class="hljs-number">2</span>,n-i)%inf*t%inf;<br>ans%=inf;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>*<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 组合数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cf960G(DP-&gt;第一类斯特林数)</title>
      <link href="/cf960G/"/>
      <url>/cf960G/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://codeforces.com/problemset/problem/960/G" target="_blank" rel="noopener">https://codeforces.com/problemset/problem/960/G</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>设前缀最大点 $i$ 满足 $\forall j&lt;i,a_i&lt;a_i$ ，后缀最大点同理</p><p>求 $n$ 的排列中满足前缀最大点的个数为 $a$ ，后缀最大点的个数为 $b$ 的个数</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>考虑前缀的情况，那么显然可以做个 $DP$ ，设 $d[i][j]$ 为前 $i$ 个数中有 $j$ 个最大点的方案数</p><script type="math/tex; mode=display">d[i][j]=d[i-1][j-1]+(i-1)d[i-1][j]</script><p>显然 $d[i][j]={i\brack j}$ ，后缀同理</p><p>然后枚举全局最大点，因为这个最大点必然是最后一个前缀最大点，也是第一个后缀最大点，那么我们利用该点把序列分割成两部分，分别计数，即</p><script type="math/tex; mode=display">\sum_{i=1}^n{i-1\brack a-1}{n-i\brack b-1}={n-1\brack a+b-2}\binom{a+b-2}{a-1}</script><p>这个公式在具体数学上有，形象理解就是把轮换分成两部分，枚举个数分别放进两边</p><p>然后这个斯特林数可以用分治在 $O(nlogn)$ 时间内求解出来，推导见<a href="/number">这里</a></p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 140005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 400005</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">998244353</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br> <br><br><span class="hljs-keyword">int</span> n,A,B;<br>ll st[NM],a[NM],b[NM];<br>ll inv[NM],invp[NM],p[NM];<br><br><span class="hljs-function">ll <span class="hljs-title">qpow</span><span class="hljs-params">(ll x,ll t)</span></span>&#123;<br>    ll s=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(;t;t&gt;&gt;=<span class="hljs-number">1</span>,x=sqr(x)%inf)<span class="hljs-keyword">if</span>(t&amp;<span class="hljs-number">1</span>)s=s*x%inf;<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">reduce</span><span class="hljs-params">(ll&amp;x)</span></span>&#123;x+=x&gt;&gt;<span class="hljs-number">63</span>&amp;inf;&#125;<br><br>ll invn,w[NM],W[NM];<br><span class="hljs-keyword">int</span> rev[NM],bit,lim;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">clear</span><span class="hljs-params">(ll*a,ll*b)</span></span>&#123;<span class="hljs-keyword">if</span>(a&lt;b)<span class="hljs-built_in">memset</span>(a,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(ll)*(b-a));&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-keyword">int</span> m)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(lim=<span class="hljs-number">1</span>,bit=<span class="hljs-number">0</span>;lim&lt;m;lim&lt;&lt;=<span class="hljs-number">1</span>)bit++;invn=qpow(lim,inf<span class="hljs-number">-2</span>);<br>    inc(i,<span class="hljs-number">0</span>,lim<span class="hljs-number">-1</span>)rev[i]=(rev[i&gt;&gt;<span class="hljs-number">1</span>]&gt;&gt;<span class="hljs-number">1</span>)|((i&amp;<span class="hljs-number">1</span>)&lt;&lt;(bit<span class="hljs-number">-1</span>));<br>    ll t=qpow(<span class="hljs-number">3</span>,(inf<span class="hljs-number">-1</span>)/lim);W[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    inc(i,<span class="hljs-number">1</span>,lim)W[i]=W[i<span class="hljs-number">-1</span>]*t%inf;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fft</span><span class="hljs-params">(ll*a,<span class="hljs-keyword">int</span> f=<span class="hljs-number">0</span>)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> n=lim;<br>    inc(i,<span class="hljs-number">1</span>,n<span class="hljs-number">-1</span>)<span class="hljs-keyword">if</span>(i&lt;rev[i])swap(a[i],a[rev[i]]);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">1</span>;k&lt;n;k&lt;&lt;=<span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">int</span> t=n/k&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>,j=<span class="hljs-number">0</span>;i&lt;k;i++,j+=t)w[i]=W[f?n-j:j];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i+=k&lt;&lt;<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;k;j++)&#123;<br>    ll x=a[i+j],y=w[j]*a[i+j+k]%inf;<br>    reduce(a[i+j]=x+y-inf);reduce(a[i+j+k]=x-y);<br>&#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(f)inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)a[i]=a[i]*invn%inf;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">stling</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(n==<span class="hljs-number">0</span>)&#123;st[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<span class="hljs-keyword">return</span>;&#125;<br>    <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>)&#123;st[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;st[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<span class="hljs-keyword">return</span>;&#125;<br>    <span class="hljs-keyword">int</span> m=n&gt;&gt;<span class="hljs-number">1</span>;<br>    stling(m);<br>    inc(i,<span class="hljs-number">0</span>,m)a[i]=st[i]*p[i]%inf;<br>    b[m]=<span class="hljs-number">1</span>;dec(i,m<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>)b[i]=b[i+<span class="hljs-number">1</span>]*m%inf*inv[m-i]%inf;<br>    init(n+<span class="hljs-number">1</span>);<br>    clear(a+m+<span class="hljs-number">1</span>,a+lim);clear(b+<span class="hljs-number">1</span>+m,b+lim);<br>    fft(b);fft(a);<br>    inc(i,<span class="hljs-number">0</span>,lim<span class="hljs-number">-1</span>)b[i]=a[i]*b[i]%inf;<br>    fft(b,<span class="hljs-number">1</span>);<br>    copy(b+m,b+lim,b);clear(b+lim-m,b+lim);<br>    inc(i,<span class="hljs-number">0</span>,m)b[i]=b[i]*invp[i]%inf;<br>    fft(b);fft(st);<br>    inc(i,<span class="hljs-number">0</span>,lim<span class="hljs-number">-1</span>)st[i]=st[i]*b[i]%inf;;<br>    fft(st,<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span>(n&amp;<span class="hljs-number">1</span>)dec(i,n,<span class="hljs-number">1</span>)reduce(st[i]=(n<span class="hljs-number">-1</span>)*st[i]%inf-inf+st[i<span class="hljs-number">-1</span>]);<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();A=read();B=read();<br>    inv[<span class="hljs-number">1</span>]=invp[<span class="hljs-number">1</span>]=invp[<span class="hljs-number">0</span>]=p[<span class="hljs-number">0</span>]=p[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    inc(i,<span class="hljs-number">2</span>,n)inv[i]=inv[inf%i]*(inf-inf/i)%inf,invp[i]=invp[i<span class="hljs-number">-1</span>]*inv[i]%inf,p[i]=p[i<span class="hljs-number">-1</span>]*i%inf;<br>    stling(n<span class="hljs-number">-1</span>);<br>    <span class="hljs-comment">//inc(i,0,n-1)printf("%lld ",st[i]);putchar('\n');</span><br>    ll ans=st[A+B<span class="hljs-number">-2</span>]*p[A+B<span class="hljs-number">-2</span>]%inf*invp[A<span class="hljs-number">-1</span>]%inf*invp[B<span class="hljs-number">-1</span>]%inf;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>*<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 组合数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>组合数学笔记</title>
      <link href="/number/"/>
      <url>/number/</url>
      
        <content type="html"><![CDATA[<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://rqy.moe/Algorithms/generating-function/" target="_blank" rel="noopener">https://rqy.moe/Algorithms/generating-function/</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>题做的少，也不造组合数学主要考点在哪，就在这里记一下(东抄抄西摘摘)自己不会且感觉比较有价值的东西</p><p><del>如果被rqy发现他不会打窝把</del></p><h2 id="二项式反演"><a href="#二项式反演" class="headerlink" title="二项式反演"></a>二项式反演</h2><p>这个知识点本身不难。。只是窝的题做得比较少。。</p><h3 id="基本内容"><a href="#基本内容" class="headerlink" title="基本内容"></a>基本内容</h3><p>如果</p><script type="math/tex; mode=display">g(n)=\sum_{i=0}^n\binom{n}{i}f(i)</script><p>则</p><script type="math/tex; mode=display">f(n)=\sum_{i=0}^n(-1)^{n-i}\binom nif(i)</script><h4 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h4><p>基于 $\sum(-1)^i \binom ni=[n=1]$ ，有</p><script type="math/tex; mode=display">\begin{aligned}f(n)=&\sum_{i=0}^n[n=i]\binom nif(i)\\=&\sum_{i=0}^n\sum_{j=0}^{n-i}(-1)^j\binom{n-i}jf(i)\\=&\sum_{j=0}^n(-1)^j\sum_{i=0}^{n-j}\binom ni\binom{n-i}jf(i)\\=&\sum_{j=0}^n(-1)^j\sum_{i=0}^{n-j}\binom nj \binom {n-j}if(i)\\=&\sum_{j=0}^n(-1)^j\binom njg(n-j)\\=&\sum_{j=0}^n (-1)^{n-j}\binom njg(j)\end{aligned}</script><h3 id="推论"><a href="#推论" class="headerlink" title="推论"></a>推论</h3><p>这个公式有一个更优美的形式<del>(但是好像没什么卵用)</del></p><p>将 $f(n)\rightarrow(-1)^nf(n)$ ，可以得到</p><p>若</p><script type="math/tex; mode=display">g(n)=\sum_{i=0}^n(-1)^i\binom nif(i)</script><p>则</p><script type="math/tex; mode=display">f(n)=\sum_{i=0}^n(-1)^i\binom nig(i)</script><p><br></p><p>还有另一个方向的二项式反演：</p><p>若</p><script type="math/tex; mode=display">g(n)=\sum_{i\ge n}(-1)^{i}\binom in f(i)</script><p>则</p><script type="math/tex; mode=display">f(n)=\sum_{i\ge n}(-1)^{i}\binom in g(i)</script><h4 id="证明-1"><a href="#证明-1" class="headerlink" title="证明"></a>证明</h4><p>好像网上都没有找到证明，这里就写一下。。</p><p>同样的方法</p><script type="math/tex; mode=display">\begin{aligned}f(n)=&\sum_{i\ge n}(-1)^{i-n}\binom in[i=n]f(i)\\=&\sum_{i\ge n}(-1)^{i-n}\binom in\sum_{j=0}^{i-n}(-1)^j\binom{i-n}j f(i)\\=&\sum_{j\ge 0}\sum_{i\ge n+j}(-1)^{i-n}(-1)^j\binom in\binom{i-n}jf(i)\\=&\sum_{j\ge n}\sum_{i\ge j}(-1)^{i-n}(-1)^{j-n} \binom in\binom{i-n}{j-n}f(i)\\=&\sum_{j\ge n}\sum_{i\ge j}(-1)^{i+j}\binom ij \binom jnf(i)\\=&\sum_{j\ge n}(-1)^j\binom jn\sum_{i\ge j}(-1)^i\binom ijf(i)\\=&\sum_{j\ge n}(-1)^j\binom jng(j)\end{aligned}</script><p><br></p><p><br></p><p><br></p><p><br></p><h2 id="生成函数"><a href="#生成函数" class="headerlink" title="生成函数"></a>生成函数</h2><h3 id="普通型生成函数-OGF"><a href="#普通型生成函数-OGF" class="headerlink" title="普通型生成函数(OGF)"></a>普通型生成函数(OGF)</h3><p>普通型生成函数($ordinary$​ $generating$ $function$，下称 $OGF$ )的形式大致如下：</p><p>对数列 $f=f_0,f_1,f_2… $ ，其生成函数为</p><script type="math/tex; mode=display">F(x)=\sum_{k=1}^{\infty}f_kx^k</script><h4 id="常见的-OGF"><a href="#常见的-OGF" class="headerlink" title="常见的 $OGF$"></a>常见的 $OGF$</h4><div class="table-container"><table><thead><tr><th style="text-align:left"><strong>数列</strong></th><th><strong>OGF</strong></th></tr></thead><tbody><tr><td style="text-align:left">$<1,0,0,...>$</1,0,0,...></td><td>$1$</td></tr><tr><td style="text-align:left">$<1,1,1,...>$</1,1,1,...></td><td>$\frac{1}{1-x}$</td></tr><tr><td style="text-align:left">$<1,2,3,...>$</1,2,3,...></td><td>$\frac{1}{(1-x)^2}$</td></tr><tr><td style="text-align:left">$<1,-1,1,-1,...>$</1,-1,1,-1,...></td><td>$\frac{1}{1+x}$</td></tr><tr><td style="text-align:left">$<1,2,1,0,0,...>$</1,2,1,0,0,...></td><td>$(1+x)^2$</td></tr><tr><td style="text-align:left">$<1,4,6,4,1,0,0,...>$</1,4,6,4,1,0,0,...></td><td>$(1+x)^3$</td></tr></tbody></table></div><h4 id="OGF-的性质"><a href="#OGF-的性质" class="headerlink" title="$OGF$ 的性质"></a>$OGF$ 的性质</h4><script type="math/tex; mode=display">\begin{aligned}\alpha F(x)+\beta G(x)&=\sum_n(\alpha f_n+\beta g_n)x^n\\x^mF(x)&=\sum_n[n\geq m]f_{n-m}x^n\\\frac{F(x)-\sum_{i=0}^{m-1}f_ix^i}{x^m}&=\sum_nf_{n+m}x^n\\F(cx)&=\sum_nc^nf_nx^n\\F^\prime(x)&=\sum_n(n+1)f_{n+1}x^n\\\int_0^xF(t)\mathrm{d}t&=\sum_n[n>0]\frac{f_{n-1}}nx^n\\F(x)G(x)&=\sum_n\left(\sum_{i=0}^nf_ig_{n-i}\right)x^n\end{aligned}</script><p>性质都是多项式的性质，比较好记</p><p><br></p><p><br></p><h3 id="指数型生成函数-EGF"><a href="#指数型生成函数-EGF" class="headerlink" title="指数型生成函数(EGF)"></a>指数型生成函数(EGF)</h3><p>指数型生成函数( $exponential$ $generating$ $function$，简称 $EGF$ )的形式大致如下：</p><p>对数列 $f=<f_0,f_1,f_2...>$ ，其生成函数为</f_0,f_1,f_2...></p><script type="math/tex; mode=display">F(x)=\sum_{k=1}^{\infty}f_k\frac{x^k}{n!}</script><p>其意义体现在其乘法操作上： </p><script type="math/tex; mode=display">F(x)G(x)=\sum_n\left(\sum_{i=0}^n\binom nif_ig_{n-i}\right)x^i</script><p> 多出来的 $\binom{n}{i}$ 告诉我们它适用于排列的计算（相对于 $OGF$ 的普通卷积对应组合）。</p><h4 id="常见的-EGF"><a href="#常见的-EGF" class="headerlink" title="常见的 $EGF$"></a>常见的 $EGF$</h4><div class="table-container"><table><thead><tr><th>数列</th><th>EGF</th></tr></thead><tbody><tr><td>$<1,1,1,...>$</1,1,1,...></td><td>$e^x$</td></tr><tr><td>$<0,1,2,...>$</0,1,2,...></td><td>$xe^x$</td></tr><tr><td>$<1,c,c^2,...>$</1,c,c^2,...></td><td>$e^{cx}$</td></tr></tbody></table></div><h4 id="EGF-的性质"><a href="#EGF-的性质" class="headerlink" title="$EGF$ 的性质"></a>$EGF$ 的性质</h4><script type="math/tex; mode=display">\begin{aligned}\alpha F(x)+\beta G(x)&=\sum_n(\alpha f_n+\beta g_n)\frac{x^n}{n!}\\x^mF(x)&=\sum_n[n\geq m]n^{\underline m}f_{n-m}\frac{x^n}{n!}\\\frac{F(x)-\sum_{i=0}^{m-1}f_ix^i}{x^m}&=\sum_n\frac1{(n+m)^{\underline m}}f_{n+m}\frac{x^n}{n!}\\F(cx)&=\sum_nc^nf_n\frac{x^n}{n!}\\F^\prime(x)&=\sum_nf_{n+1}\frac{x^n}{n!}\\\int_0^xF(t)\mathrm{d}t&=\sum_n[n>0]f_{n-1}\frac{x^n}{n!}\\\sum_{n}n^{\underline k}\frac{x^n}{n!}&=x^ke^x \\\sum_{n}(n-1)!\frac{x^n}{n!}&=\ln \frac{1}{1-x} \\F(x)G(x)&=\sum_n\left(\sum_{i=0}^n\binom nif_ig_{n-i}\right)\frac{x^n}{n!}\end{aligned}</script><p>看起来比较陌生了，这个得多熟悉熟悉</p><p><br></p><p><br></p><p><br></p><p><br></p><h2 id="斯特林数"><a href="#斯特林数" class="headerlink" title="斯特林数"></a>斯特林数</h2><h3 id="第一类斯特林数"><a href="#第一类斯特林数" class="headerlink" title="第一类斯特林数"></a>第一类斯特林数</h3><p>第一类斯特林数是指将 $n$ 个元素划分成为 $m$ 个<strong>轮换</strong>(或者环)的方案数，记作 $S_1(n,m)$ ，具体数学记作 $n\brack m$</p><h4 id="递推公式"><a href="#递推公式" class="headerlink" title="递推公式"></a>递推公式</h4><script type="math/tex; mode=display">{n\brack m}={n-1\brack m-1}+(n-1){n-1\brack m}</script><p><strong>证明：</strong></p><p>考虑组合意义，当把第 $n$ 个数加入时，要么另开一个环，要么加到已有的环中，有 $n$ 个位置可以插入</p><p><br></p><h4 id="求法"><a href="#求法" class="headerlink" title="求法"></a>求法</h4><p>这个求法的复杂度是 $O(n^2)$ 的，网上有一个倍增求第一类斯特林数的复杂度为 $O(nlogn)$ </p><p>构造 $F_n(x)=\sum {n\brack k}x^k$</p><p>然后由斯特林数的递推公式可得</p><script type="math/tex; mode=display">F_n(x)=xF_{n-1}(x)+(n-1)F_{n-1}(x)</script><p>所以有</p><script type="math/tex; mode=display">F_n(x)=\prod_{i=0}^{n-1}(x+i)</script><p>那么考虑分治处理，假设求出了前 $n$ 项系数 $a<em>0…a</em>{n-1}$ ，先求后 $n$ 项，有</p><script type="math/tex; mode=display">\begin{aligned}\prod_{i=n+1}^{2n-1}(x+i)&=\prod_{i=0}^{n-1}(x+n+i)\\&=\sum_{i=0}^{n-1}a_i(x+n)^i\\&=\sum_{i=0}^{n-1}a_i\sum_{j=0}^{i}\binom{i}{j}n^{i-j}x^j\\&=\sum_{i=0}^{n-1}\sum_{j=i}^{n-1}a_j\frac{j!}{i!(j-i)!}n^{j-i}x^i\\&=\sum_{i=0}^{n-1}\frac{1}{i!}\sum_{j=i}^{n-1}a_jj!\frac{n^{j-i}}{(j-i)!}x^i\end{aligned}</script><p>对于差固定的卷积，我们可以对其中一个序列进行翻转，就变成普通的卷积了，然后再平移一下即可。。</p><p><a href="/cf960G">具体代码</a></p><h4 id="部分公式"><a href="#部分公式" class="headerlink" title="部分公式"></a>部分公式</h4><script type="math/tex; mode=display">x^{\bar{n}}=\sum_{k=1}^n{n\brack k}x^k\\\sum_{k=0}^n{n\brack k}=n!</script><p><br></p><p><br></p><h3 id="第二类斯特林数"><a href="#第二类斯特林数" class="headerlink" title="第二类斯特林数"></a>第二类斯特林数</h3><p>第二类斯特林数是指将 $n$ 个元素划分成为 $m$ 个<strong>集合</strong>的方案数，记作 $S_2(n,m)$ ， 具体数学记作 $n\brace m$ </p><h4 id="递推公式-1"><a href="#递推公式-1" class="headerlink" title="递推公式"></a>递推公式</h4><script type="math/tex; mode=display">{n\brace m}={n-1\brace m-1}+m{n-1\brace m}</script><p><strong>证明：</strong></p><p>考虑组合意义，当把第 $n$ 个数加入时，要么另开一个集合，要么加到已有的环中，有 $m$ 个集合可以加入</p><p><br></p><h4 id="求法-1"><a href="#求法-1" class="headerlink" title="求法"></a>求法</h4><p>先证下式：</p><script type="math/tex; mode=display">{n\brace m}=\frac{1}{m!}\sum_{k=0}^m\binom{m}{k}(-1)^k(m-k)^n</script><p><strong>证明：</strong></p><p>考虑枚举空集 $k$ 的个数，容斥一下即可得到全为非空集的方案数</p><p><br></p><p>然后对他进行变形，变成卷积形式</p><script type="math/tex; mode=display">{n\brace m}=\sum_{k=0}^{m}\frac{(-1)^k}{k!}\frac{(m-k)^n}{(m-k)!}</script><p>然后上 $FFT$ 就可以了</p><p><br></p><h4 id="部分公式-1"><a href="#部分公式-1" class="headerlink" title="部分公式"></a>部分公式</h4><script type="math/tex; mode=display">x^n=\sum_{k=1}^{n}{n\brace k}x^{\underline{k}}</script><p>关于斯特林数其实具体数学里面还有很多公式，不过窝还没能吸收qaq</p><p><br><br><br><br></p><h2 id="五边形数"><a href="#五边形数" class="headerlink" title="五边形数"></a>五边形数</h2><p>五边形数就是从五边形里面弄出来的一个数列，感觉没什么几何意义</p><p>五边形数列为 ${\frac{n(3n-1)}{2} }$</p><p>广义的五边形数是由 $\frac{n(3n-1)}{2}$ 和 $\frac{n(3n+1)}{2}$ 组成的</p><p>然后有一个经典的多项式，是组合数学上的欧拉函数 </p><script type="math/tex; mode=display">\phi(x)=\prod_{i=1}^\infty (1-x^i)</script><p>有一个结论</p><script type="math/tex; mode=display">\phi(x)=1+\sum_k (-1)^kx^{\frac{k(3k-1)}{2} }+\sum_k(-1)^kx^{\frac{k(3k+1)}{2} }</script><p>也就是刚好是在广义五边形数上有系数</p><p>这个结论就非常舒服了，能够带来不少便利(但是证明很无聊，这里就不给出了)</p><p>​    </p>]]></content>
      
      
      
        <tags>
            
            <tag> 组合数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hdu6397(生成函数/容斥原理)</title>
      <link href="/hdu6397/"/>
      <url>/hdu6397/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6397" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=6397</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定一个数集 $[0,n-1]$ ，连续从数集中可重复选取 $m$ 个数和为 $k$ 的方案数</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="解法一-生成函数-："><a href="#解法一-生成函数-：" class="headerlink" title="解法一(生成函数)："></a>解法一(生成函数)：</h4><p>这个东西看上去就是 $\displaystyle (\sum_{k=0}^{n-1}x^k)^m$ ，然后做个多项式快速幂，不过感觉会T。。</p><p>然后像个比较好的化简，可以发现</p><script type="math/tex; mode=display">(\sum_{k=0}^{n-1}x^k)^m=(\frac{1-x^n}{1-x})^m</script><p>然后又是 $\displaystyle (1-x)^{-n}=\sum\binom{n+k-1}{k}x^k$</p><p>有了系数可以直接 $FFT$ 了，然而只需要一项所以可以 $O(n)$ 暴力求。。</p><h4 id="解法二-容斥原理-："><a href="#解法二-容斥原理-：" class="headerlink" title="解法二(容斥原理)："></a>解法二(容斥原理)：</h4><p>把 $\le m$ 的限制拆出来，分别考虑有几个数大于 $m$ 就可以了。。</p><script type="math/tex; mode=display">\begin{aligned}ans=&\sum_{x_1,x_2...x_n}[1\le x_i< m][\sum x_i=k]\\&\sum_{x_1,x_2...x_n}([1\le x_i]-[m\le x_i])[\sum x_i=k]\\&=\sum_{j=0}^n(-1)^j\binom nj \sum[1\le x_i][\sum x_i=k-jm]\end{aligned}</script><p>然后大于 $1$ 的和为 $k$ 的方案数直接隔板法得到 $\binom{n+k-1}{k-1}$</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="解法一-生成函数-：-1"><a href="#解法一-生成函数-：-1" class="headerlink" title="解法一(生成函数)："></a>解法一(生成函数)：</h4><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 200005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 400005</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">998244353</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br> <br><br><br><span class="hljs-keyword">int</span> n,m,k;<br>ll ans,inv[NM],invp[NM],p[NM];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">binom</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n,<span class="hljs-keyword">int</span> m)</span></span>&#123;<span class="hljs-keyword">return</span> n&gt;=m?p[n]*invp[m]%inf*invp[n-m]%inf:<span class="hljs-number">0</span>;&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-keyword">int</span> k)</span></span>&#123;<span class="hljs-keyword">return</span> binom(m+k<span class="hljs-number">-1</span>,k);&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=<span class="hljs-number">2e5</span>;inv[<span class="hljs-number">1</span>]=invp[<span class="hljs-number">0</span>]=invp[<span class="hljs-number">1</span>]=p[<span class="hljs-number">0</span>]=p[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    inc(i,<span class="hljs-number">2</span>,n)inv[i]=inv[inf%i]*(inf-inf/i)%inf,invp[i]=invp[i<span class="hljs-number">-1</span>]*inv[i]%inf,p[i]=p[i<span class="hljs-number">-1</span>]*i%inf;<br>    <span class="hljs-keyword">int</span> _=read();<span class="hljs-keyword">while</span>(_--)&#123;<br>n=read();m=read();k=read();<br>ans=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>,j=<span class="hljs-number">0</span>;i&lt;=k;i+=n,j++)<br>    <span class="hljs-keyword">if</span>(j%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>)ans+=binom(m,j)*f(k-i)%inf,ans%=inf;<br>    <span class="hljs-keyword">else</span> ans+=inf-binom(m,j)*f(k-i)%inf,ans%=inf;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="解法二-容斥原理-：-1"><a href="#解法二-容斥原理-：-1" class="headerlink" title="解法二(容斥原理)："></a>解法二(容斥原理)：</h4><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1ll&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 200005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 10000005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">998244353</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><span class="hljs-keyword">int</span> n,m,k;<br>ll ans,p[NM],invp[NM],inv[NM];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reduce</span><span class="hljs-params">(ll&amp;x)</span></span>&#123;x+=x&gt;&gt;<span class="hljs-number">63</span>&amp;inf;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=<span class="hljs-number">2e5</span>;p[<span class="hljs-number">0</span>]=invp[<span class="hljs-number">0</span>]=invp[<span class="hljs-number">1</span>]=inv[<span class="hljs-number">1</span>]=p[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    inc(i,<span class="hljs-number">2</span>,n)p[i]=p[i<span class="hljs-number">-1</span>]*i%inf,inv[i]=inv[inf%i]*(inf-inf/i)%inf,invp[i]=invp[i<span class="hljs-number">-1</span>]*inv[i]%inf;<br>    <span class="hljs-keyword">int</span> _=read();<span class="hljs-keyword">while</span>(_--)&#123;<br>m=read();n=read();k=read();<br>ans=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=n&amp;&amp;k&gt;=<span class="hljs-number">0</span>;i++,k-=m)<span class="hljs-keyword">if</span>(i&amp;<span class="hljs-number">1</span>)<br>    reduce(ans-=p[n]*invp[i]%inf*invp[n-i]%inf*p[k+n<span class="hljs-number">-1</span>]%inf*invp[n<span class="hljs-number">-1</span>]%inf*invp[k]%inf);<br><span class="hljs-keyword">else</span> <br>    reduce(ans+=p[n]*invp[i]%inf*invp[n-i]%inf*p[k+n<span class="hljs-number">-1</span>]%inf*invp[n<span class="hljs-number">-1</span>]%inf*invp[k]%inf-inf);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 组合数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bzoj3028(生成函数)</title>
      <link href="/bzoj3028/"/>
      <url>/bzoj3028/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=3028" target="_blank" rel="noopener">https://www.lydsy.com/JudgeOnline/problem.php?id=3028</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>沙雕生成函数题，对每个物品构造生成函数相乘，得</p><script type="math/tex; mode=display">\frac{1}{1-x^2}(1+x)(1+x+x^2)\frac{x}{1-x^2}\frac{1}{1-x^4}(1+x+x^2+x^3)(1+x)\frac{1}{1-x^3}</script><p>疯狂化简之后得到</p><script type="math/tex; mode=display">\frac{x}{(1-x)^4}</script><p>利用广义二项式展开有</p><script type="math/tex; mode=display">(1-x)^{-n}=\sum\binom{-n}{k}(-x)^k=\sum\binom{n+k-1}{k}x^k</script><p>带入上式得答案为 $\binom{k+2}{3}$</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 8005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 400005</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">10007</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br> <br><br><br><br><br>ll t;<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-keyword">char</span> _s[NM];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>,_s+<span class="hljs-number">1</span>);<br>    n=<span class="hljs-built_in">strlen</span>(_s+<span class="hljs-number">1</span>);<br>    inc(i,<span class="hljs-number">1</span>,n)t=(t*<span class="hljs-number">10</span>+_s[i]-<span class="hljs-string">'0'</span>)%inf;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,t*(t+<span class="hljs-number">1</span>)*(t+<span class="hljs-number">2</span>)/<span class="hljs-number">6</span>%inf);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 组合数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2018徐州现场赛M(凸包+DP+单调队列)</title>
      <link href="/gym102012M/"/>
      <url>/gym102012M/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://codeforces.com/gym/102012/problem/M" target="_blank" rel="noopener">https://codeforces.com/gym/102012/problem/M</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定 $n$ 个点的凸包，再给定 $m$ 个光源，要使用最少的光源照亮凸包的所有边，保证不存在三点共线</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>逐步转化，可以知道一个光源能够覆盖的边是凸包上连续的一段，那么将光源覆盖的边的区间求出来，就变成区间覆盖问题了</p><p>这个就和<a href="https://blog.csdn.net/qkoqhh/article/details/81267007" target="_blank" rel="noopener">多校某题</a>一样了，不过变成了环，那么拆环为序列，枚举从哪个区间开始，再以区间为单位做 $DP$ ，去掉区间覆盖后，随着右端点的增加左端点也跟着增加，可以利用这个单调性把复杂度降到 $O(n^2)$</p><p>因为行末空格被卡了半天。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3>]]></content>
      
      
      
        <tags>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2018徐州现场赛D(DP)</title>
      <link href="/gym102012D/"/>
      <url>/gym102012D/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://codeforces.com/gym/102012/problem/D" target="_blank" rel="noopener">https://codeforces.com/gym/102012/problem/D</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定一个长度为 $n$ 且由 $1$ 到 $n$ 组成的序列 $A$ 和一个 $n\times n$ 的连通矩阵 $M$ ，若 $A$ 的子序列中相邻两个数在连通矩阵中是连通的，那么称该序列是合法的。求 $A$ 中本质不同的合法子序列的出现次数的三次方的和</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>一个比较套路的知识点，将三次方转化为三个点对 $(i,j,k)$ ，那么就只需要找到 $A$ 中相同合法子序列对的个数就可以了</p><p>设 $d[i][j][k]$ 为以 $i,j,k$ 为结尾的公共子序列个数</p><script type="math/tex; mode=display">d[i][j][k]=[a[i]=a[j]=a[k]](1+\sum_{i'=1}^{i-1}\sum_{j'=1}^{j-1}\sum_{k'=1}^{k-1}d[i'][j'][k'])</script><p>看起来比较暴力，但是可以层层去个前缀和优化，然后直接把转移复杂度降到 $O(1)$</p><p>多取模还被卡常呜呜呜</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 205</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 400005</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br> <br> <br> <br> <br> <br> <br><span class="hljs-keyword">int</span> n,a[NM],b[NM][NM];<br>ll d[NM][NM][NM],f[NM][NM][NM],g[NM][NM][NM],h[NM][NM][NM],ans;<br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> _=read();<span class="hljs-keyword">while</span>(_--)&#123;<br>n=read();inc(i,<span class="hljs-number">1</span>,n)a[i]=read();<br>inc(i,<span class="hljs-number">1</span>,n)inc(j,<span class="hljs-number">1</span>,n)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%1d"</span>,&amp;b[i][j]);<br>ans=<span class="hljs-number">0</span>;<br>inc(i,<span class="hljs-number">1</span>,n)inc(j,<span class="hljs-number">1</span>,n)inc(k,<span class="hljs-number">1</span>,n)&#123;<br>    <span class="hljs-keyword">if</span>(a[i]==a[j]&amp;&amp;a[j]==a[k])&#123;<br>d[i][j][k]=(<span class="hljs-number">1</span>+h[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>][k<span class="hljs-number">-1</span>])%inf;<br>    &#125;<span class="hljs-keyword">else</span> d[i][j][k]=<span class="hljs-number">0</span>;<br>    g[i][j][k]=g[i][j][k<span class="hljs-number">-1</span>]+d[i][j][k];<br>    <span class="hljs-keyword">if</span>(b[a[i]][a[k+<span class="hljs-number">1</span>]])f[i][j][k]=f[i][j<span class="hljs-number">-1</span>][k]+g[i][j][k];<span class="hljs-keyword">else</span> f[i][j][k]=<span class="hljs-number">0</span>;<br>    h[i][j][k]=h[i<span class="hljs-number">-1</span>][j][k]+f[i][j][k];<br>    ans+=d[i][j][k];<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans%inf);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多项式全家桶</title>
      <link href="/poly/"/>
      <url>/poly/</url>
      
        <content type="html"><![CDATA[<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><p><a href="/luogu4238">多项式逆元</a></p><p><a href="/luogu5277">多项式开方</a></p><p><a href="/luogu4512">多项式除法/取模</a></p><p><a href="/luogu4725">多项式对数</a></p><p><a href="/luogu4726">多项式指数函数</a></p><p><a href="/luogu5050">多项式多点求值</a></p><p><br></p><p>这里主要存一下模板  </p><p>待补：多项式快速插值</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 270005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 400005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">998244353</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reduce</span><span class="hljs-params">(ll&amp;x)</span></span>&#123;x+=x&gt;&gt;<span class="hljs-number">63</span>&amp;inf;&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">qpow</span><span class="hljs-params">(ll x,ll t)</span></span>&#123;<br>    ll s=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(;t;t&gt;&gt;=<span class="hljs-number">1</span>,x=x*x%inf)<span class="hljs-keyword">if</span>(t&amp;<span class="hljs-number">1</span>)s=s*x%inf;<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br>ll inv[NM];<br><br><span class="hljs-comment">//solve x^2=t(mod inf)</span><br><span class="hljs-function">ll <span class="hljs-title">Sqrt</span><span class="hljs-params">(ll t)</span></span>&#123;<br>    ll a=<span class="hljs-number">0</span>,w;<br>    <span class="hljs-keyword">if</span>(qpow(t,inf<span class="hljs-number">-1</span>&gt;&gt;<span class="hljs-number">1</span>)+<span class="hljs-number">1</span>==inf)<span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    srand(time(<span class="hljs-number">0</span>));<br>    <span class="hljs-keyword">do</span>&#123;<br>a=rand()%inf;<br>w=(sqr(a)-t+inf)%inf;<br>    &#125;<span class="hljs-keyword">while</span>(qpow(w,inf<span class="hljs-number">-1</span>&gt;&gt;<span class="hljs-number">1</span>)+<span class="hljs-number">1</span>!=inf);<br>    ll ans=<span class="hljs-number">1</span>,_ans=<span class="hljs-number">0</span>,_x,_y;<br>    <span class="hljs-keyword">for</span>(ll n=inf+<span class="hljs-number">1</span>&gt;&gt;<span class="hljs-number">1</span>,x=a,y=<span class="hljs-number">1</span>;n;n&gt;&gt;=<span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">if</span>(n&amp;<span class="hljs-number">1</span>)&#123;<br>    _x=ans*x%inf+_ans*y%inf*w%inf;<br>    _y=ans*y%inf+_ans*x%inf;<br>    ans=_x%inf;_ans=_y%inf;<br>&#125;<br>_x=sqr(x)%inf+sqr(y)%inf*w%inf;<br>_y=<span class="hljs-number">2</span>*x*y%inf;<br>x=_x%inf;y=_y%inf;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-comment">/*<br>   testdata<br>   1154323<br>   inf=998244353<br>   output<br>   570381804 or 427862549<br> */</span><br><br><span class="hljs-keyword">namespace</span> Poly&#123;<br>    <span class="hljs-keyword">int</span> lim,bit,rev[NM],w[NM],W[NM];<br>    ll invn;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">clear</span><span class="hljs-params">(ll*a,ll*b)</span></span>&#123;<span class="hljs-keyword">if</span>(a&lt;b)<span class="hljs-built_in">memset</span>(a,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(ll)*(b-a));&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-keyword">int</span> m)</span></span>&#123;<br><span class="hljs-keyword">for</span>(lim=<span class="hljs-number">1</span>,bit=<span class="hljs-number">0</span>;lim&lt;m;lim&lt;&lt;=<span class="hljs-number">1</span>)bit++;invn=qpow(lim,inf<span class="hljs-number">-2</span>);<br>inc(i,<span class="hljs-number">1</span>,lim<span class="hljs-number">-1</span>)rev[i]=(rev[i&gt;&gt;<span class="hljs-number">1</span>]&gt;&gt;<span class="hljs-number">1</span>)|((i&amp;<span class="hljs-number">1</span>)&lt;&lt;(bit<span class="hljs-number">-1</span>));<br>ll t=qpow(<span class="hljs-number">3</span>,(inf<span class="hljs-number">-1</span>)/lim);W[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>inc(i,<span class="hljs-number">1</span>,lim)W[i]=W[i<span class="hljs-number">-1</span>]*t%inf;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fft</span><span class="hljs-params">(ll*a,<span class="hljs-keyword">int</span> f=<span class="hljs-number">0</span>)</span></span>&#123;<br><span class="hljs-keyword">int</span> n=lim;<br>inc(i,<span class="hljs-number">1</span>,n<span class="hljs-number">-1</span>)<span class="hljs-keyword">if</span>(i&lt;rev[i])swap(a[i],a[rev[i]]);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">1</span>;k&lt;n;k&lt;&lt;=<span class="hljs-number">1</span>)&#123;<br>    <span class="hljs-keyword">int</span> t=n/k&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>,j=<span class="hljs-number">0</span>;i&lt;k;i++,j+=t)w[i]=W[f?n-j:j];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i+=k&lt;&lt;<span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;k;j++)&#123;<br>    ll x=a[i+j],y=w[j]*a[i+j+k]%inf;<br>    reduce(a[i+j]=x+y-inf);reduce(a[i+j+k]=x-y);<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(f)inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)a[i]=a[i]*invn%inf;<br>    &#125;<br>    <span class="hljs-comment">/*<br>       testdata<br>       3 4<br>       7741211 4563131 231354345 78784213<br>       4611513 153131531 44132112 431314040 111<br>       output<br>       478854610 284047680 956908296 279654258 728967858 167332085 24933137 759092819 <br>     */</span><br><br>    ll _a[NM];<span class="hljs-comment">//used in inv/sqrt/ln</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">inv</span><span class="hljs-params">(ll*b,ll*a,<span class="hljs-keyword">int</span> m)</span></span>&#123;<br><span class="hljs-keyword">if</span>(m==<span class="hljs-number">1</span>)&#123;b[<span class="hljs-number">0</span>]=qpow(a[<span class="hljs-number">0</span>],inf<span class="hljs-number">-2</span>);<span class="hljs-keyword">return</span>;&#125;<br>inv(b,a,m+<span class="hljs-number">1</span>&gt;&gt;<span class="hljs-number">1</span>);init(m&lt;&lt;<span class="hljs-number">1</span>);<br>copy(a,a+m,_a);clear(_a+m,_a+lim);clear(b+(m+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>,b+lim);<br>fft(b);fft(_a);<br>inc(i,<span class="hljs-number">0</span>,lim<span class="hljs-number">-1</span>)b[i]=b[i]*(<span class="hljs-number">2</span>-_a[i]*b[i]%inf+inf)%inf;<br>fft(b,<span class="hljs-number">1</span>);<span class="hljs-comment">//clear(b+m,b+lim);</span><br>    &#125;<br>    <span class="hljs-comment">/*<br>       testdata<br>       5<br>       1 6 3 4 9<br>       output<br>       1 998244347 33 998244169 1020<br>     */</span><br><br>    ll _b[NM];<span class="hljs-comment">//used in div/sqrt/exp</span><br><br>    <span class="hljs-comment">//c=a/b,d=a%b</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">div</span><span class="hljs-params">(ll*c,ll*d,ll*a,ll*b,<span class="hljs-keyword">int</span> n,<span class="hljs-keyword">int</span> m)</span></span>&#123;<br>reverse_copy(a,a+n,c);reverse_copy(b,b+m,d);<br>clear(d+m,d+n-m+<span class="hljs-number">1</span>);<br>inv(_b,d,n-m+<span class="hljs-number">1</span>);reverse(d,d+m);<br>init(n-m+<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">1</span>);<br>clear(c+n-m+<span class="hljs-number">1</span>,c+lim);clear(_b+n-m+<span class="hljs-number">1</span>,_b+lim);<br>fft(_b);fft(c);<br>inc(i,<span class="hljs-number">0</span>,lim<span class="hljs-number">-1</span>)c[i]=c[i]*_b[i]%inf;<br>fft(c,<span class="hljs-number">1</span>);<br>reverse(c,c+n-m+<span class="hljs-number">1</span>);clear(c+n-m+<span class="hljs-number">1</span>,c+lim);<br>init(n);<br>copy(c,c+n-m+<span class="hljs-number">1</span>,_b);clear(_b+n-m+<span class="hljs-number">1</span>,_b+lim);<br>m--;clear(d+m,d+lim);<br>fft(_b);fft(d);<br>inc(i,<span class="hljs-number">0</span>,lim<span class="hljs-number">-1</span>)d[i]=d[i]*_b[i]%inf;<br>fft(d,<span class="hljs-number">1</span>);<br>clear(d+m,d+lim);clear(_b,_b+lim);<br>inc(i,<span class="hljs-number">0</span>,m<span class="hljs-number">-1</span>)reduce(d[i]=a[i]-d[i]);<br>    &#125;<br>    <span class="hljs-comment">/*<br>       testdata<br>       5 1<br>       1 9 2 6 0 8<br>       1 7<br>       output<br>       c::237340659 335104102 649004347 448191342 855638018<br>       d::760903695<br>     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">div</span><span class="hljs-params">(ll*c,ll*a,ll*b,<span class="hljs-keyword">int</span> n,<span class="hljs-keyword">int</span> m)</span></span>&#123;<br>reverse_copy(a,a+n,c);reverse(b,b+m);<br>clear(b+m,b+n-m+<span class="hljs-number">1</span>);<br>inv(_b,b,n-m+<span class="hljs-number">1</span>);reverse(b,b+m);<br>init(n-m+<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">1</span>);<br>clear(c+n-m+<span class="hljs-number">1</span>,c+lim);clear(_b+n-m+<span class="hljs-number">1</span>,_b+lim);<br>fft(_b);fft(c);<br>inc(i,<span class="hljs-number">0</span>,lim<span class="hljs-number">-1</span>)c[i]=c[i]*_b[i]%inf;<br>fft(c,<span class="hljs-number">1</span>);<br>reverse(c,c+n-m+<span class="hljs-number">1</span>);<br>clear(c+n-m+<span class="hljs-number">1</span>,c+lim);clear(_b,_b+lim);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">mod</span><span class="hljs-params">(ll*c,ll*a,ll*b,<span class="hljs-keyword">int</span> n,<span class="hljs-keyword">int</span> m)</span></span>&#123;<br>div(c,a,b,n,m);<br>init(n);<br>clear(c+n-m+<span class="hljs-number">1</span>,c+lim);<br>copy(b,b+m,_b);clear(_b+m,_b+lim);m--;<br>fft(_b);fft(c);<br>inc(i,<span class="hljs-number">0</span>,lim<span class="hljs-number">-1</span>)c[i]=c[i]*_b[i]%inf;<br>fft(c,<span class="hljs-number">1</span>);<br>inc(i,<span class="hljs-number">0</span>,m<span class="hljs-number">-1</span>)reduce(c[i]=a[i]-c[i]);<br>clear(c+m,c+lim);clear(_b,_b+lim);<br>    &#125;<br><br>    <span class="hljs-comment">//b should be clean</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sqrt</span><span class="hljs-params">(ll*b,ll*a,<span class="hljs-keyword">int</span> m)</span></span>&#123;<br><span class="hljs-keyword">if</span>(m==<span class="hljs-number">1</span>)&#123;b[<span class="hljs-number">0</span>]=Sqrt(a[<span class="hljs-number">0</span>]);b[<span class="hljs-number">0</span>]=min(b[<span class="hljs-number">0</span>],inf-b[<span class="hljs-number">0</span>]);<span class="hljs-keyword">return</span>;&#125;<br><span class="hljs-keyword">int</span> len=m+<span class="hljs-number">1</span>&gt;&gt;<span class="hljs-number">1</span>;<span class="hljs-built_in">sqrt</span>(b,a,len);<br>inv(_b,b,m);<br>init(m&lt;&lt;<span class="hljs-number">1</span>);<br>ll t=inf+<span class="hljs-number">1</span>&gt;&gt;<span class="hljs-number">1</span>;<br>copy(a,a+m,_a);clear(_a+m,_a+lim);<br>fft(_a);fft(_b);<br>inc(i,<span class="hljs-number">0</span>,lim<span class="hljs-number">-1</span>)_b[i]=_a[i]*_b[i]%inf*t%inf;<br>fft(_b,<span class="hljs-number">1</span>);<br>copy(_b+len,_b+m,b+len);<br>    &#125;<br>    <span class="hljs-comment">/*<br>       tessdata<br>       7<br>       1 8596489 489489 4894 1564 489 35789489 <br>       output<br>       1 503420421 924499237 13354513 217017417 707895465 411020414<br>     */</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ln</span><span class="hljs-params">(ll*b,ll*a,<span class="hljs-keyword">int</span> m)</span></span>&#123;<br>inv(b,a,m);<br>inc(i,<span class="hljs-number">0</span>,m<span class="hljs-number">-2</span>)_a[i]=a[i+<span class="hljs-number">1</span>]*(i+<span class="hljs-number">1</span>)%inf;<br>init(m&lt;&lt;<span class="hljs-number">1</span>);<br>clear(_a+m<span class="hljs-number">-1</span>,_a+lim);clear(b+m,b+lim);<br>fft(_a);fft(b);<br>inc(i,<span class="hljs-number">0</span>,lim<span class="hljs-number">-1</span>)b[i]=b[i]*_a[i]%inf;<br>fft(b,<span class="hljs-number">1</span>);<br>dec(i,m<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>)b[i]=b[i<span class="hljs-number">-1</span>]*::inv[i]%inf;b[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-comment">/*<br>       testdata<br>       6<br>       1 927384623 878326372 3882 273455637 998233543<br>       output<br>       0 927384623 817976920 427326948 149643566 610586717<br>     */</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">exp</span><span class="hljs-params">(ll*b,ll*a,<span class="hljs-keyword">int</span> m)</span></span>&#123;<br><span class="hljs-keyword">if</span>(m==<span class="hljs-number">1</span>)&#123;b[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<span class="hljs-keyword">return</span>;&#125;<br><span class="hljs-built_in">exp</span>(b,a,m+<span class="hljs-number">1</span>&gt;&gt;<span class="hljs-number">1</span>);<br>clear(b+(m+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>,b+m);<br>ln(_b,b,m);<br>inc(i,<span class="hljs-number">0</span>,m<span class="hljs-number">-1</span>)reduce(_b[i]=a[i]-_b[i]);_b[<span class="hljs-number">0</span>]++;<br>clear(_b+m,_b+lim);clear(b+m,b+lim);<br>fft(_b);fft(b);<br>inc(i,<span class="hljs-number">0</span>,lim<span class="hljs-number">-1</span>)b[i]=b[i]*_b[i]%inf;<br>fft(b,<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-comment">/*<br>       testdata<br>       6<br>       0 927384623 817976920 427326948 149643566 610586717<br>       output<br>       1 927384623 878326372 3882 273455637 998233543<br>     */</span><br><br>    <span class="hljs-built_in">vector</span>&lt;ll&gt;p[NM],q[NM];ll _c[NM];<span class="hljs-comment">//used in build/DIV</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i,<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y,<span class="hljs-keyword">const</span> ll*a)</span></span>&#123;<br><span class="hljs-keyword">if</span>(x==y)&#123;p[i].push_back(inf-a[x]);p[i].push_back(<span class="hljs-number">1</span>);<span class="hljs-keyword">return</span>;&#125;<br>build(i&lt;&lt;<span class="hljs-number">1</span>,x,mid,a);build(i&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,y,a);<br><span class="hljs-keyword">int</span> n=p[i&lt;&lt;<span class="hljs-number">1</span>].size(),m=p[i&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>].size();<br>init(n+m<span class="hljs-number">-1</span>);<br>copy(p[i&lt;&lt;<span class="hljs-number">1</span>].begin(),p[i&lt;&lt;<span class="hljs-number">1</span>].end(),_a);clear(_a+n,_a+lim);<br>copy(p[i&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>].begin(),p[i&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>].end(),_b);clear(_b+m,_b+lim);<br>fft(_a);fft(_b);<br>inc(j,<span class="hljs-number">0</span>,lim<span class="hljs-number">-1</span>)_c[j]=_a[j]*_b[j]%inf;<br>fft(_c,<span class="hljs-number">1</span>);p[i].assign(_c,_c+n+m<span class="hljs-number">-1</span>);<br>    &#125;<br>    ll _d[NM],ret[NM];<span class="hljs-comment">//used in DIV</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DIV</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<br><span class="hljs-keyword">if</span>(q[x].size()&lt;p[y].size())&#123;q[y]=q[x];<span class="hljs-keyword">return</span>;&#125;<br>copy(q[x].begin(),q[x].end(),_c);copy(p[y].begin(),p[y].end(),_d);<br>mod(ret,_c,_d,q[x].size(),p[y].size());<br>q[y].assign(ret,ret+p[y].size()<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">while</span>(!q[y].back())q[y].pop_back();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">cal</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i,<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y,ll*a)</span></span>&#123;<br><span class="hljs-keyword">if</span>(x==y)&#123;a[x]=q[i][<span class="hljs-number">0</span>];<span class="hljs-keyword">return</span>;&#125;<br>DIV(i,i&lt;&lt;<span class="hljs-number">1</span>);DIV(i,i&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>);<br>cal(i&lt;&lt;<span class="hljs-number">1</span>,x,mid,a);cal(i&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,y,a);<br>    &#125;<br>    <span class="hljs-comment">//look test() for usage</span><br>    <span class="hljs-comment">/*<br>       testdata<br>       10 10<br>       18 2 6 17 7 19 17 6 2 12 14<br>       4 15 5 20 2 6 20 12 16 5<br>     */</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">out</span><span class="hljs-params">(ll*a,<span class="hljs-keyword">int</span> m)</span></span>&#123;inc(i,<span class="hljs-number">0</span>,m<span class="hljs-number">-1</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld%c"</span>,a[i],<span class="hljs-string">" \n"</span>[i==m<span class="hljs-number">-1</span>]);&#125;<br>&#125;<br><br><br><br><span class="hljs-keyword">int</span> n,m;<br>ll a[NM],b[NM],c[NM],d[NM];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>    n=read()+<span class="hljs-number">1</span>;m=read();<br>    inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)a[i]=read();<br>    inc(i,<span class="hljs-number">1</span>,m)b[i]=read();<br>    Poly::build(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,m,b);<br>    Poly::q[<span class="hljs-number">0</span>].assign(a,a+n);<br>    Poly::DIV(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>);<br>    Poly::cal(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,m,c);<br>    inc(i,<span class="hljs-number">1</span>,m)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,c[i]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    test();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> FFT </tag>
            
            <tag> unfinished </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019计蒜之道复赛C(博弈+高精度+FWT)</title>
      <link href="/jsk39613/"/>
      <url>/jsk39613/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://nanti.jisuanke.com/t/39613" target="_blank" rel="noopener">https://nanti.jisuanke.com/t/39613</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>首先先考虑一堆石子的情况，直接打表可以发现，$sg(x)$ 为 $x$ 中 $2$ 的幂次，那么可以得到 $1-n$ 中 $sg=k$ 的数的个数为 $n/2^{k-1}-n/2^k$ ，所以要将大数转成二进制数就比较好算，然后由于有 $8000$ 位，所以得压位压到 $1000$ 否则会 $T$</p><p>然后就可以得到 $sg$ 的分布，在加上 $m$ 堆石子，使他们异或和不为 $0$ 的方案数，这个就是分布序列自身卷积 $m$ 次就能得到 $m$ 堆石子的情况。。然后直接 $FWT+$ 快速幂就可以了。。 </p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid ((x+y)/2)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 530005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 400005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">998244353</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><span class="hljs-keyword">int</span> n,cnt,tot;<br><span class="hljs-keyword">int</span> c[NM],b[NM];<br>ll a[NM],m;<br><span class="hljs-keyword">char</span> _s[NM];<br><br><span class="hljs-function">ll <span class="hljs-title">qpow</span><span class="hljs-params">(ll x,ll t)</span></span>&#123;<span class="hljs-keyword">return</span> t?qpow(sqr(x)%inf,t&gt;&gt;<span class="hljs-number">1</span>)*(t&amp;<span class="hljs-number">1</span>?x:<span class="hljs-number">1l</span>l)%inf:<span class="hljs-number">1l</span>l;&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fwt</span><span class="hljs-params">(ll*a,<span class="hljs-keyword">int</span> f)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(f==<span class="hljs-number">-1</span>)f=inf+<span class="hljs-number">1</span>&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">1</span>;k&lt;n;k&lt;&lt;=<span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i+=k&lt;&lt;<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;k;j++)&#123;<br>ll x=a[i+j],y=a[i+j+k];<br>a[i+j]=f*(x+y)%inf;<br>a[i+j+k]=f*(x-y+inf)%inf;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>,_s+<span class="hljs-number">1</span>);m=read();<br>    tot=<span class="hljs-built_in">strlen</span>(_s+<span class="hljs-number">1</span>);<br>    dec(i,tot,<span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">int</span> t=<span class="hljs-number">0</span>;<br>dec(j,<span class="hljs-number">7</span>,<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">if</span>(i-j&gt;<span class="hljs-number">0</span>)t=t*<span class="hljs-number">10</span>+_s[i-j]-<span class="hljs-string">'0'</span>;<br>i-=<span class="hljs-number">7</span>;<br>c[++cnt]=t;<br>    &#125;<br>    tot=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(cnt)&#123;<br>b[tot++]=c[<span class="hljs-number">1</span>]&amp;<span class="hljs-number">1</span>;<br>dec(i,cnt,<span class="hljs-number">1</span>)&#123;<br>    <span class="hljs-keyword">if</span>(c[i]&amp;<span class="hljs-number">1</span>)<span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">1</span>)c[i<span class="hljs-number">-1</span>]+=<span class="hljs-number">100000000</span>;<br>    c[i]&gt;&gt;=<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">while</span>(!c[cnt]&amp;&amp;cnt&gt;<span class="hljs-number">0</span>)cnt--;<br>    &#125;<br>    <span class="hljs-keyword">int</span> t=<span class="hljs-number">0</span>;<br>    dec(i,tot<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>)&#123;<br>a[i]=(t+b[i])%inf;<br>t=t&lt;&lt;<span class="hljs-number">1</span>;t+=b[i];t%=inf;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(n=<span class="hljs-number">1</span>;n&lt;tot;n&lt;&lt;=<span class="hljs-number">1</span>);<br>    fwt(a,<span class="hljs-number">1</span>);<br>    inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)a[i]=qpow(a[i],m);<br>    fwt(a,<span class="hljs-number">-1</span>);<br>    ll ans=<span class="hljs-number">0</span>;<br>    inc(i,<span class="hljs-number">1</span>,n<span class="hljs-number">-1</span>)ans+=a[i],ans%=inf;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>*<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> FFT </tag>
            
            <tag> 博弈 </tag>
            
            <tag> 高精度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>51nod1773(FWT)</title>
      <link href="/51nod1773/"/>
      <url>/51nod1773/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.51nod.com/Challenge/Problem.html#!#problemId=1773" target="_blank" rel="noopener">https://www.51nod.com/Challenge/Problem.html#!#problemId=1773</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>这个问题比较有意思，首先可以发现每个货物贡献是可以线性叠加的，然后货物的位置其实通过异或运算就可以得到相应的位置，所以我们只需要计算  $0$ 位置 $1$ 个货物的贡献即可。。</p><p>第一轮后，只有 $2^k$ 有一个货物，其余为 $0$ ，可以把这一轮看作一个变换，以后每轮就是做这个变换</p><p>实际上做完 $FWT$ 后就直接快速幂即可。。</p><p>$FWT$ 的写法采用了比较随意的形式。。</p><p>快速幂写法比较智障。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid ((x+y)/2)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 1100005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 400005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">write</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(x&lt;<span class="hljs-number">0</span>) &#123; <span class="hljs-built_in">putchar</span>(<span class="hljs-string">'-'</span>);x=-x; &#125;<br>    <span class="hljs-keyword">if</span>(x&gt;<span class="hljs-number">9</span>)    write(x/<span class="hljs-number">10</span>);<br>    <span class="hljs-built_in">putchar</span>(x%<span class="hljs-number">10</span>+<span class="hljs-string">'0'</span>);<br>&#125;<br><br><span class="hljs-keyword">int</span> n,m;<br>ll a[NM],b[NM];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fwt</span><span class="hljs-params">(ll*a)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">1</span>;k&lt;n;k&lt;&lt;=<span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i+=k&lt;&lt;<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;k;j++)&#123;<br>ll x=a[i+j],y=a[i+j+k];<br>a[i+j]=(x+y)%inf;<br>a[i+j+k]=(x-y+inf)%inf;<br>    &#125;<br>&#125;<br><span class="hljs-function">ll <span class="hljs-title">div2</span><span class="hljs-params">(ll x)</span></span>&#123;<span class="hljs-keyword">return</span> x&amp;<span class="hljs-number">1</span>?x+inf&gt;&gt;<span class="hljs-number">1</span>:x&gt;&gt;<span class="hljs-number">1</span>;&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ifwt</span><span class="hljs-params">(ll*a)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">1</span>;k&lt;n;k&lt;&lt;=<span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i+=k&lt;&lt;<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;k;j++)&#123;<br>ll x=a[i+j],y=a[i+j+k];<br>a[i+j]=div2((x+y)%inf);<br>a[i+j+k]=div2((x-y+inf)%inf);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=<span class="hljs-number">1</span>&lt;&lt;read();m=read();<br>    inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)a[i]=read();<br>    b[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">1</span>;k&lt;n;k&lt;&lt;=<span class="hljs-number">1</span>)b[k]=<span class="hljs-number">1</span>;<br>    fwt(a);<br>    <span class="hljs-keyword">for</span>(fwt(b);m;m&gt;&gt;=<span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">if</span>(m&amp;<span class="hljs-number">1</span>)&#123;<br>    inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)a[i]=a[i]*b[i]%inf;<br>&#125;<br>inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)b[i]=b[i]*b[i]%inf;<br>    &#125;<br>    ifwt(a);<br>    inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)write(a[i]),<span class="hljs-built_in">putchar</span>(<span class="hljs-string">' '</span>);<span class="hljs-built_in">putchar</span>(<span class="hljs-string">'\n'</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> FFT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>luogu4717(FWT/FMT模板)</title>
      <link href="/luogu4717/"/>
      <url>/luogu4717/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.org/problemnew/show/P4717" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P4717</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>$FWT$ 和 $FMT$ 的推导过程参考这个<a href="http://blog.leanote.com/post/rockdu/TX20" target="_blank" rel="noopener">链接</a></p><p>异或的卷积用 $FWT$ ，然后与和或的可以考虑用 $FMT$ 比 $FWT$ 好写得多</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid ((x+y)/2)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 200005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 400005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">998244353</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><span class="hljs-keyword">int</span> n;<br>ll a[NM],b[NM],c[NM],d[NM];<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">FWT</span>&#123;</span><br>    <span class="hljs-keyword">int</span> n;<br>    ll b[NM];<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fwt</span><span class="hljs-params">(ll*a,<span class="hljs-keyword">int</span> f)</span></span>&#123;<br><span class="hljs-keyword">if</span>(f==<span class="hljs-number">-1</span>)f=inf+<span class="hljs-number">1</span>&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">1</span>;k&lt;n;k&lt;&lt;=<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i+=k&lt;&lt;<span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;k;j++)&#123;<br>    ll x=a[i+j],y=a[i+j+k];<br>    a[i+j]=f*(x+y)%inf;<br>    a[i+j+k]=f*(x-y+inf)%inf;<br>&#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">plu</span><span class="hljs-params">(ll*a,ll*_b,<span class="hljs-keyword">int</span> p,<span class="hljs-keyword">int</span> m)</span></span>&#123;<br>inc(i,<span class="hljs-number">0</span>,m<span class="hljs-number">-1</span>)b[i]=_b[i];<br><span class="hljs-keyword">for</span>(n=<span class="hljs-number">1</span>;n&lt;p||n&lt;m;n&lt;&lt;=<span class="hljs-number">1</span>);<br>fwt(a,<span class="hljs-number">1</span>);fwt(b,<span class="hljs-number">1</span>);inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)a[i]=a[i]*b[i]%inf;<br>fwt(a,<span class="hljs-number">-1</span>);inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)b[i]=<span class="hljs-number">0</span>;<span class="hljs-keyword">return</span> n;<br>    &#125;<br>&#125;fwt;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">FMTor</span>&#123;</span><br>    <span class="hljs-keyword">int</span> n;<br>    ll b[NM];<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fmt</span><span class="hljs-params">(ll*a,<span class="hljs-keyword">int</span> f)</span></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;succ(i)&lt;n;i++)<br>    inc(j,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)<span class="hljs-keyword">if</span>(j&gt;&gt;i&amp;<span class="hljs-number">1</span>)<br>a[j]=(a[j]+f*a[j^<span class="hljs-number">1</span>&lt;&lt;i]+inf)%inf;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">plu</span><span class="hljs-params">(ll*a,ll*_b,<span class="hljs-keyword">int</span> p,<span class="hljs-keyword">int</span> m)</span></span>&#123;<br>inc(i,<span class="hljs-number">0</span>,m<span class="hljs-number">-1</span>)b[i]=_b[i];<br><span class="hljs-keyword">for</span>(n=<span class="hljs-number">1</span>;n&lt;p||n&lt;m;n&lt;&lt;=<span class="hljs-number">1</span>);<br>fmt(a,<span class="hljs-number">1</span>);fmt(b,<span class="hljs-number">1</span>);inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)a[i]=a[i]*b[i]%inf;<br>fmt(a,<span class="hljs-number">-1</span>);inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)b[i]=<span class="hljs-number">0</span>;<span class="hljs-keyword">return</span> n;<br>    &#125;<br>&#125;fmtor;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">FMTand</span>&#123;</span><br>    <span class="hljs-keyword">int</span> n;<br>    ll b[NM];<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fmt</span><span class="hljs-params">(ll*a,<span class="hljs-keyword">int</span> f)</span></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;succ(i)&lt;n;i++)<br>    dec(j,n<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>)<span class="hljs-keyword">if</span>(~j&gt;&gt;i&amp;<span class="hljs-number">1</span>)<br>a[j]=(a[j]+f*a[j|<span class="hljs-number">1</span>&lt;&lt;i]+inf)%inf;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">plu</span><span class="hljs-params">(ll*a,ll*_b,<span class="hljs-keyword">int</span> p,<span class="hljs-keyword">int</span> m)</span></span>&#123;<br>inc(i,<span class="hljs-number">0</span>,m<span class="hljs-number">-1</span>)b[i]=_b[i];<br><span class="hljs-keyword">for</span>(n=<span class="hljs-number">1</span>;n&lt;p||n&lt;m;n&lt;&lt;=<span class="hljs-number">1</span>);<br>fmt(a,<span class="hljs-number">1</span>);fmt(b,<span class="hljs-number">1</span>);inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)a[i]=a[i]*b[i]%inf;<br>fmt(a,<span class="hljs-number">-1</span>);inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)b[i]=<span class="hljs-number">0</span>;<span class="hljs-keyword">return</span> n;<br>    &#125;<br>&#125;fmtand;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=<span class="hljs-number">1</span>&lt;&lt;read();<br>    inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)a[i]=c[i]=d[i]=read();<br>    inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)b[i]=read();<br>    fmtand.plu(a,b,n,n);<br>    fmtor.plu(c,b,n,n);<br>    fwt.plu(d,b,n,n);<br>    inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld%c"</span>,c[i],<span class="hljs-string">" \n"</span>[i==n<span class="hljs-number">-1</span>]);<br>    inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld%c"</span>,a[i],<span class="hljs-string">" \n"</span>[i==n<span class="hljs-number">-1</span>]);<br>    inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld%c"</span>,d[i],<span class="hljs-string">" \n"</span>[i==n<span class="hljs-number">-1</span>]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> FFT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jsk39276(思维题)</title>
      <link href="/jsk39276/"/>
      <url>/jsk39276/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://nanti.jisuanke.com/t/39276" target="_blank" rel="noopener">https://nanti.jisuanke.com/t/39276</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>有两个数 $a$、$p$ ，用这两个数构造出数列 ${a^n\bmod{p}}$ ，给出这个序列的长度为 $n$ 的子序列，判断满足条件的 $a$、$p$ 是多解、一解还是无解，一解要输出 $a$、$p$</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>有点奇葩的题，场上看了直接放弃。。</p><p>思路有点巧妙但并不难。。</p><p>设 $b$ 为给定的数列，由于</p><script type="math/tex; mode=display">b_i^2\equiv b_{i-1}b_{i+1}\pmod{p}</script><p>所以 $b<em>i^2-b</em>{i-1}b_{i+1}$ 必然是 $p$ 的倍数</p><p>对所有的 $b<em>i^2-b</em>{i-1}b_{i+1}$ 取 $gcd$ ，枚举其因子再判断就可以了。。</p><p>判断的时候要判断这 $n$ 个数的递推关系，还要求 $a$ 必须出现，所以要用 $BSGS$ 判断当前某个数是否为 $a$ 的幂次，所以复杂度为 $O(n+\sqrt p)$</p><p>那么总复杂度上界为 $O(n*\sqrt b_{max}+b)$</p><p>可是当 $n\le2$ 的时候这个方法并不奏效。。</p><p>$n=1$ 时一定为 $unsure$ ，而 $n=2$ 时目测也是 $unsure$ 不过对两个相等且大于 $1$ 的数这个情况是不存在的，需要特判。。</p><p>确实是比较坑的题。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 100005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 300005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><span class="hljs-keyword">int</span> n,tot;<br>ll a[NM],cnt,inf,c[NM],ans1,ans2;<br><br><span class="hljs-function">ll <span class="hljs-title">mul</span><span class="hljs-params">(ll a,ll b)</span></span>&#123;<br>    __int128 t=a;<br>    t=t*b%inf;<br>    <span class="hljs-keyword">return</span> (ll)t;<br>&#125;<br><br><span class="hljs-function">ll <span class="hljs-title">qpow</span><span class="hljs-params">(ll x,ll t)</span></span>&#123;<span class="hljs-keyword">return</span> t?mul(qpow(mul(x,x)%inf,t&gt;&gt;<span class="hljs-number">1</span>),(t&amp;<span class="hljs-number">1</span>?x:<span class="hljs-number">1l</span>l)):<span class="hljs-number">1l</span>l;&#125;<br><br><span class="hljs-function">ll <span class="hljs-title">bsgs</span><span class="hljs-params">(ll a,ll b)</span></span>&#123;<br>    <span class="hljs-built_in">map</span>&lt;ll,ll&gt;v;<span class="hljs-keyword">int</span> n=<span class="hljs-built_in">sqrt</span>(inf)+<span class="hljs-number">1</span>;<br>    ll inv=qpow(a,inf<span class="hljs-number">-2</span>),t=qpow(a,n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++,b=mul(b,inv))<span class="hljs-keyword">if</span>(!v.count(b))v[b]=i;<br>    ll k=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=n;i++,k=mul(k,t))<span class="hljs-keyword">if</span>(v.count(k))<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(ll t)</span></span>&#123;<br>    inf=t;<br>    cnt=mul(a[<span class="hljs-number">2</span>],qpow(a[<span class="hljs-number">1</span>],inf<span class="hljs-number">-2</span>));<br>    inc(i,<span class="hljs-number">2</span>,n)<span class="hljs-keyword">if</span>(mul(a[i<span class="hljs-number">-1</span>],cnt)!=a[i])<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">return</span> bsgs(cnt,a[<span class="hljs-number">1</span>]);<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();<br>    inc(i,<span class="hljs-number">1</span>,n)a[i]=read();<br>    <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>*<span class="hljs-built_in">puts</span>(<span class="hljs-string">"unsure"</span>);<br>    <span class="hljs-keyword">if</span>(n==<span class="hljs-number">2</span>)&#123;<br><span class="hljs-keyword">if</span>(a[<span class="hljs-number">1</span>]==a[<span class="hljs-number">2</span>]&amp;&amp;a[<span class="hljs-number">1</span>]&gt;<span class="hljs-number">1</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>*<span class="hljs-built_in">puts</span>(<span class="hljs-string">"error"</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>*<span class="hljs-built_in">puts</span>(<span class="hljs-string">"unsure"</span>);<br>    &#125;<br>    ll t=<span class="hljs-number">0</span>;<br>    inc(i,<span class="hljs-number">1</span>,n<span class="hljs-number">-2</span>)t=__gcd(t,<span class="hljs-built_in">abs</span>(sqr(a[i+<span class="hljs-number">1</span>])-a[i]*a[i+<span class="hljs-number">2</span>]));<br>    inc(i,<span class="hljs-number">1</span>,n)cnt=max(cnt,a[i]);<br>    <span class="hljs-keyword">if</span>(t==<span class="hljs-number">0</span>)&#123;<br><span class="hljs-keyword">if</span>(a[<span class="hljs-number">1</span>]==a[<span class="hljs-number">2</span>])&#123;<br>    <span class="hljs-built_in">puts</span>(a[<span class="hljs-number">1</span>]&gt;<span class="hljs-number">1</span>?<span class="hljs-string">"error"</span>:<span class="hljs-string">"unsure"</span>);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">"unsure"</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">2</span>;i*i&lt;=t;i++)<span class="hljs-keyword">if</span>(t%i==<span class="hljs-number">0</span>)&#123;<br><span class="hljs-keyword">while</span>(t%i==<span class="hljs-number">0</span>)t/=i;<br><span class="hljs-keyword">if</span>(i&gt;cnt)c[++tot]=i;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(t&gt;<span class="hljs-number">1</span>)c[++tot]=t;<br>    inc(i,<span class="hljs-number">1</span>,tot)<span class="hljs-keyword">if</span>(check(c[i]))&#123;<br><span class="hljs-keyword">if</span>(ans1&amp;&amp;ans2)<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>*<span class="hljs-built_in">puts</span>(<span class="hljs-string">"unsure"</span>);<br>ans1=cnt;ans2=inf;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(ans1&amp;&amp;ans2)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld %lld\n"</span>,ans1,ans2);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">"error"</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> BSGS </tag>
            
            <tag> unclassified </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>部分数论知识点证明补充</title>
      <link href="/exnum/"/>
      <url>/exnum/</url>
      
        <content type="html"><![CDATA[<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://riteme.site/blog/2018-9-11/time-space-complexity-dyh-algo.html" target="_blank" rel="noopener">https://riteme.site/blog/2018-9-11/time-space-complexity-dyh-algo.html</a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这篇主要是用来补充一些知识点的证明，会用不会证明可不行，做数学当然得注重证明过程</p><h3 id="数论分块"><a href="#数论分块" class="headerlink" title="数论分块"></a>数论分块</h3><p><strong>定义</strong>  $R(n)$ 为正整数集 ${\lfloor\frac{n}{d}\rfloor\mid1\le d\le n}$</p><p>我们知道 $|R(n)|=O(\sqrt n)$ ，因此对这类的和式可以分块求和处理。</p><p>之前有道题让我研究过， $\lfloor\frac{n}{d} \rfloor$ 的分布分为前 $\sqrt n$ 和后 $\sqrt n$ ，即前 $\sqrt n$ 个结果分布得比较稀疏 ，而 $1$ ~ $\sqrt n$ 均会在后 $\sqrt n$结果中出现。</p><p><strong>定理1</strong>  令 $\lfloor\frac{n}{d}\rfloor=k$ 成立的最大的 $d$ 为 $\lfloor\frac{n}{k} \rfloor$ ，最小的 $d$ 为 $\lfloor\frac{n}{k+1} \rfloor+1$</p><p><strong>证明</strong>   </p><p>若 $\lfloor\frac{n}{d}\rfloor=k$ ，则</p><script type="math/tex; mode=display">dk\le n <d(k+1)</script><p>则 $d$ 需满足</p><script type="math/tex; mode=display">\begin{aligned}d\le&\frac{n}{k}\\d>&\frac{n}{k+1}\end{aligned}</script><p>由于 $d$ 为整数，有</p><script type="math/tex; mode=display">\begin{aligned}d_{max}&=\lfloor\frac{n}{k}\rfloor\\d_{min}&=\lfloor\frac{n}{k+1} \rfloor+1\end{aligned}</script><p><br></p><p>那么分块时直接根据答案 $k$ 来决定块的上下界即可</p><p><br></p><p><strong>定理2</strong>   $\forall n,m\in \mathbb{N}$ ，若 $m\le\sqrt n$ ，则 $\lfloor n/\lfloor n/m\rfloor\rfloor=m$</p><p><strong>证明</strong>  </p><p>令 $k=\lfloor\frac{n}{m} \rfloor$ ，有</p><script type="math/tex; mode=display">\begin{eqnarray*}mk&\le n&<m(k+1)\\m&\le \frac{n}{k}&<\frac{m(k+1)}{k}\end{eqnarray*}</script><p>那么，若要 $\lfloor\frac{n}{k} \rfloor=m$ ，要 $\frac{m(k+1)}{k}\le m+1$ ，即 $m\le k=\lfloor\frac{n}{m} \rfloor$ ，即 $m\le \sqrt n$</p><p><br></p><p><strong>定理3</strong>  $|R(n)|=2\sqrt n+\Theta(1)$ </p><p><strong>证明</strong>  </p><p>当 $d&lt; \sqrt n$ 时，$\lfloor\frac{n}{d} \rfloor$ 对应不同的结果，对应前 $\sqrt n$ 个结果，此时 $\lfloor\frac{n}{d} \rfloor&gt;\sqrt n$</p><p>当 $d\ge \sqrt n$ 时，令 $k=\lfloor\frac{n}{d} \rfloor$ ，则 $k\le \sqrt n$ ，那么后 $\sqrt n$ 最多只有 $\sqrt n$ 个结果，由定理 $2$ 可知，对 $\forall k\le\sqrt n$ ，只要令 $d=\lfloor\frac{n}{k} \rfloor$ ，即可得到 $\lfloor\frac{n}{d} \rfloor=k$</p><p><br></p><p><strong>定理4</strong>   $\forall n\in \mathbb{N},\forall m\in R(n),R(m)\subseteq R(n)$  </p><p><strong>证明</strong>   令 $m=\lfloor\frac{n}{k}\rfloor$ ，则 $\lfloor\frac{m}{d}\rfloor=\lfloor\frac{\lfloor\frac{n}{k}\rfloor}{d}\rfloor=\lfloor\frac{n}{kd}\rfloor$ ，则 $\lfloor\frac{m}{d}\rfloor\in R(n)$</p><p><br></p><h3 id="杜教筛复杂度证明"><a href="#杜教筛复杂度证明" class="headerlink" title="杜教筛复杂度证明"></a>杜教筛复杂度证明</h3><p>之前看的 $tls$ 的博客确实没有看懂复杂度的证明，这里就根据参考文章给出杜教筛的复杂度证明(但并不同意 $tls$ 的证明是自欺欺人，肯定是窝太菜了)</p><p>从复杂度证明的角度看，杜教筛实际上是个分块套分块，所以直接对每个块的复杂度求个和即可</p><script type="math/tex; mode=display">\begin{aligned}T(n)&=\sum_{k\in R(n)}O(\sqrt k)\\&=\sum_{k=1}^{\sqrt n}O(\sqrt k)+\sum_{k=1}^{\sqrt n}O(\sqrt{\frac{n}{k}})\\&= O(\int_0^{\sqrt n}\sqrt xdx+\int_0^{\sqrt n}\sqrt{\frac{n}{x}}dx )\\&=O(n^{\frac{3}{4} })\end{aligned}</script><p>如果加上预处理，那么设预处理的复杂度为 $O(n)$ ，预处理的规模为 $S$ $(S\ge\sqrt n)$ ，那么有</p><script type="math/tex; mode=display">\begin{aligned}T(n)&=O(S)+\sum_{i=1}^{n/k>S}O(\sqrt{\frac{n}{k}})\\&=O(S)+O(\sqrt n\sqrt{\frac{n}{S}})\\&\ge O(n^{\frac{2}{3}})\end{aligned}</script><p>当且仅当 $S=n^{\frac{2}{3}}$ 时， $T(n)$ 最小</p><p><br></p>]]></content>
      
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BIT-I(计数)</title>
      <link href="/gym102174I/"/>
      <url>/gym102174I/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://codeforces.com/gym/102174/problem/I" target="_blank" rel="noopener">https://codeforces.com/gym/102174/problem/I</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>这个题和16年EC的题有点像，那个题是求 $\sum iB_i$ ，方法是把权值 $i$ 分配到每个点上，这道题的 $i^2$ 要分配到点对上，点对共有 $i(i-1)$ ，所以要变成 $\sum iB_i+\sum i(i-1)b_i$ ，然后分别对点和点对就进行贡献统计就可以了。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 100005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 10005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><br><span class="hljs-keyword">int</span> n,k;<br>ll s,ans;<br><span class="hljs-function">ll <span class="hljs-title">qpow</span><span class="hljs-params">(ll x,ll t)</span></span>&#123;<span class="hljs-keyword">return</span> t?qpow(sqr(x)%inf,t&gt;&gt;<span class="hljs-number">1</span>)*(t&amp;<span class="hljs-number">1</span>?x:<span class="hljs-number">1l</span>l)%inf:<span class="hljs-number">1l</span>l;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> _=read();<span class="hljs-keyword">while</span>(_--)&#123;<br>n=read();k=read();s=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span>(n&gt;=<span class="hljs-number">2</span>)<br>inc(i,<span class="hljs-number">1</span>,k)inc(j,<span class="hljs-number">1</span>,k)s+=qpow(i<span class="hljs-number">-1</span>,<span class="hljs-number">2</span>*(n<span class="hljs-number">-2</span>))*qpow(j<span class="hljs-number">-1</span>,<span class="hljs-number">2</span>*(n<span class="hljs-number">-2</span>))%inf*sqr(min(i<span class="hljs-number">-1</span>,j<span class="hljs-number">-1</span>))%inf,s%=inf;<br>ans=s*sqr(n)%inf*sqr(n<span class="hljs-number">-1</span>)%inf*qpow(k,sqr(n<span class="hljs-number">-2</span>))%inf;<br>s=<span class="hljs-number">0</span>;<br>inc(i,<span class="hljs-number">1</span>,k)s+=qpow(i<span class="hljs-number">-1</span>,<span class="hljs-number">2</span>*(n<span class="hljs-number">-1</span>)),s%=inf;<br>s=s*qpow(k,sqr(n<span class="hljs-number">-1</span>))%inf*sqr(n)%inf;<br>ans+=s;ans%=inf;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 组合数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hdu6532(费用流)</title>
      <link href="/hdu6532/"/>
      <url>/hdu6532/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6532" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=6532</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定一个$10^9\times10^9$ 的平面，平面上有 $n$ 个点，第 $i$  个点的权值为 $i$ ，然后给出 $m$ 个限制 $(a,b)$ ，表示选中的 $x\ge a$ 或者 $y\ge a$ 的点数不大于 $y$  ，现选中尽可能多的点，使得满足上述限制的情况下权值最大</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>对只有行的限制，可以将点往行连费用为 $i$ ，容量为 $1$ 的边</p><p>行之间相互连费用为 $0$ 的边，容量为当前行开始的最大点数</p><p>然后源点连向点跑费用流即可。。</p><p>现在有列的限制，而一个点无法流向两个，然后场上直接卡这了。。</p><p>其实只要让点对应的流量分别顺着行列流即可，又发现不一定非得从点流进流量，所以可以把点变成边，这样就能双向流流量，对应地列的连边方向也得倒过来，然后经过点从行流向列即可。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 1005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 10005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span>&#123;</span><span class="hljs-keyword">int</span> t,w,v;edge*next,*rev;&#125;e[nm],*h[NM],*o=e,*p[NM];<br><span class="hljs-keyword">void</span> _add(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y,<span class="hljs-keyword">int</span> w,<span class="hljs-keyword">int</span> v)&#123;o-&gt;v=v;o-&gt;w=w;o-&gt;t=y;o-&gt;next=h[x];h[x]=o++;&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y,<span class="hljs-keyword">int</span> w,<span class="hljs-keyword">int</span> v)</span></span>&#123;_add(x,y,w,v);_add(y,x,<span class="hljs-number">0</span>,-v);h[x]-&gt;rev=h[y];h[y]-&gt;rev=h[x];&#125;<br><span class="hljs-keyword">int</span> n,m,_x,_y,b[NM],c[NM],_b[NM],_c[NM],ans,tot,cnt;<br><span class="hljs-keyword">int</span> d[NM],w[NM];<br><span class="hljs-keyword">bool</span> v[NM];<br><span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt;q;<br><span class="hljs-keyword">char</span> _s[<span class="hljs-number">5</span>];<br><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">P</span>&#123;</span><span class="hljs-keyword">int</span> x,y;&#125;a[NM];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">spfa</span><span class="hljs-params">()</span></span>&#123;<br>    inc(i,<span class="hljs-number">0</span>,n)d[i]=inf;mem(w);<br>    q.push(<span class="hljs-number">0</span>);w[<span class="hljs-number">0</span>]=inf;d[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;v[<span class="hljs-number">0</span>]++;<br>    <span class="hljs-keyword">while</span>(!q.empty())&#123;<br><span class="hljs-keyword">int</span> t=q.front();q.pop();v[t]=<span class="hljs-literal">false</span>;<br>link(t)<span class="hljs-keyword">if</span>(j-&gt;w&amp;&amp;d[j-&gt;t]&gt;d[t]+j-&gt;v)&#123;<br>    d[j-&gt;t]=d[t]+j-&gt;v;p[j-&gt;t]=j;w[j-&gt;t]=min(w[t],j-&gt;w);<br>    <span class="hljs-keyword">if</span>(!v[j-&gt;t])q.push(j-&gt;t),v[j-&gt;t]++;<br>&#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> w[n];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();<br>    inc(i,<span class="hljs-number">1</span>,n)a[i].x=read(),a[i].y=read(),b[++tot]=a[i].x,c[++cnt]=a[i].y;<br>    sort(b+<span class="hljs-number">1</span>,b+<span class="hljs-number">1</span>+tot);tot=unique(b+<span class="hljs-number">1</span>,b+<span class="hljs-number">1</span>+tot)-b<span class="hljs-number">-1</span>;<br>    sort(c+<span class="hljs-number">1</span>,c+<span class="hljs-number">1</span>+cnt);cnt=unique(c+<span class="hljs-number">1</span>,c+<span class="hljs-number">1</span>+cnt)-c<span class="hljs-number">-1</span>;<br>    inc(i,<span class="hljs-number">1</span>,n)a[i].x=lower_bound(b+<span class="hljs-number">1</span>,b+<span class="hljs-number">1</span>+tot,a[i].x)-b,a[i].y=lower_bound(c+<span class="hljs-number">1</span>,c+<span class="hljs-number">1</span>+cnt,a[i].y)-c;<br>    inc(i,<span class="hljs-number">1</span>,tot)_b[i]=inf;<br>    inc(i,<span class="hljs-number">1</span>,cnt)_c[i]=inf;<br>    m=read();<span class="hljs-keyword">while</span>(m--)&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>,_s);_x=read();_y=read();<br><span class="hljs-keyword">if</span>(_s[<span class="hljs-number">0</span>]==<span class="hljs-string">'R'</span>)&#123;<br>    _x=lower_bound(b+<span class="hljs-number">1</span>,b+<span class="hljs-number">1</span>+tot,_x)-b;<br>    _b[_x]=min(_b[_x],_y);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    _x=lower_bound(c+<span class="hljs-number">1</span>,c+<span class="hljs-number">1</span>+cnt,_x)-c;<br>    _c[_x]=min(_c[_x],_y);<br>&#125;<br>    &#125;<br>    inc(i,<span class="hljs-number">2</span>,tot)_b[i]=min(_b[i],_b[i<span class="hljs-number">-1</span>]);<br>    inc(i,<span class="hljs-number">2</span>,cnt)_c[i]=min(_c[i],_c[i<span class="hljs-number">-1</span>]);<br>    <span class="hljs-comment">//inc(i,1,tot)printf("%d ",_b[i]);putchar('\n');</span><br>    <span class="hljs-comment">//inc(i,1,cnt)printf("%d ",_c[i]);putchar('\n');</span><br>    inc(i,<span class="hljs-number">1</span>,tot)add(i<span class="hljs-number">-1</span>,i,_b[i],<span class="hljs-number">0</span>);<br>    inc(i,<span class="hljs-number">2</span>,cnt)add(i+tot,i<span class="hljs-number">-1</span>+tot,_c[i],<span class="hljs-number">0</span>);<br>    add(tot+<span class="hljs-number">1</span>,tot+cnt+<span class="hljs-number">1</span>,_c[<span class="hljs-number">1</span>],<span class="hljs-number">0</span>);<br>    inc(i,<span class="hljs-number">1</span>,n)add(a[i].x,tot+a[i].y,<span class="hljs-number">1</span>,-i);<br>    n=tot+cnt+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(spfa())&#123;<br>ans-=w[n]*d[n];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> x=n;x;x=p[x]-&gt;rev-&gt;t)p[x]-&gt;w-=w[n],p[x]-&gt;rev-&gt;w+=w[n];<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>*<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,ans);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 网络流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hdu6537(杜教筛+埃筛)</title>
      <link href="/hdu6537/"/>
      <url>/hdu6537/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6537" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=6537</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>定义 $f(n,k)$ 为选择 $k$ 个大于 $1$ 的数使 $\prod a_i=n$ 的方案数</p><p>给定 $n,k$ ，求 $\sum_{i=1}^{n}f(i,k)$</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>由题意，有</p><script type="math/tex; mode=display">f(n,k)=\sum_{d|n}^{d<n}f(d,k)</script><p>这和杜教筛的推导非常相似，所以令</p><script type="math/tex; mode=display">S(n,k)=\sum_{i=1}^{n}f(i,k)</script><p>有</p><script type="math/tex; mode=display">S(n,k)=\sum_{i=2}^{n}s(\lfloor\frac{n}{i} \rfloor,k-1)</script><p>然后直接递归分块下去即可</p><p>当然还需要预处理前 $n$ 项，由于 $f(n,k)$ 不是积性函数不能用线性筛，然而 $f(n,k)$ 的求解需要枚举他的因子，所以可以用埃筛</p><p>复杂度可能比 $O(kn^{\frac{2}{3}})$ 要高一点。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 100005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 300005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><br><br><span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-keyword">int</span>,ll&gt;d[<span class="hljs-number">31</span>];<br><span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">bool</span>&gt;v[<span class="hljs-number">31</span>];<br><span class="hljs-keyword">int</span> n,m,cnt;<br>ll f[<span class="hljs-number">31</span>][NM];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123;<br>    cnt=<span class="hljs-number">1e5</span>;<br>    inc(i,<span class="hljs-number">2</span>,cnt)f[<span class="hljs-number">1</span>][i]=<span class="hljs-number">1</span>;<br>    inc(k,<span class="hljs-number">1</span>,<span class="hljs-number">15</span>)&#123;<br>inc(i,<span class="hljs-number">2</span>,cnt)<span class="hljs-keyword">if</span>(f[k][i])<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=i&lt;&lt;<span class="hljs-number">1</span>;j&lt;=cnt;j+=i)(f[k+<span class="hljs-number">1</span>][j]+=f[k][i])%=inf;<br>    &#125;<br>    inc(k,<span class="hljs-number">1</span>,<span class="hljs-number">16</span>)inc(i,<span class="hljs-number">1</span>,cnt)f[k][i]+=f[k][i<span class="hljs-number">-1</span>],f[k][i]%=inf;<br>&#125;<br><br><span class="hljs-function">ll <span class="hljs-title">F</span><span class="hljs-params">(<span class="hljs-keyword">int</span> m,<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(m==<span class="hljs-number">1</span>)<span class="hljs-keyword">return</span> (n<span class="hljs-number">-1</span>)%inf;<br>    <span class="hljs-keyword">if</span>(n&lt;(<span class="hljs-number">1</span>&lt;&lt;m))<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(n&lt;=cnt)<span class="hljs-keyword">return</span> f[m][n];<br>    <span class="hljs-keyword">if</span>(v[m][n])<span class="hljs-keyword">return</span> d[m][n];<br>    v[m][n]++;<br>    ll ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> x=<span class="hljs-number">2</span>,y;x&lt;=n;x=y+<span class="hljs-number">1</span>)&#123;<br>y=n/(n/x);<br>ans+=(y-x+<span class="hljs-number">1</span>)%inf*F(m<span class="hljs-number">-1</span>,n/x)%inf;ans%=inf;<br>    &#125;<br>    <span class="hljs-keyword">return</span> d[m][n]=ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    init();<br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d"</span>,&amp;n,&amp;m))&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,F(m,n));<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>comet-3-C(DP)</title>
      <link href="/comet-3-C/"/>
      <url>/comet-3-C/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.cometoj.com/contest/38/problem/C" target="_blank" rel="noopener">https://www.cometoj.com/contest/38/problem/C</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>先将完美序列这个条件做个等价的转化，一个长度为 $n$ 的序列的非空子序列和为</p><script type="math/tex; mode=display">\sum_{i=1}^n a_i 2^{n-1}</script><p>那么有一个比较暴力的想法是设 $dp[i][j][k]$ 为到第 $i$ 个数，选了 $j$ 个数，模 $m$ 为 $k$ 的序列的方案数</p><p>可是会发现复杂度为 $O(n^3)$ ，需要优化</p><p>考虑到 $2^{n-1}$ 这个因子能起作用范围为 $n\le \log m$ ，所以 $j$ 的取值范围实际上只有 $logm$ ，而且随着取数的增大，要满足的条件也变得越来越小，当取了 $j$ 个数，只需满足 $k|(m&gt;&gt;(j-1))$ 即可，所以 $k$ 的范围也可以降成 $m&gt;&gt;(j-1)$ ，那么通过等比数列求和，状态数就降成了 $O(nm)$ </p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 5005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 300005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><br><span class="hljs-keyword">int</span> n,m,<span class="hljs-keyword">_t</span>,tot,a[NM],b[NM];<br>ll d[<span class="hljs-number">2</span>][NM][NM],ans;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();m=read();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> x=m;x%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>;x&gt;&gt;=<span class="hljs-number">1</span>)tot++;<br>    tot++;<br>    inc(i,<span class="hljs-number">1</span>,tot)b[i]=m&gt;&gt;(i<span class="hljs-number">-1</span>);<br>    inc(i,<span class="hljs-number">1</span>,n)a[i]=read();<br>    d[<span class="hljs-keyword">_t</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    inc(i,<span class="hljs-number">1</span>,n)&#123;<br><span class="hljs-keyword">_t</span>^=<span class="hljs-number">1</span>;<br>inc(j,<span class="hljs-number">0</span>,tot)inc(k,<span class="hljs-number">0</span>,b[j])d[<span class="hljs-keyword">_t</span>][j][k]=d[<span class="hljs-keyword">_t</span>^<span class="hljs-number">1</span>][j][k];<br>inc(j,<span class="hljs-number">0</span>,tot)inc(k,<span class="hljs-number">0</span>,b[j])<br>    (d[<span class="hljs-keyword">_t</span>][min(tot,j+<span class="hljs-number">1</span>)][(k+a[i])%b[min(tot,j+<span class="hljs-number">1</span>)]]+=d[<span class="hljs-keyword">_t</span>^<span class="hljs-number">1</span>][j][k])%=inf;<br><span class="hljs-comment">//inc(j,1,tot)&#123;inc(k,0,m-1)printf("%lld ",d[_t][j][k]);putchar('\n');&#125;putchar('\n');</span><br>    &#125;<br>    inc(j,<span class="hljs-number">1</span>,tot)ans+=d[<span class="hljs-keyword">_t</span>][j][<span class="hljs-number">0</span>],ans%=inf;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>*<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>loj150(多项式)</title>
      <link href="/loj150/"/>
      <url>/loj150/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://loj.ac/problem/150" target="_blank" rel="noopener">https://loj.ac/problem/150</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>多项式大集合，模板里面添加了样例便于 $Debug$</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 300005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 300005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">998244353</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,x%=inf,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><span class="hljs-keyword">int</span> n,k;<br>ll a[NM],b[NM],c[NM],inv[NM],_a[NM],_b[NM],_c[NM];<br><br><span class="hljs-function">ll <span class="hljs-title">qpow</span><span class="hljs-params">(ll x,ll t)</span></span>&#123;<span class="hljs-keyword">return</span> t?qpow(sqr(x)%inf,t&gt;&gt;<span class="hljs-number">1</span>)*(t&amp;<span class="hljs-number">1</span>?x:<span class="hljs-number">1l</span>l)%inf:<span class="hljs-number">1l</span>l;&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">FFT</span>&#123;</span><br>    <span class="hljs-keyword">int</span> n,bit,rev[NM];<br>    ll b[NM],invn;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fft</span><span class="hljs-params">(ll*a,<span class="hljs-keyword">int</span> f)</span></span>&#123;<br>inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)<span class="hljs-keyword">if</span>(i&lt;rev[i])swap(a[i],a[rev[i]]);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">1</span>;k&lt;n;k&lt;&lt;=<span class="hljs-number">1</span>)&#123;<br>    ll t=qpow(<span class="hljs-number">3</span>,(inf<span class="hljs-number">-1</span>)/k/<span class="hljs-number">2</span>);<span class="hljs-keyword">if</span>(f==<span class="hljs-number">-1</span>)t=qpow(t,inf<span class="hljs-number">-2</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i+=k&lt;&lt;<span class="hljs-number">1</span>)&#123;<br>ll w=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;k;j++,w=w*t%inf)&#123;<br>    ll x=a[i+j],y=w*a[i+j+k]%inf;<br>    a[i+j]=(x+y)%inf;a[i+j+k]=(x-y+inf)%inf;<br>&#125;<br>    &#125;<br>&#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">plu</span><span class="hljs-params">(ll*a,ll*_b,<span class="hljs-keyword">int</span> p,<span class="hljs-keyword">int</span> m)</span></span>&#123;<br>inc(i,<span class="hljs-number">0</span>,m<span class="hljs-number">-1</span>)b[i]=_b[i];<br><span class="hljs-keyword">for</span>(n=p+m+<span class="hljs-number">1</span>,bit=<span class="hljs-number">0</span>;succ(bit)&lt;n;bit++);n=succ(bit);<br>invn=qpow(n,inf<span class="hljs-number">-2</span>);inc(i,p,n)a[i]=<span class="hljs-number">0</span>;<br>inc(i,<span class="hljs-number">1</span>,n<span class="hljs-number">-1</span>)rev[i]=(rev[i&gt;&gt;<span class="hljs-number">1</span>]&gt;&gt;<span class="hljs-number">1</span>)|((i&amp;<span class="hljs-number">1</span>)&lt;&lt;(bit<span class="hljs-number">-1</span>));<br>fft(a,<span class="hljs-number">1</span>);fft(b,<span class="hljs-number">1</span>);inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)a[i]=a[i]*b[i]%inf;<br>fft(a,<span class="hljs-number">-1</span>);inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)a[i]=a[i]*invn%inf;<br>inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)b[i]=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">return</span> m+p;<br>    &#125;<br>&#125;fft;<br><span class="hljs-comment">/*<br>   testdata<br>   3 4<br>   7741211 4563131 231354345 78784213<br>   4611513 153131531 44132112 431314040 111<br>   output<br>   478854610 284047680 956908296 279654258 728967858 167332085 24933137 759092819 <br> */</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pinv</span><span class="hljs-params">(ll*b,ll*a,<span class="hljs-keyword">int</span> m)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(m==<span class="hljs-number">1</span>)&#123;b[<span class="hljs-number">0</span>]=qpow(a[<span class="hljs-number">0</span>],inf<span class="hljs-number">-2</span>);<span class="hljs-keyword">return</span>;&#125;<br>    pinv(b,a,m+<span class="hljs-number">1</span>&gt;&gt;<span class="hljs-number">1</span>);<br>    inc(i,<span class="hljs-number">0</span>,m<span class="hljs-number">-1</span>)_b[i]=b[i];<br>    fft.plu(_b,a,m,m);<br>    inc(i,<span class="hljs-number">0</span>,m<span class="hljs-number">-1</span>)_b[i]=-_b[i];_b[<span class="hljs-number">0</span>]+=<span class="hljs-number">2</span>;<br>    fft.plu(b,_b,m,m);<br>&#125;<br><span class="hljs-comment">/*<br>   testdata<br>   5<br>   1 6 3 4 9<br>   output<br>   1 998244347 33 998244169 1020<br> */</span><br><br><span class="hljs-function">ll <span class="hljs-title">Sqrt</span><span class="hljs-params">(ll t)</span></span>&#123;<br>    ll a=<span class="hljs-number">0</span>,w;<br>    <span class="hljs-keyword">if</span>(qpow(t,inf<span class="hljs-number">-1</span>&gt;&gt;<span class="hljs-number">1</span>)+<span class="hljs-number">1</span>==inf)<span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    srand(time(<span class="hljs-number">0</span>));<br>    <span class="hljs-keyword">do</span>&#123;<br>a=rand()%inf;<br>w=(sqr(a)-t+inf)%inf;<br>    &#125;<span class="hljs-keyword">while</span>(qpow(w,inf<span class="hljs-number">-1</span>&gt;&gt;<span class="hljs-number">1</span>)+<span class="hljs-number">1</span>!=inf);<br>    ll ans=<span class="hljs-number">1</span>,_ans=<span class="hljs-number">0</span>,_x,_y;<br>    <span class="hljs-keyword">for</span>(ll n=inf+<span class="hljs-number">1</span>&gt;&gt;<span class="hljs-number">1</span>,x=a,y=<span class="hljs-number">1</span>;n;n&gt;&gt;=<span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">if</span>(n&amp;<span class="hljs-number">1</span>)&#123;<br>    _x=ans*x%inf+_ans*y%inf*w%inf;<br>    _y=ans*y%inf+_ans*x%inf;<br>    ans=_x%inf;_ans=_y%inf;<br>&#125;<br>_x=x*x%inf+y*y%inf*w%inf;<br>_y=<span class="hljs-number">2</span>*x*y%inf;<br>x=_x%inf;y=_y%inf;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-comment">/*<br>   testdata<br>   1154323<br>   inf=998244353<br>   output<br>   570381804 or 427862549<br> */</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">psqrt</span><span class="hljs-params">(ll*b,ll*a,<span class="hljs-keyword">int</span> m)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(m==<span class="hljs-number">1</span>)&#123;b[<span class="hljs-number">0</span>]=Sqrt(a[<span class="hljs-number">0</span>]);b[<span class="hljs-number">0</span>]=min(b[<span class="hljs-number">0</span>],inf-b[<span class="hljs-number">0</span>]);<span class="hljs-keyword">return</span>;&#125;<br>    psqrt(b,a,m+<span class="hljs-number">1</span>&gt;&gt;<span class="hljs-number">1</span>);<br>    pinv(_a,b,m);<br>    fft.plu(b,b,m,m);<br>    inc(i,<span class="hljs-number">0</span>,m<span class="hljs-number">-1</span>)b[i]+=a[i],_a[i]=_a[i]*(inf-inf/<span class="hljs-number">2</span>)%inf,b[i]%=inf,_a[i]%=inf;<br>    fft.plu(b,_a,m,m);<br>&#125;<br><span class="hljs-comment">/*<br>   testdata<br>   7<br>   1 8596489 489489 4894 1564 489 35789489<br>   output<br>   1 503420421 924499237 13354513 217017417 707895465 411020414<br> */</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pln</span><span class="hljs-params">(ll*b,ll*a,<span class="hljs-keyword">int</span> m)</span></span>&#123;<br>    assert(a[<span class="hljs-number">0</span>]==<span class="hljs-number">1</span>);<br>    pinv(b,a,m);<br>    inc(i,<span class="hljs-number">0</span>,m<span class="hljs-number">-2</span>)_a[i]=a[i+<span class="hljs-number">1</span>]*(i+<span class="hljs-number">1</span>)%inf;<br>    fft.plu(b,_a,m,m<span class="hljs-number">-1</span>);<br>    dec(i,m<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>)b[i]=b[i<span class="hljs-number">-1</span>]*inv[i]%inf;b[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">/*<br>   testdata<br>   6<br>   1 927384623 878326372 3882 273455637 998233543<br>   output<br>   0 927384623 817976920 427326948 149643566 610586717<br> */</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pexp</span><span class="hljs-params">(ll*b,ll*a,<span class="hljs-keyword">int</span> m)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(m==<span class="hljs-number">1</span>)&#123;assert(a[<span class="hljs-number">0</span>]==<span class="hljs-number">0</span>);b[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<span class="hljs-keyword">return</span>;&#125;<br>    pexp(b,a,m+<span class="hljs-number">1</span>&gt;&gt;<span class="hljs-number">1</span>);<br>    pln(_c,b,m);<br>    inc(i,<span class="hljs-number">0</span>,m<span class="hljs-number">-1</span>)_c[i]=a[i]-_c[i];_c[<span class="hljs-number">0</span>]++;<br>    fft.plu(b,_c,m,m);<br>&#125;<br><span class="hljs-comment">/*<br>   testdata<br>   6<br>   0 927384623 817976920 427326948 149643566 610586717<br>   output<br>   1 927384623 878326372 3882 273455637 998233543<br> */</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)a[i]=read();<br>    inv[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;inc(i,<span class="hljs-number">2</span>,n)inv[i]=inv[inf%i]*(inf-inf/i)%inf;<br>    pexp(b,a,n);<br>    inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld%c"</span>,b[i],<span class="hljs-string">" \n"</span>[i==n<span class="hljs-number">-1</span>]);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//test();</span><br>    n=read()+<span class="hljs-number">1</span>;k=read();<br>    inv[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;inc(i,<span class="hljs-number">2</span>,n)inv[i]=inv[inf%i]*(inf-inf/i)%inf;<br>    inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)a[i]=read();<br>    psqrt(b,a,n);<br>    pinv(c,b,n);<br>    dec(i,n,<span class="hljs-number">1</span>)c[i]=c[i<span class="hljs-number">-1</span>]*inv[i]%inf;c[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br>    pexp(b,c,n+<span class="hljs-number">1</span>);<br>    inc(i,<span class="hljs-number">1</span>,n)b[i]=(a[i]-b[i]+inf)%inf;<br>    b[<span class="hljs-number">0</span>]=(<span class="hljs-number">2</span>-b[<span class="hljs-number">0</span>]+inf)%inf;<br>    pln(c,b,n+<span class="hljs-number">1</span>);<br>    c[<span class="hljs-number">0</span>]++;<br>    pln(b,c,n+<span class="hljs-number">1</span>);<br>    inc(i,<span class="hljs-number">0</span>,n)b[i]=b[i]*k%inf;<br>    pexp(c,b,n+<span class="hljs-number">1</span>);<br>    inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)c[i]=c[i+<span class="hljs-number">1</span>]*(i+<span class="hljs-number">1</span>)%inf;<br>    inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-2</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld%c"</span>,c[i],<span class="hljs-string">" \n"</span>[i==n<span class="hljs-number">-2</span>]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> FFT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>luogu4726(多项式指数函数)</title>
      <link href="/luogu4726/"/>
      <url>/luogu4726/</url>
      
        <content type="html"><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定一个多项式 $A(x)$ ，求 $B(x)$ ，满足 $B(x)\equiv e^{A(x)}\pmod{x^n}$</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="多项式指数函数的含义"><a href="#多项式指数函数的含义" class="headerlink" title="多项式指数函数的含义"></a>多项式指数函数的含义</h4><p>仍然对指数函数做麦克劳林展开，得到</p><script type="math/tex; mode=display">e^{A(x)}=\sum_{i=0}^{\infty}\frac{A^i(x)}{i!}\pmod{x^n}</script><p><br></p><p>两种做法：</p><h4 id="方法一：牛顿迭代法"><a href="#方法一：牛顿迭代法" class="headerlink" title="方法一：牛顿迭代法"></a>方法一：牛顿迭代法</h4><p>见<a href="http://blog.miskcoo.com/2015/06/polynomial-with-newton-method" target="_blank" rel="noopener">http://blog.miskcoo.com/2015/06/polynomial-with-newton-method</a></p><p>主要思想和之前一样，均是从 $m$ 递推到 $2m$ ，这次给了一个更一般的形式的推导</p><p>已知函数 $G(x)$ ，求多项式 $f(x)\bmod{x^m}$ ，满足</p><script type="math/tex; mode=display">G(f(x))\equiv0\pmod{x^m}</script><p>当 $m=1$ 的时候是模方程的问题</p><p>当 $m&gt;1$ ，假设求出了</p><script type="math/tex; mode=display">G(f(x))\equiv0\pmod{x^{\lceil\frac{m}{2} \rceil}}</script><p>然后考虑对 $G(F(x))$ 在 $f(x)$ 进行泰勒展开</p><script type="math/tex; mode=display">G(F(x))=\sum_{k=0}^{\infty} \frac{G^{(k)}(f(x))}{k!}(F(x)-f(x))^k</script><p>当 $k&gt;2$ </p><script type="math/tex; mode=display">(F(x)-f(x))^k\equiv 0\pmod{x^m}</script><p>由于 $F(x)$ 满足 </p><script type="math/tex; mode=display">G(F(x))\equiv0\pmod{x^{\lceil\frac{m}{2} \rceil}}</script><p>所以 </p><script type="math/tex; mode=display">F(x)\equiv f(x)\pmod{x^{\lceil\frac{m}{2} \rceil}}</script><p>故</p><script type="math/tex; mode=display">G(F(x))\equiv G(f(x))+G'(f(x))(F(x)-f(x))\pmod{x^m}</script><p>结合</p><script type="math/tex; mode=display">G(F(x))\equiv 0\pmod{x^m}</script><p>化简得</p><script type="math/tex; mode=display">F(x)\equiv f(x)-\frac{G(f(x))}{G'(f(x))}\pmod{x^m}</script><p>将他代入各种多项式操作就可以得到我们之前得出的解法</p><p>对指数来说，我们应尽量避免，而此前已经得出对数的解法，所以直接取对数，得</p><script type="math/tex; mode=display">\begin{eqnarray*}\ln B(x)&\equiv& A(x)&\pmod{x^m}\\\ln B(x)-A(x)&\equiv& 0&\pmod{x^m}\end{eqnarray*}</script><p>令 $G(B(x))=\ln B(x)-A(x)$ ，得</p><p>当 $m=1$ 时，$B(x)=e^{a_0}$ ，而由于 $e$ 在模意义下并不能给出定义，所以除指数为 $0$ 外其他数都不能给出定义，因此可以看出多项式指数的存在性依赖于 $a_0$ 是否为 $0$</p><p>当 $m&gt;2$ ，</p><p>直接带入牛顿迭代，得</p><script type="math/tex; mode=display">\begin{eqnarray*}B(x)&\equiv&b(x)-\frac{\ln b(x)-A(x)}{(\ln b(x)-A(x))'}&\pmod{x^m}\\B(x)&\equiv&b(x)(1-\ln b(x)+A(x)) &\pmod{x^m}\\\end{eqnarray*}</script><p>复杂度为 $T(m)=T(\frac{m}{2})+O(mlogm)=O(mlogm)$ </p><p>不造都套上多少层这样的递归式了，每次其实常数都在翻倍，然后这个的常数据说能到达几十。。甚至比下面的分治 $FFT$ 的 $O(mlog^2m)$ 要大，可是窝写出来的分治 $FFT$ 好像更慢qwq</p><p><br></p><h4 id="方法二：分治FFT"><a href="#方法二：分治FFT" class="headerlink" title="方法二：分治FFT"></a>方法二：分治FFT</h4><p>这个的想法比较简单，对两边求导</p><script type="math/tex; mode=display">\begin{eqnarray*}B'(x)&\equiv& A(x)e^{A(x)} &\pmod{x^m}\\B'(x)&\equiv&A(x)B(x)&\pmod{x^m}\\B(x)&\equiv&\int A(x)B(x)+C&\pmod{x^m}\end{eqnarray*}</script><p>显然 $C=1$ ，然后这就可以用分治 $FFT$ 做了，窝的写法貌似没别人优秀，所以跑得比上面的要慢。。</p><p><br></p><p>最终还是选择牛顿迭代，最关键的原因是好写啊。。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>牛顿迭代法</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 300005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 300005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">998244353</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><span class="hljs-keyword">int</span> n;<br>ll a[NM],b[NM],_a[NM],_b[NM],_c[NM],inv[NM];<br><br><span class="hljs-function">ll <span class="hljs-title">qpow</span><span class="hljs-params">(ll x,ll t)</span></span>&#123;<span class="hljs-keyword">return</span> t?qpow(sqr(x)%inf,t&gt;&gt;<span class="hljs-number">1</span>)*(t&amp;<span class="hljs-number">1</span>?x:<span class="hljs-number">1l</span>l)%inf:<span class="hljs-number">1l</span>l;&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">FFT</span>&#123;</span><br>    <span class="hljs-keyword">int</span> n,rev[NM],bit;<br>    ll b[NM],invn;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fft</span><span class="hljs-params">(ll*a,<span class="hljs-keyword">int</span> f)</span></span>&#123;<br>inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)<span class="hljs-keyword">if</span>(i&lt;rev[i])swap(a[i],a[rev[i]]);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">1</span>;k&lt;n;k&lt;&lt;=<span class="hljs-number">1</span>)&#123;<br>    ll t=qpow(<span class="hljs-number">3</span>,(inf<span class="hljs-number">-1</span>)/k/<span class="hljs-number">2</span>);<span class="hljs-keyword">if</span>(f==<span class="hljs-number">-1</span>)t=qpow(t,inf<span class="hljs-number">-2</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i+=k&lt;&lt;<span class="hljs-number">1</span>)&#123;<br>ll w=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;k;j++,w=w*t%inf)&#123;<br>    ll x=a[i+j],y=w*a[i+j+k]%inf;<br>    a[i+j]=(x+y)%inf;a[i+j+k]=(x-y+inf)%inf;<br>&#125;<br>    &#125;<br>&#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">plu</span><span class="hljs-params">(ll*a,ll*_b,<span class="hljs-keyword">int</span> p,<span class="hljs-keyword">int</span> m)</span></span>&#123;<br>inc(i,<span class="hljs-number">0</span>,m<span class="hljs-number">-1</span>)b[i]=_b[i];<br><span class="hljs-keyword">for</span>(n=p+m+<span class="hljs-number">1</span>,bit=<span class="hljs-number">0</span>;succ(bit)&lt;n;bit++);n=succ(bit);<br>invn=qpow(n,inf<span class="hljs-number">-2</span>);inc(i,p,n)a[i]=<span class="hljs-number">0</span>;<br>inc(i,<span class="hljs-number">1</span>,n<span class="hljs-number">-1</span>)rev[i]=(rev[i&gt;&gt;<span class="hljs-number">1</span>]&gt;&gt;<span class="hljs-number">1</span>)|((i&amp;<span class="hljs-number">1</span>)&lt;&lt;(bit<span class="hljs-number">-1</span>));<br>fft(a,<span class="hljs-number">1</span>);fft(b,<span class="hljs-number">1</span>);inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)a[i]=a[i]*b[i]%inf;<br>fft(a,<span class="hljs-number">-1</span>);inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)a[i]=a[i]*invn%inf;<br>inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)b[i]=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">return</span> m+p;<br>    &#125;<br>&#125;fft;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pinv</span><span class="hljs-params">(ll*b,ll*a,<span class="hljs-keyword">int</span> m)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(m==<span class="hljs-number">1</span>)&#123;b[<span class="hljs-number">0</span>]=qpow(a[<span class="hljs-number">0</span>],inf<span class="hljs-number">-2</span>);<span class="hljs-keyword">return</span>;&#125;<br>    pinv(b,a,m+<span class="hljs-number">1</span>&gt;&gt;<span class="hljs-number">1</span>);<br>    inc(i,<span class="hljs-number">0</span>,m<span class="hljs-number">-1</span>)_b[i]=b[i];<br>    fft.plu(_b,a,m,m);<br>    inc(i,<span class="hljs-number">0</span>,m<span class="hljs-number">-1</span>)_b[i]=-_b[i];_b[<span class="hljs-number">0</span>]+=<span class="hljs-number">2</span>;<br>    fft.plu(b,_b,m,m);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pln</span><span class="hljs-params">(ll*b,ll*a,<span class="hljs-keyword">int</span> m)</span></span>&#123;<br>    pinv(b,a,m);<br>    inc(i,<span class="hljs-number">0</span>,m<span class="hljs-number">-2</span>)_a[i]=a[i+<span class="hljs-number">1</span>]*(i+<span class="hljs-number">1</span>)%inf;<br>    fft.plu(b,_a,m,m<span class="hljs-number">-1</span>);<br>    dec(i,m<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>)b[i]=b[i<span class="hljs-number">-1</span>]*inv[i]%inf;b[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pexp</span><span class="hljs-params">(ll*b,ll*a,<span class="hljs-keyword">int</span> m)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(m==<span class="hljs-number">1</span>)&#123;b[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<span class="hljs-keyword">return</span>;&#125;<br>    pexp(b,a,m+<span class="hljs-number">1</span>&gt;&gt;<span class="hljs-number">1</span>);<br>    pln(_c,b,m);<br>    inc(i,<span class="hljs-number">0</span>,m<span class="hljs-number">-1</span>)_c[i]=a[i]-_c[i]<br>    _c[<span class="hljs-number">0</span>]++;<br>    fft.plu(b,_c,m,m);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)a[i]=read();<br>    inv[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;inc(i,<span class="hljs-number">2</span>,n)inv[i]=inv[inf%i]*(inf-inf/i)%inf;<br>    pexp(b,a,n);<br>    inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld%c"</span>,b[i],<span class="hljs-string">" \n"</span>[i==n<span class="hljs-number">-1</span>]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>分治 $FFT$</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 300005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 300005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">998244353</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><span class="hljs-keyword">int</span> n;<br>ll a[NM],b[NM],_a[NM],inv[NM];<br><br><span class="hljs-function">ll <span class="hljs-title">qpow</span><span class="hljs-params">(ll x,ll t)</span></span>&#123;<span class="hljs-keyword">return</span> t?qpow(sqr(x)%inf,t&gt;&gt;<span class="hljs-number">1</span>)*(t&amp;<span class="hljs-number">1</span>?x:<span class="hljs-number">1l</span>l)%inf:<span class="hljs-number">1l</span>l;&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">FFT</span>&#123;</span><br>    <span class="hljs-keyword">int</span> n,bit,rev[NM];<br>    ll b[NM],invn;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fft</span><span class="hljs-params">(ll*a,<span class="hljs-keyword">int</span> f)</span></span>&#123;<br>    inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)<span class="hljs-keyword">if</span>(i&lt;rev[i])swap(a[i],a[rev[i]]);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">1</span>;k&lt;n;k&lt;&lt;=<span class="hljs-number">1</span>)&#123;<br>        ll t=qpow(<span class="hljs-number">3</span>,(inf<span class="hljs-number">-1</span>)/k/<span class="hljs-number">2</span>);<span class="hljs-keyword">if</span>(f==<span class="hljs-number">-1</span>)t=qpow(t,inf<span class="hljs-number">-2</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i+=k&lt;&lt;<span class="hljs-number">1</span>)&#123;<br>        ll w=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;k;j++,w=w*t%inf)&#123;<br>            ll x=a[i+j],y=w*a[i+j+k]%inf;<br>            a[i+j]=(x+y)%inf;a[i+j+k]=(x-y+inf)%inf;<br>        &#125;<br>        &#125;<br>    &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">plu</span><span class="hljs-params">(ll*a,ll*_b,<span class="hljs-keyword">int</span> p,<span class="hljs-keyword">int</span> m)</span></span>&#123;<br>    inc(i,<span class="hljs-number">0</span>,m<span class="hljs-number">-1</span>)b[i]=_b[i];<br>    <span class="hljs-keyword">for</span>(n=p+m+<span class="hljs-number">1</span>,bit=<span class="hljs-number">0</span>;succ(bit)&lt;n;bit++);n=succ(bit);<br>    invn=qpow(n,inf<span class="hljs-number">-2</span>);<br>    inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)rev[i]=(rev[i&gt;&gt;<span class="hljs-number">1</span>]&gt;&gt;<span class="hljs-number">1</span>)|((i&amp;<span class="hljs-number">1</span>)&lt;&lt;(bit<span class="hljs-number">-1</span>));<br>    fft(a,<span class="hljs-number">1</span>);fft(b,<span class="hljs-number">1</span>);inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)a[i]=a[i]*b[i]%inf;<br>    fft(a,<span class="hljs-number">-1</span>);inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)a[i]=a[i]*invn%inf;<br>    inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)b[i]=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> m+p;<br>    &#125;<br>&#125;fft;<br><br><br><span class="hljs-keyword">void</span> _cdq(ll*a,ll*b,<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)&#123;<br>    <span class="hljs-keyword">if</span>(x==y)&#123;<span class="hljs-keyword">if</span>(x)b[x]=b[x]*inv[x]%inf;<span class="hljs-keyword">else</span> b[x]=<span class="hljs-number">1</span>;<span class="hljs-keyword">return</span>;&#125;<br>    _cdq(a,b,x,mid);<br>    inc(i,<span class="hljs-number">0</span>,y-x<span class="hljs-number">-1</span>)_a[i]=a[i+<span class="hljs-number">1</span>]*(i+<span class="hljs-number">1</span>)%inf;<br>    <span class="hljs-keyword">int</span> tot=fft.plu(_a,b+x,y-x,mid-x+<span class="hljs-number">1</span>);<br>    inc(i,mid,y<span class="hljs-number">-1</span>)b[i+<span class="hljs-number">1</span>]+=_a[i-x],b[i]%=inf;<br>    inc(i,<span class="hljs-number">0</span>,tot)_a[i]=<span class="hljs-number">0</span>;<br>    _cdq(a,b,mid+<span class="hljs-number">1</span>,y);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pexp</span><span class="hljs-params">(ll*b,ll*a,<span class="hljs-keyword">int</span> n)</span></span>&#123;_cdq(a,b,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>);&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)a[i]=read();<br>    inv[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;inc(i,<span class="hljs-number">2</span>,n)inv[i]=inv[inf%i]*(inf-inf/i)%inf;<br>    pexp(b,a,n);<br>    inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld%c"</span>,b[i],<span class="hljs-string">" \n"</span>[i==n<span class="hljs-number">-1</span>]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> FFT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>luogu4725(多项式对数)</title>
      <link href="/luogu4725/"/>
      <url>/luogu4725/</url>
      
        <content type="html"><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定多项式 $A(x)$ ，求多项式一个 $\bmod x^n$ 下的多项式 $B(x)$ ，使 $B(x)\equiv lnA(x)\pmod{x^n}$ </p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>多项式的对数的含义要结合麦克劳林级数，对 $A(x)=\sum<em>{i=1}^{\infin}a_ix^i$ ，有 $ln(1-A(x))=-\sum</em>{i=1}^{\infty}\frac{(A(x))^i}{i!}$</p><p>所以对 $ln(A(x))$ 来说，$A(x)$ 需满足常数项为 $1$ ，否则不能做单独的对数运算</p><p>如果常数项不为 $1$ ，可以把常数项提出来，可是 $ln a_0$ 这个在模意义下是没有给出定义的 ，所以如果不能处理 $ln a_0$ ，那么该式便无意义</p><p>求解 $lnA(x)$ 的方法也很简单，求导之后可得</p><script type="math/tex; mode=display">B'(x)\equiv\frac{A'(x)}{A(x)}\pmod{x^n}</script><p>那么可求得 $B’(x)$ 进而积分 $\int B’(x)dx+C= B(x)+C$ ，由于 $B(0)=ln A(0)=ln 1=0$ ，所以 $C=0$ ，故直接求不定积分就可以得到答案。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 300005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 300005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">998244353</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><span class="hljs-keyword">int</span> n;<br>ll a[NM],b[NM],_a[NM],_b[NM],inv[NM];<br><br><span class="hljs-function">ll <span class="hljs-title">qpow</span><span class="hljs-params">(ll x,ll t)</span></span>&#123;<span class="hljs-keyword">return</span> t?qpow(sqr(x)%inf,t&gt;&gt;<span class="hljs-number">1</span>)*(t&amp;<span class="hljs-number">1</span>?x:<span class="hljs-number">1l</span>l)%inf:<span class="hljs-number">1l</span>l;&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">FFT</span>&#123;</span><br>    <span class="hljs-keyword">int</span> n,bit,rev[NM];<br>    ll b[NM],invn;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fft</span><span class="hljs-params">(ll*a,<span class="hljs-keyword">int</span> f)</span></span>&#123;<br>inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)<span class="hljs-keyword">if</span>(i&lt;rev[i])swap(a[i],a[rev[i]]);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">1</span>;k&lt;n;k&lt;&lt;=<span class="hljs-number">1</span>)&#123;<br>    ll t=qpow(<span class="hljs-number">3</span>,(inf<span class="hljs-number">-1</span>)/k/<span class="hljs-number">2</span>);<span class="hljs-keyword">if</span>(f==<span class="hljs-number">-1</span>)t=qpow(t,inf<span class="hljs-number">-2</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i+=k&lt;&lt;<span class="hljs-number">1</span>)&#123;<br>ll w=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;k;j++,w=w*t%inf)&#123;<br>    ll x=a[i+j],y=w*a[i+j+k]%inf;<br>    a[i+j]=(x+y)%inf;a[i+j+k]=(x-y+inf)%inf;<br>&#125;<br>    &#125;<br>&#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">plu</span><span class="hljs-params">(ll*a,ll*_b,<span class="hljs-keyword">int</span> p,<span class="hljs-keyword">int</span> m)</span></span>&#123;<br>inc(i,<span class="hljs-number">0</span>,m)b[i]=_b[i];<br><span class="hljs-keyword">for</span>(n=p+m+<span class="hljs-number">1</span>,bit=<span class="hljs-number">0</span>;succ(bit)&lt;n;bit++);n=succ(bit);<br>invn=qpow(n,inf<span class="hljs-number">-2</span>);inc(i,p,n)a[i]=<span class="hljs-number">0</span>;<br>inc(i,<span class="hljs-number">1</span>,n<span class="hljs-number">-1</span>)rev[i]=(rev[i&gt;&gt;<span class="hljs-number">1</span>]&gt;&gt;<span class="hljs-number">1</span>)|((i&amp;<span class="hljs-number">1</span>)&lt;&lt;(bit<span class="hljs-number">-1</span>));<br>fft(a,<span class="hljs-number">1</span>);fft(b,<span class="hljs-number">1</span>);inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)a[i]=a[i]*b[i]%inf;<br>fft(a,<span class="hljs-number">-1</span>);inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)a[i]=a[i]*invn%inf;<br>inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)b[i]=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">return</span> m+p;<br>    &#125;<br>&#125;fft;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pinv</span><span class="hljs-params">(ll*b,ll*a,<span class="hljs-keyword">int</span> m)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(m==<span class="hljs-number">1</span>)&#123;b[<span class="hljs-number">0</span>]=qpow(a[<span class="hljs-number">0</span>],inf<span class="hljs-number">-2</span>);<span class="hljs-keyword">return</span>;&#125;<br>    pinv(b,a,m+<span class="hljs-number">1</span>&gt;&gt;<span class="hljs-number">1</span>);<br>    inc(i,<span class="hljs-number">0</span>,m<span class="hljs-number">-1</span>)_b[i]=b[i];<br>    fft.plu(_b,a,m,m);<br>    inc(i,<span class="hljs-number">0</span>,m<span class="hljs-number">-1</span>)_b[i]=-_b[i];_b[<span class="hljs-number">0</span>]+=<span class="hljs-number">2</span>;<br>    fft.plu(b,_b,m,m);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pln</span><span class="hljs-params">(ll*b,ll*a,<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>    pinv(b,a,n);<br>    inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-2</span>)_a[i]=a[i+<span class="hljs-number">1</span>]*(i+<span class="hljs-number">1</span>)%inf;<br>    fft.plu(b,_a,n<span class="hljs-number">-1</span>,n);<br>    dec(i,n<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>)b[i]=b[i<span class="hljs-number">-1</span>]*inv[i]%inf;b[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)a[i]=read();<br>    inv[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;inc(i,<span class="hljs-number">2</span>,n)inv[i]=inv[inf%i]*(inf-inf/i)%inf;<br>    pln(b,a,n);<br>    inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld%c"</span>,b[i],<span class="hljs-string">" \n"</span>[i==n<span class="hljs-number">-1</span>]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> FFT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>luogu4512(多项式除法/取模)</title>
      <link href="/luogu4512/"/>
      <url>/luogu4512/</url>
      
        <content type="html"><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>类比平时的除法 $m=pn+q$</p><p>给定 $n$ 次多项式 $A(x)$ 和 $m$ 次多项式 $B(X)$ ，求 $C(x)$ 和 $D(X)$ ，满足 $A(x)=B(x)C(x)+D(x)$ ，其中 $C(X)$ 的次数为 $n-m$ ，$D(x)$ 的次数小于 $m$</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p><strong>注：题目要用 $0$ 把 $D(x)$ 补成 $m-1$ 次多项式，实际求解中应将 $0$ 系数项去掉，不然会出事</strong></p><p>先定义 $A^R(x)$ 为将 $A$ 系数翻转后的多项式，即 $(a<em>0,a_1…a_n)\rightarrow(a_n,a</em>{n-1}…a_0)$ </p><p>那么如何表示 $A^R(x)$ 呢？可以知道 $A^R(x)=x^nA(\frac{1}{x})$ 和 $A(x)=x^nA^R(\frac{1}{x})$</p><p>所以</p><script type="math/tex; mode=display">\begin{eqnarray*}A(x)&=&B(x)*C(x)+D(x)\\x^nA^R(\frac{1}{x})&=&x^mB^R(\frac{1}{x})*x^{n-m}C^R(\frac{1}{x})+x^{m-1}D^R(\frac{1}{x})\\A^R(\frac{1}{x})&=&B^R(\frac{1}{x})*C^R(\frac{1}{x})+x^{m-n-1}D^R(\frac{1}{x})\\A^R(x)&=&B^R(x)*C^R(x)+x^{n-m+1}D^R(x)\end{eqnarray*}</script><p>这里将 $D(x)$ 直接视作 $m-1$ 次多项式进行翻转</p><p>然后可以看到，翻转之后，如果将该方程对 $x^{n-m+1}$ 去模，那么$D^R(x)$ 就去掉了，而由于 $C^R(x)$ 是 $n-m$ 次多项式，因此此次去模对他没有影响，所以有</p><script type="math/tex; mode=display">A^R(x)\equiv B^R(x)*C^R(x)\pmod{x^{n-m+1}}</script><p>求解 $A^R(x)$ 的逆元即可得 $C^R(x)$ ，然后代进原方程得 $D(X)$</p><p>巧妙的构造。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 300005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 300005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">998244353</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><span class="hljs-keyword">int</span> n,m,_n,_m;<br>ll a[NM],b[NM],c[NM],d[NM],_b[NM],_c[NM];<br><br><span class="hljs-function">ll <span class="hljs-title">qpow</span><span class="hljs-params">(ll x,ll t)</span></span>&#123;<span class="hljs-keyword">return</span> t?qpow(sqr(x)%inf,t&gt;&gt;<span class="hljs-number">1</span>)*(t&amp;<span class="hljs-number">1</span>?x:<span class="hljs-number">1l</span>l)%inf:<span class="hljs-number">1l</span>l;&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">FFT</span>&#123;</span><br>    <span class="hljs-keyword">int</span> n,rev[NM],bit;<br>    ll b[NM],invn;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fft</span><span class="hljs-params">(ll*a,<span class="hljs-keyword">int</span> f)</span></span>&#123;<br>inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)<span class="hljs-keyword">if</span>(i&lt;rev[i])swap(a[i],a[rev[i]]);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">1</span>;k&lt;n;k&lt;&lt;=<span class="hljs-number">1</span>)&#123;<br>    ll t=qpow(<span class="hljs-number">3</span>,(inf<span class="hljs-number">-1</span>)/k/<span class="hljs-number">2</span>);<span class="hljs-keyword">if</span>(f==<span class="hljs-number">-1</span>)t=qpow(t,inf<span class="hljs-number">-2</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i+=k&lt;&lt;<span class="hljs-number">1</span>)&#123;<br>ll w=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;k;j++,w=w*t%inf)&#123;<br>    ll x=a[i+j],y=w*a[i+j+k]%inf;<br>    a[i+j]=(x+y)%inf;a[i+j+k]=(x-y+inf)%inf;<br>&#125;<br>    &#125;<br>&#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">plu</span><span class="hljs-params">(ll*a,ll*_b,<span class="hljs-keyword">int</span> p,<span class="hljs-keyword">int</span> m)</span></span>&#123;<br>inc(i,<span class="hljs-number">0</span>,m<span class="hljs-number">-1</span>)b[i]=_b[i];<br><span class="hljs-keyword">for</span>(n=p+m+<span class="hljs-number">1</span>,bit=<span class="hljs-number">0</span>;succ(bit)&lt;n;bit++);n=succ(bit);<br>invn=qpow(n,inf<span class="hljs-number">-2</span>);inc(i,p,n)a[i]=<span class="hljs-number">0</span>;<br>inc(i,<span class="hljs-number">1</span>,n<span class="hljs-number">-1</span>)rev[i]=(rev[i&gt;&gt;<span class="hljs-number">1</span>]&gt;&gt;<span class="hljs-number">1</span>)|((i&amp;<span class="hljs-number">1</span>)&lt;&lt;(bit<span class="hljs-number">-1</span>));<br>fft(a,<span class="hljs-number">1</span>);fft(b,<span class="hljs-number">1</span>);inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)a[i]=a[i]*b[i]%inf;<br>fft(a,<span class="hljs-number">-1</span>);inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)a[i]=a[i]*invn%inf;<br>inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)b[i]=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">return</span> m+p;<br>    &#125;<br>&#125;fft;<br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">inv</span><span class="hljs-params">(ll*b,ll*a,<span class="hljs-keyword">int</span> m)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(m==<span class="hljs-number">1</span>)&#123;b[<span class="hljs-number">0</span>]=qpow(a[<span class="hljs-number">0</span>],inf<span class="hljs-number">-2</span>);<span class="hljs-keyword">return</span>;&#125;<br>    inv(b,a,m+<span class="hljs-number">1</span>&gt;&gt;<span class="hljs-number">1</span>);<br>    inc(i,<span class="hljs-number">0</span>,m<span class="hljs-number">-1</span>)_b[i]=b[i];<br>    fft.plu(_b,a,m,m);<br>    inc(i,<span class="hljs-number">0</span>,m<span class="hljs-number">-1</span>)_b[i]=-_b[i];<br>    _b[<span class="hljs-number">0</span>]+=<span class="hljs-number">2</span>;<br>    fft.plu(b,_b,m,m);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">div</span><span class="hljs-params">(ll*c,ll*d,ll*a,ll*b,<span class="hljs-keyword">int</span> n,<span class="hljs-keyword">int</span> m)</span></span>&#123;<br>    reverse(a,a+n);reverse(b,b+m);<br>    inv(_c,b,n-m+<span class="hljs-number">1</span>);<br>    inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)c[i]=a[i];<br>    fft.plu(c,_c,n,n-m+<span class="hljs-number">1</span>);<br>    reverse(a,a+n);reverse(b,b+m);reverse(c,c+n-m+<span class="hljs-number">1</span>);<br>    inc(i,<span class="hljs-number">0</span>,m<span class="hljs-number">-1</span>)d[i]=b[i];<br>    fft.plu(d,c,m,n-m+<span class="hljs-number">1</span>);<br>    inc(i,<span class="hljs-number">0</span>,m<span class="hljs-number">-1</span>)d[i]=(a[i]-d[i]+inf)%inf;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read()+<span class="hljs-number">1</span>;m=read()+<span class="hljs-number">1</span>;<br>    inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)a[i]=read();<br>    inc(i,<span class="hljs-number">0</span>,m<span class="hljs-number">-1</span>)b[i]=read();<br>    div(c,d,a,b,n,m);<br>    _n=n-m+<span class="hljs-number">1</span>;_m=m<span class="hljs-number">-1</span>;<br>    inc(i,<span class="hljs-number">0</span>,_n<span class="hljs-number">-1</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld%c"</span>,c[i],<span class="hljs-string">" \n"</span>[i==_n<span class="hljs-number">-1</span>]);<br>    inc(i,<span class="hljs-number">0</span>,_m<span class="hljs-number">-1</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld%c"</span>,d[i],<span class="hljs-string">" \n"</span>[i==_m<span class="hljs-number">-1</span>]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> FFT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ural1132(二次剩余模板)</title>
      <link href="/ural1132/"/>
      <url>/ural1132/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://cn.vjudge.net/problem/URAL-1132" target="_blank" rel="noopener">https://cn.vjudge.net/problem/URAL-1132</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>求解方程 $x^2\equiv t\pmod{p}$</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>欧拉准则：</p><p>令勒让德符号 $\left(\frac{t}{p} \right)=t^{\frac{p-1}{2}}\bmod p$</p><p>当 $\left(\frac{t}{p}\right)=0$ 时， $p|t$</p><p>当 $\left(\frac{t}{p}\right)=1$ 时， $t$ 为二次剩余</p><p>当 $\left(\frac{t}{p}\right)=-1$ 时， $t$ 为非二次剩余</p><p>证明：</p><p>$t$ 与 $p$ 不互质显然$\left(\frac{t}{p}\right)=0$</p><p>当 $t$ 与 $p$ 互质</p><script type="math/tex; mode=display">t^{p-1}\equiv1\pmod{p}</script><p>所以</p><script type="math/tex; mode=display">t^{\frac{p-1}{2}}\equiv\pm1\pmod p</script><p>必要性：</p><p>当 $t$ 为二次剩余，那么存在 $x$ ，满足</p><script type="math/tex; mode=display">\begin{eqnarray*}x^2&\equiv&t&\pmod p\\x^{p-1}&\equiv&t^{\frac{p-1}{2}}&\pmod p\\t^{\frac{p-1}{2}}&\equiv&1&\pmod p\end{eqnarray*}</script><p>充分性：</p><p>令 $g$ 为 $p$ 的一个原根，且 $t=g^k$ ，那么</p><script type="math/tex; mode=display">g^{\frac{k(p-1)}{2}}\equiv 1 \pmod p</script><p>由于 $g$ 的指标是 $p-1$ ，所以 $\frac{k(p-1)}{2}|(p-1)$ ，即 $\frac{k}{2}|1$ </p><p>所以 $k|2$ ，$t$ 为一个二次剩余</p><p>那么 $-1$ 的情况也一起证明了</p><p><br></p><p>有这个结论就可以用于构造了，任取一个数 $a$ ，满足 $w=a^2-t$ 为一个非二次剩余，那么 $x=(a+\sqrt w)^{\frac{p+1}{2}}$ 为一个二次剩余方程的解</p><p>证明：</p><p>首先证明 $(a+b)^p\equiv a^p+b^p\pmod p$</p><p>这个其实模方程的一个结论，因为展开之后会有二项式系数 $\binom{p}{i}$ ，由于 $p$ 为素数，所以只有第一项和最后一项不会被 $p$ 整除</p><p>然后有</p><script type="math/tex; mode=display">\begin{aligned}(a+\sqrt w)^{p+1}&=(a+\sqrt w)(a^p+{\sqrt w}^p)\\&=(a+\sqrt w)(a+w^{\frac{p-1}{2}}\sqrt w)\\&=(a+\sqrt w)(a-\sqrt w)\\&=a^2-w\\&=n\pmod p\end{aligned}</script><p>可是既然 $w$ 是非二次剩余，那又如何用 $\sqrt w$ 计算呢？把他们都看成 $x+y\sqrt w$ 的形式，不管这个数做何种运算，都会像复数一样最终化成 $x+y\sqrt w$ 的形式，因此只要算系数 $x$ 和 $y$ 就可以了，然后直接做快速幂即可。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 5005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 4005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><br><br>ll <span class="hljs-keyword">_t</span>,inf;<br><br><span class="hljs-function">ll <span class="hljs-title">qpow</span><span class="hljs-params">(ll x,ll t)</span></span>&#123;<span class="hljs-keyword">return</span> t?qpow(sqr(x)%inf,t&gt;&gt;<span class="hljs-number">1</span>)*(t&amp;<span class="hljs-number">1</span>?x:<span class="hljs-number">1l</span>l)%inf:<span class="hljs-number">1l</span>l;&#125;<br><br><span class="hljs-function">ll <span class="hljs-title">Sqrt</span><span class="hljs-params">(ll t,ll inf)</span></span>&#123;<br>    ll a=<span class="hljs-number">0</span>,w;<br>    <span class="hljs-keyword">if</span>(qpow(t,inf<span class="hljs-number">-1</span>&gt;&gt;<span class="hljs-number">1</span>)+<span class="hljs-number">1</span>==inf)<span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">do</span>&#123;<br>a=rand()%inf;<br>w=(sqr(a)-t+inf)%inf;<br>    &#125;<span class="hljs-keyword">while</span>(qpow(w,inf<span class="hljs-number">-1</span>&gt;&gt;<span class="hljs-number">1</span>)+<span class="hljs-number">1</span>!=inf);<br>    ll ans=<span class="hljs-number">1</span>,_ans=<span class="hljs-number">0</span>,_x,_y;<br>    <span class="hljs-keyword">for</span>(ll n=inf+<span class="hljs-number">1</span>&gt;&gt;<span class="hljs-number">1</span>,x=a,y=<span class="hljs-number">1</span>;n;n&gt;&gt;=<span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">if</span>(n&amp;<span class="hljs-number">1</span>)&#123;<br>    _x=ans*x%inf+_ans*y%inf*w%inf;<br>    _y=ans*y%inf+_ans*x%inf;<br>    ans=_x%inf;_ans=_y%inf;<br>&#125;<br>_x=x*x%inf+y*y%inf*w%inf;<br>_y=<span class="hljs-number">2</span>*x*y%inf;<br>x=_x%inf;y=_y%inf;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> _=read();<span class="hljs-keyword">while</span>(_--)&#123;<br><span class="hljs-keyword">_t</span>=read();inf=read();<span class="hljs-keyword">_t</span>%=inf;<br><span class="hljs-keyword">if</span>(inf==<span class="hljs-number">2</span>)&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"1\n"</span>);<span class="hljs-keyword">continue</span>;&#125;<br>ll ans=Sqrt(<span class="hljs-keyword">_t</span>,inf);<br><span class="hljs-keyword">if</span>(ans==<span class="hljs-number">-1</span>)<span class="hljs-built_in">puts</span>(<span class="hljs-string">"No root"</span>);<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">_t</span>=inf-ans;<br>    <span class="hljs-keyword">if</span>(ans&gt;<span class="hljs-keyword">_t</span>)swap(<span class="hljs-keyword">_t</span>,ans);<br>    <span class="hljs-keyword">if</span>(ans==<span class="hljs-keyword">_t</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld %lld\n"</span>,ans,<span class="hljs-keyword">_t</span>);<br>&#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>luogu5277(多项式开方)</title>
      <link href="/luogu5277/"/>
      <url>/luogu5277/</url>
      
        <content type="html"><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定一个 $n-1$ 次多项式 $F(x)$ ，求 $G(x)$ 使得 $G^2(x)\equiv F(x)\pmod {x^n}$</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>仿照 <a href="/luogu4238">多项式逆元的证明方法</a> 进行证明即可</p><p>求 $B(x)$ 满足</p><script type="math/tex; mode=display">\begin{eqnarray*}B^2(x)&\equiv&A(x)&\pmod{x^m}\end{eqnarray*}</script><p>当 $m=1$ ，只需求</p><script type="math/tex; mode=display">\begin{eqnarray*}b_0^2&\equiv&a_0^2&\pmod{x^m}\end{eqnarray*}</script><p>即可</p><p>这个一般用二次剩余做(可是窝太弱还不会)，所以留个坑</p><p>当 $m&gt;1$ ，</p><p>假设已知 $B’(x)$</p><script type="math/tex; mode=display">\begin{eqnarray*}{B'}^2(x)&\equiv&A(x)&\pmod{x^{\lceil\frac{m}{2} \rceil}}\end{eqnarray*}</script><p>那么</p><script type="math/tex; mode=display">\begin{eqnarray*}({B'}^2(x)-A(x))^2&\equiv&0&\pmod{x^m}\\({B'}^2(x)+A(x))^2&\equiv&4A(x)B'^2(x)&\pmod{x^m}\\(\frac{ {B'}^2(x)+A(x)}{2B'(x)})^2&\equiv&B^2(x)&\pmod{x^m}\\\frac{ {B'}^2(x)+A(x)}{2{B'}(x)}&\equiv&B(x)&\pmod{x^m}\end{eqnarray*}</script><p>然后直接递归算就可以了</p><p>复杂度为 $T(m)=T(\frac{m}{2})+O(mlogm)=O(mlogm)$ ，虽然套了多项式逆元但是复杂度并没有变大2333</p><p>最后多项式平方根的存在性依旧取决与 $a_0$ 是否为二次剩余</p><p>如果二次剩余方程有多解，那么该多项式也有多个平方根</p><p><em>然而题目要求最小的常系数，坑啊。。</em></p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 300005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 300005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">998244353</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><br><span class="hljs-keyword">int</span> n;<br>ll a[NM],b[NM],_a[NM],_b[NM];<br><br><span class="hljs-function">ll <span class="hljs-title">qpow</span><span class="hljs-params">(ll x,ll t)</span></span>&#123;<span class="hljs-keyword">return</span> t?qpow(sqr(x)%inf,t&gt;&gt;<span class="hljs-number">1</span>)*(t&amp;<span class="hljs-number">1</span>?x:<span class="hljs-number">1l</span>l)%inf:<span class="hljs-number">1l</span>l;&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">FFT</span>&#123;</span><br>    <span class="hljs-keyword">int</span> n,bit,rev[NM];<br>    ll b[NM],invn;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fft</span><span class="hljs-params">(ll*a,<span class="hljs-keyword">int</span> f)</span></span>&#123;<br>inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)<span class="hljs-keyword">if</span>(i&lt;rev[i])swap(a[i],a[rev[i]]);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">1</span>;k&lt;n;k&lt;&lt;=<span class="hljs-number">1</span>)&#123;<br>    ll t=qpow(<span class="hljs-number">3</span>,(inf<span class="hljs-number">-1</span>)/k/<span class="hljs-number">2</span>);<span class="hljs-keyword">if</span>(f==<span class="hljs-number">-1</span>)t=qpow(t,inf<span class="hljs-number">-2</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i+=k&lt;&lt;<span class="hljs-number">1</span>)&#123;<br>ll w=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;k;j++,w=w*t%inf)&#123;<br>    ll x=a[i+j],y=w*a[i+j+k]%inf;<br>    a[i+j]=(x+y)%inf;a[i+j+k]=(x-y+inf)%inf;<br>&#125;<br>    &#125;<br>&#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">plu</span><span class="hljs-params">(ll*a,ll*_b,<span class="hljs-keyword">int</span> p,<span class="hljs-keyword">int</span> m)</span></span>&#123;<br>inc(i,<span class="hljs-number">0</span>,m<span class="hljs-number">-1</span>)b[i]=_b[i];<br><span class="hljs-keyword">for</span>(n=p+m+<span class="hljs-number">1</span>,bit=<span class="hljs-number">0</span>;succ(bit)&lt;n;bit++);n=succ(bit);<br>invn=qpow(n,inf<span class="hljs-number">-2</span>);inc(i,p,n<span class="hljs-number">-1</span>)a[i]=<span class="hljs-number">0</span>;<br>inc(i,<span class="hljs-number">1</span>,n<span class="hljs-number">-1</span>)rev[i]=(rev[i&gt;&gt;<span class="hljs-number">1</span>]&gt;&gt;<span class="hljs-number">1</span>)|((i&amp;<span class="hljs-number">1</span>)&lt;&lt;(bit<span class="hljs-number">-1</span>));<br>fft(a,<span class="hljs-number">1</span>);fft(b,<span class="hljs-number">1</span>);inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)a[i]=a[i]*b[i]%inf;<br>fft(a,<span class="hljs-number">-1</span>);inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)a[i]=a[i]*invn%inf;<br>inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)b[i]=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">return</span> m+p;<br>    &#125;<br>&#125;fft;<br><br><span class="hljs-function">ll <span class="hljs-title">Sqrt</span><span class="hljs-params">(ll t)</span></span>&#123;<br>    ll a=<span class="hljs-number">0</span>,w;<br>    <span class="hljs-keyword">if</span>(qpow(t,inf<span class="hljs-number">-1</span>&gt;&gt;<span class="hljs-number">1</span>)+<span class="hljs-number">1</span>==inf)<span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    srand(time(<span class="hljs-number">0</span>));<br>    <span class="hljs-keyword">do</span>&#123;<br>a=rand()%inf;<br>w=(sqr(a)-t+inf)%inf;<br>    &#125;<span class="hljs-keyword">while</span>(qpow(w,inf<span class="hljs-number">-1</span>&gt;&gt;<span class="hljs-number">1</span>)+<span class="hljs-number">1</span>!=inf);<br>    ll ans=<span class="hljs-number">1</span>,_ans=<span class="hljs-number">0</span>,_x,_y;<br>    <span class="hljs-keyword">for</span>(ll n=inf+<span class="hljs-number">1</span>&gt;&gt;<span class="hljs-number">1</span>,x=a,y=<span class="hljs-number">1</span>;n;n&gt;&gt;=<span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">if</span>(n&amp;<span class="hljs-number">1</span>)&#123;<br>    _x=ans*x%inf+_ans*y%inf*w%inf;<br>    _y=ans*y%inf+_ans*x%inf;<br>    ans=_x%inf;_ans=_y%inf;<br>&#125;<br>_x=x*x%inf+y*y%inf*w%inf;<br>_y=<span class="hljs-number">2</span>*x*y%inf;<br>x=_x%inf;y=_y%inf;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">inv</span><span class="hljs-params">(ll*b,ll*a,<span class="hljs-keyword">int</span> m)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(m==<span class="hljs-number">1</span>)&#123;b[<span class="hljs-number">0</span>]=qpow(a[<span class="hljs-number">0</span>],inf<span class="hljs-number">-2</span>);<span class="hljs-keyword">return</span>;&#125;<br>    inv(b,a,m+<span class="hljs-number">1</span>&gt;&gt;<span class="hljs-number">1</span>);<br>    inc(i,<span class="hljs-number">0</span>,m<span class="hljs-number">-1</span>)_b[i]=b[i];<br>    fft.plu(_b,a,m,m);<br>    inc(i,<span class="hljs-number">0</span>,m<span class="hljs-number">-1</span>)_b[i]=-_b[i];<br>    _b[<span class="hljs-number">0</span>]+=<span class="hljs-number">2</span>;<br>    fft.plu(b,_b,m,m);<br>&#125;<br><br><span class="hljs-keyword">void</span> _sqrt(ll*b,ll*a,<span class="hljs-keyword">int</span> m)&#123;<br>    <span class="hljs-keyword">if</span>(m==<span class="hljs-number">1</span>)&#123;b[<span class="hljs-number">0</span>]=Sqrt(a[<span class="hljs-number">0</span>]);b[<span class="hljs-number">0</span>]=min(b[<span class="hljs-number">0</span>],inf-b[<span class="hljs-number">0</span>]);<span class="hljs-keyword">return</span>;&#125;<br>    _sqrt(b,a,m+<span class="hljs-number">1</span>&gt;&gt;<span class="hljs-number">1</span>);<br>    inv(_a,b,m);<br>    fft.plu(b,b,m,m);<br>    inc(i,<span class="hljs-number">0</span>,m<span class="hljs-number">-1</span>)b[i]+=a[i],_a[i]=_a[i]*(inf-inf/<span class="hljs-number">2</span>)%inf,b[i]%=inf,_a[i]%=inf;<br>    fft.plu(b,_a,m,m);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)a[i]=read();<br>    _sqrt(b,a,n);<br>    inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld%c"</span>,b[i],<span class="hljs-string">" \n"</span>[i==n<span class="hljs-number">-1</span>]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> FFT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>luogu4238(多项式逆元)</title>
      <link href="/luogu4238/"/>
      <url>/luogu4238/</url>
      
        <content type="html"><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定一个 $n-1$ 次多项式 $F(x)$ ，求 $n-1$ 次多项式 $G(x)$ ，满足 $F(x)G(x)\equiv 1\pmod{x^n}$</p><h3 id="文章出处"><a href="#文章出处" class="headerlink" title="文章出处"></a>文章出处</h3><p><a href="http://blog.miskcoo.com/2015/05/polynomial-inverse" target="_blank" rel="noopener">http://blog.miskcoo.com/2015/05/polynomial-inverse</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>多项式逆元，即给定一个多项式 $A(x)$ ，要求 $B(X)$ ，满足</p><script type="math/tex; mode=display">\begin{eqnarray}A(x)B(x)&\equiv&1&\pmod{x^m}\end{eqnarray}</script><p>这个的求解思路如下，若 $m=1$ ，那么 $B(x)=a_0^{-1}$</p><p>否则，可以转化为求解</p><script type="math/tex; mode=display">\begin{eqnarray}A(x)B'(x)&\equiv&1&\pmod{x^{\lceil\frac{m}{2} \rceil }}\end{eqnarray}</script><p>那么，两式相减，可得</p><script type="math/tex; mode=display">\begin{eqnarray}B(x)-B'(x)&\equiv&0&\pmod{x^{\lceil\frac{m}{2} \rceil}}\\(B(x)-B'(x))^2&\equiv&0&\pmod{x^m}\\B^2(x)&\equiv&2B(x)B'(x)-{B'}^2(x)&\pmod{x^m}\\A(x)B^2(x)&\equiv&2A(x)B(x)B'(x)-A(x){B'}^2(x)&\pmod{x^m}\\B(x)&\equiv&B'(x)(2-A(x)B'(x))&\pmod{x^m}\end{eqnarray}</script><p>然后就可以递归求解了</p><p>那么也可以看出，该多项式有没有逆元也是看 $a_0$ 的逆元存不存在的，这里所有多项式系数也是在模意义下的</p><p>乘法可以用 $FFT$ 算，复杂度为 $T(n)=T(\frac{n}{2})+O(nlogn)=O(nlogn)$</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 400005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 4005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">998244353</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><br><br><span class="hljs-function">ll <span class="hljs-title">qpow</span><span class="hljs-params">(ll x,ll t)</span></span>&#123;<span class="hljs-keyword">return</span> t?qpow(sqr(x)%inf,t&gt;&gt;<span class="hljs-number">1</span>)*(t&amp;<span class="hljs-number">1</span>?x:<span class="hljs-number">1l</span>l)%inf:<span class="hljs-number">1l</span>l;&#125;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">FFT</span>&#123;</span><br>    <span class="hljs-keyword">int</span> n,bit,rev[NM];<br>    ll b[NM],invn;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fft</span><span class="hljs-params">(ll*a,<span class="hljs-keyword">int</span> f)</span></span>&#123;<br>inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)<span class="hljs-keyword">if</span>(i&lt;rev[i])swap(a[i],a[rev[i]]);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">1</span>;k&lt;n;k&lt;&lt;=<span class="hljs-number">1</span>)&#123;<br>    ll t=qpow(<span class="hljs-number">3</span>,(inf<span class="hljs-number">-1</span>)/k/<span class="hljs-number">2</span>);<span class="hljs-keyword">if</span>(f==<span class="hljs-number">-1</span>)t=qpow(t,inf<span class="hljs-number">-2</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i+=k&lt;&lt;<span class="hljs-number">1</span>)&#123;<br>ll w=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;k;j++,w=w*t%inf)&#123;<br>    ll x=a[i+j],y=w*a[i+j+k]%inf;<br>    a[i+j]=(x+y)%inf;a[i+j+k]=(x-y+inf)%inf;<br>&#125;<br>    &#125;<br>&#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">plu</span><span class="hljs-params">(ll*a,ll*_b,<span class="hljs-keyword">int</span> p,<span class="hljs-keyword">int</span> m)</span></span>&#123;<br>inc(i,<span class="hljs-number">0</span>,m)b[i]=_b[i];<br><span class="hljs-keyword">for</span>(n=p+m+<span class="hljs-number">1</span>,bit=<span class="hljs-number">0</span>;succ(bit)&lt;n;bit++);n=succ(bit);<br>invn=qpow(n,inf<span class="hljs-number">-2</span>);<br>inc(i,<span class="hljs-number">1</span>,n<span class="hljs-number">-1</span>)rev[i]=(rev[i&gt;&gt;<span class="hljs-number">1</span>]&gt;&gt;<span class="hljs-number">1</span>)|((i&amp;<span class="hljs-number">1</span>)&lt;&lt;(bit<span class="hljs-number">-1</span>));<br>fft(a,<span class="hljs-number">1</span>);fft(b,<span class="hljs-number">1</span>);inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)a[i]=a[i]*b[i]%inf;<br>fft(a,<span class="hljs-number">-1</span>);inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)a[i]=a[i]*invn%inf;<br>inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)b[i]=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">return</span> m+p;<br>    &#125;<br>&#125;fft;<br><span class="hljs-keyword">int</span> n;<br>ll a[NM],_b[NM],b[NM];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">inv</span><span class="hljs-params">(ll*b,ll*a,<span class="hljs-keyword">int</span> m)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(m==<span class="hljs-number">1</span>)&#123;<br>b[<span class="hljs-number">0</span>]=qpow(a[<span class="hljs-number">0</span>],inf<span class="hljs-number">-2</span>);<br><span class="hljs-keyword">return</span>;<br>    &#125;<br>    inv(b,a,(m+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>);<br>    inc(i,<span class="hljs-number">0</span>,m<span class="hljs-number">-1</span>)_b[i]=b[i];<br>    fft.plu(_b,a,m,m);<br>    inc(i,<span class="hljs-number">0</span>,m<span class="hljs-number">-1</span>)_b[i]=-_b[i];<br>    _b[<span class="hljs-number">0</span>]+=<span class="hljs-number">2</span>;<br>    fft.plu(b,_b,m,m);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)a[i]=read();<br>    inv(b,a,n);<br>    inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld%c"</span>,b[i],<span class="hljs-string">" \n"</span>[i==n<span class="hljs-number">-1</span>]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> FFT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>comet-2-D(dfs+容斥)</title>
      <link href="/comet-2-D/"/>
      <url>/comet-2-D/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.cometoj.com/contest/37/problem/D?problem_id=1531" target="_blank" rel="noopener">https://www.cometoj.com/contest/37/problem/D?problem_id=1531</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>需要提取每个联通块的特征，再依次枚举，这个特征就是直径的中点了，显然直径的中点必然相同，那么固定中点去计数就可以了</p><p>中点可以在点上也可以在边上，然后 $DFS$ 统计不同深度的点数的前缀和，那么深度至多为 $k$ 的点集为 $2^{num_k}$ 个，然后做一下容斥就可以了。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 2005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 4005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">998244353</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span>&#123;</span><span class="hljs-keyword">int</span> t;edge*next;&#125;e[nm],*h[NM],*o=e;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;o-&gt;t=y;o-&gt;next=h[x];h[x]=o++;&#125;<br><span class="hljs-keyword">int</span> n,_x,_y,d[NM][NM];<br>ll p[NM],ans[NM];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> f,<span class="hljs-keyword">int</span> t)</span></span>&#123;<br>    d[_x][t]++;<br>    link(x)<span class="hljs-keyword">if</span>(j-&gt;t!=f)dfs(j-&gt;t,x,t+<span class="hljs-number">1</span>);<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();inc(i,<span class="hljs-number">2</span>,n)&#123;_x=read();_y=read();add(_x,_y);add(_y,_x);&#125;<br>    p[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;inc(i,<span class="hljs-number">1</span>,n)p[i]=p[i<span class="hljs-number">-1</span>]*<span class="hljs-number">2</span>%inf;<br>    ans[<span class="hljs-number">1</span>]=n<span class="hljs-number">-1</span>;<br>    inc(i,<span class="hljs-number">1</span>,n)link(i)<span class="hljs-keyword">if</span>(i&lt;j-&gt;t)&#123;<br>mem(d[i]);<br>dfs(_x=i,j-&gt;t,<span class="hljs-number">0</span>);<br>inc(k,<span class="hljs-number">1</span>,n)d[_x][k]+=d[_x][k<span class="hljs-number">-1</span>];<br>mem(d[j-&gt;t]);<br>dfs(_x=j-&gt;t,i,<span class="hljs-number">0</span>);<br>inc(k,<span class="hljs-number">1</span>,n)d[_x][k]+=d[_x][k<span class="hljs-number">-1</span>];<br>inc(k,<span class="hljs-number">1</span>,n/<span class="hljs-number">2</span>)&#123;<br>    ans[k&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]+=p[d[i][k]]*p[d[j-&gt;t][k]]%inf;<br>    ans[k&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]-=p[d[i][k<span class="hljs-number">-1</span>]]*p[d[j-&gt;t][k<span class="hljs-number">-1</span>]]%inf;<br>    ans[k&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]-=(p[d[i][k]]-p[d[i][k<span class="hljs-number">-1</span>]])*p[d[j-&gt;t][k<span class="hljs-number">-1</span>]]%inf;<br>    ans[k&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]-=p[d[i][k<span class="hljs-number">-1</span>]]*(p[d[j-&gt;t][k]]-p[d[j-&gt;t][k<span class="hljs-number">-1</span>]])%inf;<br>    ans[k&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]%=inf;<br>&#125;<br>    &#125;<br>    inc(i,<span class="hljs-number">1</span>,n)&#123;<br>link(i)&#123;<br>    mem(d[j-&gt;t]);<br>    dfs(_x=j-&gt;t,i,<span class="hljs-number">1</span>);<br>    inc(k,<span class="hljs-number">1</span>,n)d[_x][k]+=d[_x][k<span class="hljs-number">-1</span>];<br>&#125;<br>mem(d[i]);<br>dfs(_x=i,i,<span class="hljs-number">0</span>);<br>inc(k,<span class="hljs-number">1</span>,n)d[_x][k]+=d[_x][k<span class="hljs-number">-1</span>];<br>inc(k,<span class="hljs-number">1</span>,n/<span class="hljs-number">2</span>)&#123;<br>    ans[k&lt;&lt;<span class="hljs-number">1</span>]+=p[d[i][k]]-p[d[i][k<span class="hljs-number">-1</span>]],ans[k&lt;&lt;<span class="hljs-number">1</span>]%=inf;<br>    link(i)&#123;<br>ans[k&lt;&lt;<span class="hljs-number">1</span>]-=p[d[i][k<span class="hljs-number">-1</span>]-d[j-&gt;t][k<span class="hljs-number">-1</span>]]*(p[d[j-&gt;t][k]]-p[d[j-&gt;t][k<span class="hljs-number">-1</span>]])%inf;<br>ans[k&lt;&lt;<span class="hljs-number">1</span>]%=inf;<br>    &#125;<br>&#125;<br>    &#125;<br>    inc(i,<span class="hljs-number">1</span>,n<span class="hljs-number">-1</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,(ans[i]+inf)%inf);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 组合数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cf1149B(DP)</title>
      <link href="/cf1149B/"/>
      <url>/cf1149B/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://codeforces.com/contest/1149/problem/B" target="_blank" rel="noopener">https://codeforces.com/contest/1149/problem/B</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定一个串 $S$ $(|S|\le1e5)$ 和三个空串，$q$ 次操作 $(q\le1e3)$ ，每次操作在三个串后面加一个字符或者删去一个字符，每次操作后判断能不能把 $S$ 选出三个不相交的子序列使得这三个子序列和当前三个串相同</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>先考虑不带修的情况，那么最暴力的方法就是 $LCS$ ，设 $d[p][i][j][k]$ 表示到 $S$ 的 $p$ 位置，分别匹配到三个串的 $i$ 、$j$ 、$k$ 位置的情况</p><p>而发现这个 $DP$ 只有 $true/false$ ，非常浪费，所以考虑把存一维，设 $d[i][j][k]$ 表示匹配到三个串的 $i$ 、$j$ 、$k$ 位置时匹配到原串的最小位置，然后依旧 $LCS$ 转移就可以了，复杂度是 $O(q^3)$ </p><p>然后带修的其实加的无所谓，减的其实直接把减掉的状态去掉也就可以了，反而不是难点</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 100005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 255</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">998244353</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><br><span class="hljs-keyword">int</span> n,m,b[NM][<span class="hljs-number">26</span>],d[nm][nm][nm],_x,len[<span class="hljs-number">5</span>];<br><span class="hljs-keyword">char</span> s[NM],_s[<span class="hljs-number">5</span>],str[<span class="hljs-number">4</span>][<span class="hljs-number">255</span>];<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();m=read();<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>,s+<span class="hljs-number">1</span>);<br>    inc(j,<span class="hljs-number">0</span>,<span class="hljs-number">25</span>)b[n+<span class="hljs-number">1</span>][j]=n+<span class="hljs-number">1</span>;<br>    dec(i,n,<span class="hljs-number">0</span>)&#123;<br>inc(j,<span class="hljs-number">0</span>,<span class="hljs-number">25</span>)b[i][j]=b[i+<span class="hljs-number">1</span>][j];<br><span class="hljs-keyword">if</span>(i&lt;n)b[i][s[i+<span class="hljs-number">1</span>]-<span class="hljs-string">'a'</span>]=i+<span class="hljs-number">1</span>;<br>    &#125;<br>    d[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(m--)&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>,_s);<br><span class="hljs-keyword">if</span>(_s[<span class="hljs-number">0</span>]==<span class="hljs-string">'+'</span>)&#123;<br>    _x=read();<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>,_s);<br>    <span class="hljs-keyword">char</span> ch=_s[<span class="hljs-number">0</span>];<br>    len[_x]++;str[_x][len[_x]]=ch;<br>    <span class="hljs-keyword">if</span>(_x==<span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">int</span> i=len[_x];<br>inc(j,<span class="hljs-number">0</span>,len[<span class="hljs-number">2</span>])inc(k,<span class="hljs-number">0</span>,len[<span class="hljs-number">3</span>])&#123;<br>    d[i][j][k]=n+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(i)d[i][j][k]=min(d[i][j][k],b[d[i<span class="hljs-number">-1</span>][j][k]][str[<span class="hljs-number">1</span>][i]-<span class="hljs-string">'a'</span>]);<br>    <span class="hljs-keyword">if</span>(j)d[i][j][k]=min(d[i][j][k],b[d[i][j<span class="hljs-number">-1</span>][k]][str[<span class="hljs-number">2</span>][j]-<span class="hljs-string">'a'</span>]);<br>    <span class="hljs-keyword">if</span>(k)d[i][j][k]=min(d[i][j][k],b[d[i][j][k<span class="hljs-number">-1</span>]][str[<span class="hljs-number">3</span>][k]-<span class="hljs-string">'a'</span>]);<br>&#125;<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(_x==<span class="hljs-number">2</span>)&#123;<br><span class="hljs-keyword">int</span> j=len[_x];<br>inc(i,<span class="hljs-number">0</span>,len[<span class="hljs-number">1</span>])inc(k,<span class="hljs-number">0</span>,len[<span class="hljs-number">3</span>])&#123;<br>    d[i][j][k]=n+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(i)d[i][j][k]=min(d[i][j][k],b[d[i<span class="hljs-number">-1</span>][j][k]][str[<span class="hljs-number">1</span>][i]-<span class="hljs-string">'a'</span>]);<br>    <span class="hljs-keyword">if</span>(j)d[i][j][k]=min(d[i][j][k],b[d[i][j<span class="hljs-number">-1</span>][k]][str[<span class="hljs-number">2</span>][j]-<span class="hljs-string">'a'</span>]);<br>    <span class="hljs-keyword">if</span>(k)d[i][j][k]=min(d[i][j][k],b[d[i][j][k<span class="hljs-number">-1</span>]][str[<span class="hljs-number">3</span>][k]-<span class="hljs-string">'a'</span>]);<br>&#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">int</span> k=len[_x];<br>inc(i,<span class="hljs-number">0</span>,len[<span class="hljs-number">1</span>])inc(j,<span class="hljs-number">0</span>,len[<span class="hljs-number">2</span>])&#123;<br>    d[i][j][k]=n+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(i)d[i][j][k]=min(d[i][j][k],b[d[i<span class="hljs-number">-1</span>][j][k]][str[<span class="hljs-number">1</span>][i]-<span class="hljs-string">'a'</span>]);<br>    <span class="hljs-keyword">if</span>(j)d[i][j][k]=min(d[i][j][k],b[d[i][j<span class="hljs-number">-1</span>][k]][str[<span class="hljs-number">2</span>][j]-<span class="hljs-string">'a'</span>]);<br>    <span class="hljs-keyword">if</span>(k)d[i][j][k]=min(d[i][j][k],b[d[i][j][k<span class="hljs-number">-1</span>]][str[<span class="hljs-number">3</span>][k]-<span class="hljs-string">'a'</span>]);<br>&#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(d[len[<span class="hljs-number">1</span>]][len[<span class="hljs-number">2</span>]][len[<span class="hljs-number">3</span>]]&lt;=n)<span class="hljs-built_in">puts</span>(<span class="hljs-string">"YES"</span>);<span class="hljs-keyword">else</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">"NO"</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    _x=read();<br>    len[_x]--;<br>    <span class="hljs-keyword">if</span>(d[len[<span class="hljs-number">1</span>]][len[<span class="hljs-number">2</span>]][len[<span class="hljs-number">3</span>]]&lt;=n)<span class="hljs-built_in">puts</span>(<span class="hljs-string">"YES"</span>);<span class="hljs-keyword">else</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">"NO"</span>);<br>&#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>comet-2-E(概率DP+基环树+容斥+前缀和)</title>
      <link href="/comet-2-E/"/>
      <url>/comet-2-E/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.cometoj.com/contest/37/problem/E" target="_blank" rel="noopener">https://www.cometoj.com/contest/37/problem/E</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>显然是个基环森林，那先考虑树上的情况，是个简单的概率 $DP$ ，当然要做点小容斥</p><script type="math/tex; mode=display">dp[i]=1-\prod(1-dp[son]s[son])</script><p>树上缩成点的 $dp$ 值可以作为这个点自然醒来的概率，然后考虑环上的情况。。</p><p>考虑环上的任意一点时，该点叫醒谁是不用考虑的，因为自己醒不醒不可能反过来影响自己醒来的概率，这时环已经断成序列。。</p><p>所以直接断环复制一份，那么有</p><script type="math/tex; mode=display">dp[i]=p[i]+(1-p[i])dp[i-1]</script><p>这个是个线性递推式，可以写成矩阵乘法的形式，然后用线段树维护乘积或者直接构造逆矩阵维护前缀和什么的。。</p><p>不过实在是太不优雅了，然而题解又看不太懂。。</p><p>反正要总体考虑写成式子，那么不妨考虑每个点的贡献，有</p><script type="math/tex; mode=display">dp[i]=\sum_{j=i-n+1}^{i-1}p[j]\prod_{k=j+1}^{i-1}(1-p[k])s[k-1]</script><p>设后面乘积式的前缀乘积为 $g[i]$ ，有</p><script type="math/tex; mode=display">dp[i]=\sum_{j=i-n+1}^{i-1}p[j]g[i-1]/g[j]\\dp[i]=g[j]\sum_{j=i-n+1}^{n-1}p[j]/g[j]</script><p>维护前缀和就可以了。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 200005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 200005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">998244353</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span>&#123;</span><span class="hljs-keyword">int</span> t;ll v;edge*next;&#125;e[nm],*h[NM],*o=e;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y,ll v)</span></span>&#123;o-&gt;t=y;o-&gt;v=v;o-&gt;next=h[x];h[x]=o++;&#125;<br><span class="hljs-keyword">int</span> n,c[NM],f[NM],low[NM],tot;<br>ll a[NM],b[NM],d[NM],_x,_y,ans[NM],cnt;<br><span class="hljs-keyword">bool</span> v[NM];<br><br><span class="hljs-function">ll <span class="hljs-title">qpow</span><span class="hljs-params">(ll x,ll t)</span></span>&#123;<span class="hljs-keyword">return</span> t?qpow(sqr(x)%inf,t&gt;&gt;<span class="hljs-number">1</span>)*(t&amp;<span class="hljs-number">1</span>?x:<span class="hljs-number">1l</span>l)%inf:<span class="hljs-number">1l</span>l;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">tar</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br>    low[x]=_x;<br>    link(x)<span class="hljs-keyword">if</span>(low[j-&gt;t]==_x)<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> y=x;y!=f[j-&gt;t];y=f[y])c[++tot]=y,v[y]++;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!low[j-&gt;t])f[j-&gt;t]=x,tar(j-&gt;t);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br>    d[x]=<span class="hljs-number">1</span>;<br>    link(x)<span class="hljs-keyword">if</span>(f[x]!=j-&gt;t)&#123;<br>f[j-&gt;t]=x;<br>dfs(j-&gt;t);<br>d[x]=d[x]*(inf+<span class="hljs-number">1</span>-j-&gt;v*d[j-&gt;t]%inf)%inf;<br>    &#125;<br>    ans[x]=d[x]=(a[x]+(inf+<span class="hljs-number">1</span>-a[x])*(<span class="hljs-number">1</span>-d[x]+inf))%inf;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();inc(i,<span class="hljs-number">1</span>,n)a[i]=read(),a[i]=a[i]*qpow(read(),inf<span class="hljs-number">-2</span>)%inf;<br>    inc(i,<span class="hljs-number">1</span>,n)f[i]=read();<br>    inc(i,<span class="hljs-number">1</span>,n)&#123;<br>ll <span class="hljs-keyword">_t</span>=read();<span class="hljs-keyword">_t</span>=<span class="hljs-keyword">_t</span>*qpow(read(),inf<span class="hljs-number">-2</span>)%inf;<br>add(f[i],i,<span class="hljs-keyword">_t</span>);<br>    &#125;<br>    mem(f);<br>    inc(i,<span class="hljs-number">1</span>,n)<span class="hljs-keyword">if</span>(!low[i])&#123;<br>    tot=<span class="hljs-number">0</span>;<br>    tar(_x=i);<br>    <span class="hljs-keyword">if</span>(!tot)<span class="hljs-keyword">continue</span>;<br>    inc(i,<span class="hljs-number">1</span>,tot)&#123;<br>d[c[i]]=<span class="hljs-number">1</span>;<br>link(c[i])<span class="hljs-keyword">if</span>(!v[j-&gt;t])&#123;<br>    f[j-&gt;t]=c[i];<br>    dfs(j-&gt;t);<br>    d[c[i]]=d[c[i]]*(<span class="hljs-number">1</span>-j-&gt;v*d[j-&gt;t]%inf+inf)%inf;<br>&#125;<br>a[c[i]]=(a[c[i]]+(a[c[i]]<span class="hljs-number">-1</span>)*(d[c[i]]<span class="hljs-number">-1</span>))%inf;<br>    &#125;<br>    c[<span class="hljs-number">0</span>]=c[tot];<br>    inc(i,<span class="hljs-number">1</span>,tot)link(c[i])<span class="hljs-keyword">if</span>(j-&gt;t==c[i<span class="hljs-number">-1</span>])b[i]=j-&gt;v;<br>    inc(i,tot+<span class="hljs-number">1</span>,tot*<span class="hljs-number">2</span>)b[i]=b[i-tot],c[i]=c[i-tot];<br>    cnt=<span class="hljs-number">0</span>;b[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    inc(i,<span class="hljs-number">1</span>,tot)cnt=cnt*(inf+<span class="hljs-number">1</span>-a[c[i]])%inf*b[i]%inf,cnt+=a[c[i]],cnt%=inf,b[i]=b[i<span class="hljs-number">-1</span>]*b[i]%inf*(inf+<span class="hljs-number">1</span>-a[c[i]])%inf;<br>    inc(i,<span class="hljs-number">1</span>,tot)&#123;<br>cnt+=inf-a[c[i]]*b[i+tot<span class="hljs-number">-1</span>]%inf*qpow(b[i],inf<span class="hljs-number">-2</span>)%inf;cnt%=inf;<br>cnt=cnt*b[i+tot]%inf*(inf+<span class="hljs-number">1</span>-a[c[i]])%inf;cnt+=a[c[i]];cnt%=inf;<br>ans[c[i]]=cnt;<br>b[i+tot]=b[i+tot<span class="hljs-number">-1</span>]*b[i+tot]%inf*(inf+<span class="hljs-number">1</span>-a[c[i]])%inf;<br>    &#125;<br>    &#125;<br>    inc(i,<span class="hljs-number">1</span>,n)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld "</span>,ans[i]);<span class="hljs-built_in">putchar</span>(<span class="hljs-string">'\n'</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 组合数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bzoj2725(最短路+线段树)</title>
      <link href="/bzoj2725/"/>
      <url>/bzoj2725/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=2725" target="_blank" rel="noopener">https://www.lydsy.com/JudgeOnline/problem.php?id=2725</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>先随便抽个 $S$ 到 $T$ 的最短路出来</p><p>如果删的边不在这个最短路上显然没有影响</p><p>如果在这个最短路上，那么构造最短路图，是个 $DAG$ 图</p><p>最坏的情况是最短路边长，此时只有一条边为非树边</p><p>证明可以用反证法，设绕过的非树边为 $<x,y>$ ，那么 $S$ 到 $x$ 的路径在 $S$ 的最短路径树上，$y$ 到 $T$ 的路径在 $T$ 的最短路径数上</x,y></p><p>那么只要枚举一条边就可以了，如果能枚举到 $DAG$ 图上的边说明最短路不变</p><p>现在就剩下处理每条边能代替原最短路的哪些边了。。</p><p>设 $g_s[x]$ 表示离 $x$ 最近的最短路上的点，$g_t[x]$ 同理</p><p>那么影响的范围就是 $[g_s[x],g_t[x]]$ ，变成区间更新问题，直接线段树维护即可</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 200005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 400005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">1e18</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span>&#123;</span><span class="hljs-keyword">int</span> t;ll v;edge*next;&#125;e[nm],*h[NM],*o=e;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y,ll v)</span></span>&#123;o-&gt;t=y;o-&gt;v=v;o-&gt;next=h[x];h[x]=o++;&#125;<br><span class="hljs-keyword">int</span> n,m,g[NM],_g[NM],_x,_y,id[NM],S,T,tot,a[NM],p[NM];<br>ll d[NM],_d[NM],<span class="hljs-keyword">_t</span>;<br><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tmp</span>&#123;</span><br>    <span class="hljs-keyword">int</span> x;ll d;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-keyword">const</span> tmp&amp;o)<span class="hljs-keyword">const</span>&#123;<span class="hljs-keyword">return</span> d&gt;o.d;&#125;<br>&#125;;<br>priority_queue&lt;tmp&gt;q;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dij</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span></span>&#123;<br>    inc(i,<span class="hljs-number">1</span>,n)d[i]=inf;<br>    q.push(tmp&#123;u,d[u]=<span class="hljs-number">0</span>&#125;);<br>    <span class="hljs-keyword">while</span>(!q.empty())&#123;<br><span class="hljs-keyword">int</span> t=q.top().x;q.pop();<br>link(t)<span class="hljs-keyword">if</span>(d[j-&gt;t]&gt;d[t]+j-&gt;v)q.push(tmp&#123;j-&gt;t,d[j-&gt;t]=d[t]+j-&gt;v&#125;),p[j-&gt;t]=t;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br>    link(x)<span class="hljs-keyword">if</span>(!g[j-&gt;t]&amp;&amp;d[j-&gt;t]==d[x]+j-&gt;v)g[j-&gt;t]=g[x],dfs(j-&gt;t);<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span>&#123;</span><br>    <span class="hljs-keyword">int</span> x,y;ll s;<br>    node*l,*r;<br>    node(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y,node*l=<span class="hljs-number">0</span>,node*r=<span class="hljs-number">0</span>):x(x),y(y),l(l),r(r),s(inf)&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">()</span></span>&#123;l-&gt;s=min(l-&gt;s,s);r-&gt;s=min(r-&gt;s,s);&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">mod</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">if</span>(_y&lt;x||y&lt;_x)<span class="hljs-keyword">return</span>;<br><span class="hljs-keyword">if</span>(_x&lt;=x&amp;&amp;y&lt;=_y)&#123;s=min(s,<span class="hljs-keyword">_t</span>);<span class="hljs-keyword">return</span>;&#125;<br>l-&gt;mod();r-&gt;mod();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">out</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">if</span>(x==y)&#123;_d[x]=s;<span class="hljs-keyword">return</span>;&#125;<br>push();l-&gt;out();r-&gt;out();<br>    &#125;<br>&#125;*root;<br><span class="hljs-function">node*<span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<span class="hljs-keyword">return</span> x==y?<span class="hljs-keyword">new</span> node(x,y):<span class="hljs-keyword">new</span> node(x,y,build(x,mid),build(mid+<span class="hljs-number">1</span>,y));&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();m=read();<br>    inc(i,<span class="hljs-number">1</span>,m)&#123;_x=read();_y=read();<span class="hljs-keyword">_t</span>=read();add(_x,_y,<span class="hljs-keyword">_t</span>);add(_y,_x,<span class="hljs-keyword">_t</span>);&#125;<br>    S=read();T=read();<br>    <span class="hljs-keyword">if</span>(S==T)<span class="hljs-keyword">goto</span> la;<br>    dij(S);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> x=T;x!=S;x=p[x])&#123;<br>id[x]=++tot;a[tot]=x;<br>    &#125;<br>    id[S]=++tot;a[tot]=S;<br>    dec(i,tot,<span class="hljs-number">1</span>)g[a[i]]=a[i];<br>    dec(i,tot,<span class="hljs-number">1</span>)dfs(a[i]);<br>    inc(i,<span class="hljs-number">1</span>,n)_d[i]=d[i];<br>    inc(i,<span class="hljs-number">1</span>,n)_g[i]=g[i];<br>    dij(T);mem(g);<br>    inc(i,<span class="hljs-number">1</span>,tot)g[a[i]]=a[i];<br>    inc(i,<span class="hljs-number">1</span>,tot)dfs(a[i]);<br>    root=build(<span class="hljs-number">1</span>,tot<span class="hljs-number">-1</span>);<br>    inc(i,<span class="hljs-number">1</span>,n)link(i)<span class="hljs-keyword">if</span>(!id[i]||!id[j-&gt;t]||<span class="hljs-built_in">abs</span>(d[i]-d[j-&gt;t])&lt;+j-&gt;v)&#123;<br>_x=id[g[j-&gt;t]];_y=id[_g[i]]<span class="hljs-number">-1</span>;<span class="hljs-keyword">_t</span>=_d[i]+d[j-&gt;t]+j-&gt;v;<br><span class="hljs-comment">//printf("%d %d:%d %d %lld\n",i,j-&gt;t,_x,_y,_t);</span><br><span class="hljs-keyword">if</span>(_x&gt;_y)<span class="hljs-keyword">continue</span>;<br>root-&gt;mod();<br>    &#125;<br>    inc(i,<span class="hljs-number">1</span>,tot<span class="hljs-number">-1</span>)_d[i]=inf;<br>    root-&gt;out();<br>la:<br>    m=read();<span class="hljs-keyword">while</span>(m--)&#123;<br>_x=read();_y=read();<br><span class="hljs-keyword">if</span>(id[_x]&amp;&amp;id[_y]&amp;&amp;<span class="hljs-built_in">abs</span>(id[_x]-id[_y])==<span class="hljs-number">1</span>)&#123;<br>    <span class="hljs-keyword">if</span>(_d[min(id[_x],id[_y])]&lt;inf)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,_d[min(id[_x],id[_y])]);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Infinity\n"</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">if</span>(d[S]&lt;inf)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,d[S]);<span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Infinity\n"</span>);<br>&#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> 最短路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bzoj2165(倍增+flyod)</title>
      <link href="/bzoj2165/"/>
      <url>/bzoj2165/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=1491" target="_blank" rel="noopener">https://www.lydsy.com/JudgeOnline/problem.php?id=1491</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>设 $d[k][i][j]$ 为走 $2^k$ 步从 $i$ 房间走到 $j$ 房间时的最大楼层数</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3>]]></content>
      
      
      
        <tags>
            
            <tag> 最短路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bzoj3590(状压DP)</title>
      <link href="/bzoj3590/"/>
      <url>/bzoj3590/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=3590" target="_blank" rel="noopener">https://www.lydsy.com/JudgeOnline/problem.php?id=3590</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>和 <a href="/cf1155F">cf1155F</a> 一样，不过这题有重边，重边唯一的作用就是形成二元环，然后去重边之后就直接做。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 15</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 5005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><span class="hljs-keyword">int</span> n,m,tot,_x,_y,<span class="hljs-keyword">_t</span>,d[NM][NM][nm],g[nm],a[NM][NM];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">M</span><span class="hljs-params">(<span class="hljs-keyword">int</span>&amp;x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<span class="hljs-keyword">if</span>(x&gt;y)x=y;&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> _=read();<span class="hljs-keyword">while</span>(_--)&#123;<br>n=read();m=read();tot=succ(n)<span class="hljs-number">-1</span>;<br>inc(i,<span class="hljs-number">1</span>,n)inc(j,<span class="hljs-number">1</span>,n)inc(k,<span class="hljs-number">0</span>,tot)d[i][j][k]=inf;<br>inc(i,<span class="hljs-number">0</span>,tot)g[i]=inf;<br>inc(i,<span class="hljs-number">1</span>,n)inc(j,<span class="hljs-number">1</span>,n)<span class="hljs-keyword">if</span>(i!=j)a[i][j]=inf;<br><span class="hljs-keyword">while</span>(m--)&#123;<br>    _x=read();_y=read();<span class="hljs-keyword">_t</span>=read();<br>    <span class="hljs-keyword">if</span>(a[_x][_y]&lt;inf)&#123;<br>M(d[_x][_x][succ(_x<span class="hljs-number">-1</span>)|succ(_y<span class="hljs-number">-1</span>)],<span class="hljs-keyword">_t</span>+a[_x][_y]);<br>M(d[_y][_y][succ(_x<span class="hljs-number">-1</span>)|succ(_y<span class="hljs-number">-1</span>)],<span class="hljs-keyword">_t</span>+a[_x][_y]);<br>M(g[succ(_x<span class="hljs-number">-1</span>)|succ(_y<span class="hljs-number">-1</span>)],<span class="hljs-keyword">_t</span>+a[_x][_y]);<br>    &#125;<br>    M(a[_x][_y],<span class="hljs-keyword">_t</span>);M(a[_y][_x],<span class="hljs-keyword">_t</span>);<br>&#125;<br>inc(p,<span class="hljs-number">1</span>,n)&#123;<br>    d[p][p][succ(p<span class="hljs-number">-1</span>)]=<span class="hljs-number">0</span>;<br>    inc(j,<span class="hljs-number">0</span>,tot)<span class="hljs-keyword">if</span>(j&amp;succ(p<span class="hljs-number">-1</span>))&#123;<br>inc(i,<span class="hljs-number">1</span>,n)<span class="hljs-keyword">if</span>((i!=p||j==succ(p<span class="hljs-number">-1</span>))&amp;&amp;d[p][i][j]&lt;inf)&#123;<br>    <span class="hljs-keyword">if</span>(__builtin_popcount(j)&gt;<span class="hljs-number">2</span>&amp;&amp;a[i][p]&lt;inf)<br>M(g[j],d[p][i][j]+a[i][p]);<br>    inc(k,<span class="hljs-number">1</span>,n)<span class="hljs-keyword">if</span>(a[i][k]&lt;inf&amp;&amp;(!(j&amp;succ(k<span class="hljs-number">-1</span>))||(p==k&amp;&amp;__builtin_popcount(j)&gt;<span class="hljs-number">2</span>)))&#123;<br>M(d[p][k][j|succ(k<span class="hljs-number">-1</span>)],d[p][i][j]+a[i][k]);<br>    &#125;<br>&#125;<br>    &#125;<br>&#125;<br>inc(i,<span class="hljs-number">0</span>,tot)<span class="hljs-keyword">if</span>(g[i]&lt;inf)&#123;<br>    inc(x,<span class="hljs-number">1</span>,n)<span class="hljs-keyword">if</span>(i&amp;succ(x<span class="hljs-number">-1</span>))inc(y,<span class="hljs-number">1</span>,n)<span class="hljs-keyword">if</span>(i&amp;succ(y<span class="hljs-number">-1</span>))&#123;<br><span class="hljs-keyword">int</span> t=tot^i;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=t;j;j=t&amp;(j<span class="hljs-number">-1</span>))&#123;<br>    M(g[i|j],g[i]+d[x][y][j|succ(x<span class="hljs-number">-1</span>)|succ(y<span class="hljs-number">-1</span>)]);<br>&#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">if</span>(g[tot]&lt;inf)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,g[tot]);<span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">"impossible\n"</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cf1155(状压DP)</title>
      <link href="/cf1155F/"/>
      <url>/cf1155F/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://codeforces.com/contest/1155/problem/F" target="_blank" rel="noopener">https://codeforces.com/contest/1155/problem/F</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定一个边双联通图，求边数最大的子图，使得该子图仍然边双联通</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>挺有意思的一道题。。</p><p>需要考虑边双联通的性质，就是环套环，那么就考虑现在手上有一个双联通分量，要加点的时候就得加一条链进来，套进原双联通分量；或者是加一个新的环(简单环)，然后和原双联通分量有一个公共点就可以(有多个公共点的可以归入前一个情况)</p><p>然后我们要求出有多少链和简单环，这个就是普通的状压路径了。。</p><p>求出来之后，设$g[S]$ 为当前双联通分量的点集，然后把链或者简单环一个一个加进 $S$ 就可以了。。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 15</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 20005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><span class="hljs-keyword">int</span> n,m,_x,_y,tot;<br><span class="hljs-keyword">int</span> d[NM][NM][nm],f[NM][NM][nm],g[nm];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tmp</span>&#123;</span><span class="hljs-keyword">int</span> x,y,t;&#125;pre[nm];<br><span class="hljs-keyword">bool</span> a[NM][NM];<br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">out</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y,<span class="hljs-keyword">int</span> t)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> p=f[x][y][t];__builtin_popcount(t)&gt;<span class="hljs-number">1</span>;y=p,p=f[x][y][t])&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d %d\n"</span>,p,y);<br><span class="hljs-keyword">if</span>(x!=y)t^=succ(y<span class="hljs-number">-1</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();m=read();<br>    inc(i,<span class="hljs-number">1</span>,m)&#123;<br>_x=read();_y=read();<br>a[_x][_y]++;a[_y][_x]++;<br>    &#125;<br>    tot=succ(n)<span class="hljs-number">-1</span>;<br>    inc(j,<span class="hljs-number">0</span>,tot)g[j]=inf;<br>    inc(p,<span class="hljs-number">1</span>,n)&#123;<br>inc(i,<span class="hljs-number">1</span>,n)inc(j,<span class="hljs-number">0</span>,tot)d[p][i][j]=inf;<br>d[p][p][succ(p<span class="hljs-number">-1</span>)]=<span class="hljs-number">0</span>;<br>inc(j,<span class="hljs-number">0</span>,tot)<span class="hljs-keyword">if</span>(j&amp;succ(p<span class="hljs-number">-1</span>))&#123;<br>    inc(i,<span class="hljs-number">1</span>,n)<span class="hljs-keyword">if</span>(d[p][i][j]&lt;inf&amp;&amp;(p!=i||j==succ(p<span class="hljs-number">-1</span>)))&#123;<br><span class="hljs-keyword">if</span>(__builtin_popcount(j)&gt;<span class="hljs-number">2</span>&amp;&amp;a[i][p])&#123;<br>    <span class="hljs-keyword">if</span>(g[j]&gt;d[p][i][j]+<span class="hljs-number">1</span>)&#123;<br>g[j]=d[p][i][j]+<span class="hljs-number">1</span>;<br>pre[j]=tmp&#123;p,i,j&#125;;<br>    &#125;<br>&#125;<br>inc(k,<span class="hljs-number">1</span>,n)<span class="hljs-keyword">if</span>(a[i][k]&amp;&amp;((j&amp;succ(k<span class="hljs-number">-1</span>))==<span class="hljs-number">0</span>||(k==p&amp;&amp;__builtin_popcount(j)&gt;<span class="hljs-number">2</span>)))&#123;<br>    <span class="hljs-keyword">if</span>(d[p][k][j|succ(k<span class="hljs-number">-1</span>)]&gt;d[p][i][j]+<span class="hljs-number">1</span>)&#123;<br>d[p][k][j|succ(k<span class="hljs-number">-1</span>)]=d[p][i][j]+<span class="hljs-number">1</span>;<br>f[p][k][j|succ(k<span class="hljs-number">-1</span>)]=i;<br>    &#125;<br>&#125;<br>    &#125;<br>&#125;<br>    &#125;<br>    inc(i,<span class="hljs-number">0</span>,tot)<span class="hljs-keyword">if</span>(g[i]&lt;inf)&#123;<br>inc(x,<span class="hljs-number">1</span>,n)<span class="hljs-keyword">if</span>(i&amp;succ(x<span class="hljs-number">-1</span>))inc(y,<span class="hljs-number">1</span>,n)<span class="hljs-keyword">if</span>(i&amp;succ(y<span class="hljs-number">-1</span>))&#123;<br>    <span class="hljs-keyword">int</span> t=tot^i;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=t;j;j=t&amp;(j<span class="hljs-number">-1</span>))&#123;<br><span class="hljs-keyword">if</span>(g[i|j]&gt;g[i]+d[x][y][j|succ(x<span class="hljs-number">-1</span>)|succ(y<span class="hljs-number">-1</span>)])&#123;<br>    g[i|j]=g[i]+d[x][y][j|succ(x<span class="hljs-number">-1</span>)|succ(y<span class="hljs-number">-1</span>)];<br>    pre[i|j]=tmp&#123;x,y,j|succ(x<span class="hljs-number">-1</span>)|succ(y<span class="hljs-number">-1</span>)&#125;;<br>&#125;<br>    &#125;<br>&#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,g[tot]);<br>    <span class="hljs-keyword">while</span>(__builtin_popcount(tot)&gt;<span class="hljs-number">2</span>)&#123;<br>out(pre[tot].x,pre[tot].y,pre[tot].t);<br>tot=tot^pre[tot].t|succ(pre[tot].x<span class="hljs-number">-1</span>)|succ(pre[tot].y<span class="hljs-number">-1</span>);<br>    &#125;<br>    inc(i,<span class="hljs-number">1</span>,n)<span class="hljs-keyword">if</span>(tot&amp;succ(i<span class="hljs-number">-1</span>))&#123;<br>inc(j,i+<span class="hljs-number">1</span>,n)<span class="hljs-keyword">if</span>(tot&amp;succ(j<span class="hljs-number">-1</span>))&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d %d\n"</span>,i,j);<br>    <span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jskA1108(flyod+分治)</title>
      <link href="/jskA1108/"/>
      <url>/jskA1108/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://nanti.jisuanke.com/t/A1108" target="_blank" rel="noopener">https://nanti.jisuanke.com/t/A1108</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>我们只能处理经过连续几个点的最短路，然后加一个点的复杂度为 $O(n^2)$ ，而如果是两块合并的复杂度是 $O(n^3)$ ，这个是我们要避免的。然后就要尽量使用单点加入，这个和背包就有点类似了，所以仿照<a href="https://blog.csdn.net/qkoqhh/article/details/83625638" target="_blank" rel="noopener">分治背包</a>进行分治，分治到当前区间表示当前区间不能经过的最短路，然后只要统计叶子的最短路就可以了。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 305</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 20005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><span class="hljs-keyword">int</span> n,d[<span class="hljs-number">20</span>][NM][NM];<br>ll ans;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">div</span><span class="hljs-params">(<span class="hljs-keyword">int</span> k,<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(x==y)&#123;<br>inc(i,<span class="hljs-number">1</span>,n)<span class="hljs-keyword">if</span>(i!=x)inc(j,<span class="hljs-number">1</span>,n)<span class="hljs-keyword">if</span>(j!=x)&#123;<span class="hljs-keyword">if</span>(d[k][i][j]&lt;inf)ans+=d[k][i][j];<span class="hljs-keyword">else</span> ans--;&#125;<br><span class="hljs-keyword">return</span>;<br>    &#125;<br>    inc(i,<span class="hljs-number">1</span>,n)inc(j,<span class="hljs-number">1</span>,n)d[k+<span class="hljs-number">1</span>][i][j]=d[k][i][j];<br>    inc(v,mid+<span class="hljs-number">1</span>,y)inc(i,<span class="hljs-number">1</span>,n)inc(j,<span class="hljs-number">1</span>,n)d[k+<span class="hljs-number">1</span>][i][j]=min(d[k+<span class="hljs-number">1</span>][i][j],d[k+<span class="hljs-number">1</span>][i][v]+d[k+<span class="hljs-number">1</span>][v][j]);<br>    div(k+<span class="hljs-number">1</span>,x,mid);<br>    inc(i,<span class="hljs-number">1</span>,n)inc(j,<span class="hljs-number">1</span>,n)d[k+<span class="hljs-number">1</span>][i][j]=d[k][i][j];<br>    inc(v,x,mid)inc(i,<span class="hljs-number">1</span>,n)inc(j,<span class="hljs-number">1</span>,n)d[k+<span class="hljs-number">1</span>][i][j]=min(d[k+<span class="hljs-number">1</span>][i][j],d[k+<span class="hljs-number">1</span>][i][v]+d[k+<span class="hljs-number">1</span>][v][j]);<br>    div(k+<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,y);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();<br>    inc(i,<span class="hljs-number">1</span>,n)inc(j,<span class="hljs-number">1</span>,n)&#123;<br><span class="hljs-keyword">int</span> t=read();<span class="hljs-keyword">if</span>(t==<span class="hljs-number">-1</span>)t=inf;<br>d[<span class="hljs-number">0</span>][i][j]=t;<br>    &#125;<br>    div(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,n);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>*<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 分治 </tag>
            
            <tag> 最短路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jskA1766(flyod)</title>
      <link href="/jskA1766/"/>
      <url>/jskA1766/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近才知道自己 $flyod$ 还没入门。。 $flyod$ 本身是个 $DP$ ，他的状态是 $d[k][i][j]$ 表示 从 $i$ 到 $j$ 的最短路，其中 $i$ 和 $j$ 之间只能夹着前 $k$ 个点</p><p>那么转移的时候从 $d[k-1]$ 转移过来，尝试把 $k$ 加进去或者不加，那么有</p><script type="math/tex; mode=display">d[k][i][j]=min\{d[k-1][i][j],d[k-1][i][k]+d[k-1][k][j] \}</script><p>然后容易发现这个 $DP$ 最外层的 $k$ 可以直接去掉，所以才形成现在的优美的写法。。</p><p>这个转移是比较经典的，可以作为很多题的考点。。</p><h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://nanti.jisuanke.com/t/A1766" target="_blank" rel="noopener">https://nanti.jisuanke.com/t/A1766</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定 $n$ 个点的完全图和每个点的权值， $q$ 次查询，问从 $x$ 到 $y$ 的不经过权值大于 $w$ 的最短路</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>显然可以用 $flyod$ 预处理出前 $k$ 小权值点的最短路，然后直接二分或者离散化查询</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 205</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 20005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><br><span class="hljs-keyword">int</span> n,m,a[NM],tmp[NM],cnt,ca;<br>ll d[NM][NM][NM],ans[nm];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">P</span>&#123;</span><br>    <span class="hljs-keyword">int</span> x,y,i,t;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-keyword">const</span> P&amp;o)<span class="hljs-keyword">const</span>&#123;<span class="hljs-keyword">return</span> t&lt;o.t;&#125;<br>&#125;c[nm];<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<span class="hljs-keyword">return</span> a[x]&lt;a[y];&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> _=read();<span class="hljs-keyword">while</span>(_--)&#123;<br>n=read();m=read();<br>inc(i,<span class="hljs-number">1</span>,n)a[i]=read(),tmp[i]=i;<br>sort(tmp+<span class="hljs-number">1</span>,tmp+<span class="hljs-number">1</span>+n,cmp);<br>inc(i,<span class="hljs-number">1</span>,n)inc(j,<span class="hljs-number">1</span>,n)d[<span class="hljs-number">0</span>][i][j]=read();<br>inc(k,<span class="hljs-number">1</span>,n)inc(i,<span class="hljs-number">1</span>,n)inc(j,<span class="hljs-number">1</span>,n)d[k][i][j]=min(d[k<span class="hljs-number">-1</span>][i][j],d[k<span class="hljs-number">-1</span>][i][tmp[k]]+d[k<span class="hljs-number">-1</span>][tmp[k]][j]);<br>sort(a+<span class="hljs-number">1</span>,a+<span class="hljs-number">1</span>+n);<br>inc(i,<span class="hljs-number">1</span>,m)c[i].x=read(),c[i].y=read(),c[i].t=read(),c[i].i=i;<br>sort(c+<span class="hljs-number">1</span>,c+<span class="hljs-number">1</span>+m);<br>cnt=<span class="hljs-number">0</span>;<br>inc(i,<span class="hljs-number">1</span>,m)&#123;<br>    <span class="hljs-keyword">while</span>(cnt&lt;n&amp;&amp;a[cnt+<span class="hljs-number">1</span>]&lt;=c[i].t)cnt++;<br>    ans[c[i].i]=d[cnt][c[i].x][c[i].y];<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"Case #%d:\n"</span>,++ca);<br>inc(i,<span class="hljs-number">1</span>,m)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 最短路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性求逆元证明</title>
      <link href="/inv/"/>
      <url>/inv/</url>
      
        <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>记得是打多校的时候学到了线性求所有逆元的方法，递推式如下</p><script type="math/tex; mode=display">\begin{eqnarray*}i^{-1}\equiv-\lfloor\frac{inf}{i}\rfloor(inf && mod && i)&&&(mod&inf)\end{eqnarray*}</script><p>后面无意中发现证明方法，而且异常简单</p><p><a href="http://blog.miskcoo.com/2014/09/linear-find-all-invert" target="_blank" rel="noopener">原文请戳此处</a></p><p><br></p><h3 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h3><p>令 $inf=pi+r​$ ，有</p><script type="math/tex; mode=display">\begin{eqnarray*}pi+r&\equiv&0&\pmod{inf}\end{eqnarray*}</script><p>两边同乘 $i^{-1}\cdot r^{-1}$ </p><script type="math/tex; mode=display">\begin{eqnarray*}pr^{-1}+i^{-1}&\equiv&0&\pmod{inf} \\i^{-1}&\equiv&-pr^{-1}&\pmod{inf} \\i^{-1}&\equiv&-\lfloor\frac{inf}{i} \rfloor(inf\bmod i)&\pmod{inf}\end{eqnarray*}</script><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>也是异常简单</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)inv[i]=inv[inf%i]*(inf-inf/i)%inf<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xdoj1429(二次剩余+FFT)</title>
      <link href="/xdoj1429/"/>
      <url>/xdoj1429/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://acm.xidian.edu.cn/problem.php?id=1429" target="_blank" rel="noopener">http://acm.xidian.edu.cn/problem.php?id=1429</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>好像有个技巧叫做二次剩余，以后再学，看公式还是能懂</p><script type="math/tex; mode=display">\begin{equation}\begin{aligned}ans&=\sum_{i=1}^n\sum_{j=1}^n\lfloor\frac{n}{i} \rfloor\lfloor\frac{n}{j} \rfloor2^{ij}\\&=\sum_{i=1}^n\lfloor\frac{n}{i} \rfloor\sum_{j=1}^n\lfloor\frac{n}{j} \rfloor\sqrt 2^{i^2+j^2-(i-j)^2}\\&=2\sum_{i=1}^n\lfloor\frac{n}{i} \rfloor\sqrt2^{i^2}\sum_{j=1}^{i}\lfloor\frac{n}{j} \rfloor\sqrt2^{j^2}(\sqrt2)^{-(i-j)^2}-\sum_{i=1}^{n}\lfloor\frac{n}{i} \rfloor\lfloor\frac{n}{i} \rfloor2^{i^2}\end{aligned}\end{equation}</script><p>发现$f(i)=\sum_{j=1}^{i}\lfloor\frac{n}{j} \rfloor\sqrt2^{j^2}(\sqrt2)^{-(i-j)^2}$ 是个卷积，直接上 $FFT$ 就可以了，然后 $\sqrt2$ 直接暴力枚举找模意义下的值就可以，复杂度为 $O(nlogn)$</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 1000005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 105</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">998244353</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><span class="hljs-keyword">int</span> n;<br>ll t,a[NM],b[NM],ans;<br><br><span class="hljs-function">ll <span class="hljs-title">qpow</span><span class="hljs-params">(ll x,ll t)</span></span>&#123;<span class="hljs-keyword">return</span> t?qpow(sqr(x)%inf,t&gt;&gt;<span class="hljs-number">1</span>)*(t&amp;<span class="hljs-number">1</span>?x:<span class="hljs-number">1l</span>l)%inf:<span class="hljs-number">1l</span>l;&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">FFT</span>&#123;</span><br>    <span class="hljs-keyword">int</span> n,bit,rev[NM];<br>    ll b[NM],invn;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fft</span><span class="hljs-params">(ll*a,<span class="hljs-keyword">int</span> f)</span></span>&#123;<br>inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)<span class="hljs-keyword">if</span>(i&lt;rev[i])swap(a[i],a[rev[i]]);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">1</span>;k&lt;n;k&lt;&lt;=<span class="hljs-number">1</span>)&#123;<br>    ll t=qpow(<span class="hljs-number">3</span>,(inf<span class="hljs-number">-1</span>)/k/<span class="hljs-number">2</span>);<span class="hljs-keyword">if</span>(f==<span class="hljs-number">-1</span>)t=qpow(t,inf<span class="hljs-number">-2</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i+=k&lt;&lt;<span class="hljs-number">1</span>)&#123;<br>ll w=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;k;j++,w=w*t%inf)&#123;<br>    ll x=a[i+j],y=w*a[i+j+k]%inf;<br>    a[i+j]=(x+y)%inf;a[i+j+k]=(x-y+inf)%inf;<br>&#125;<br>    &#125;<br>&#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">plu</span><span class="hljs-params">(ll*a,ll*_b,<span class="hljs-keyword">int</span> p,<span class="hljs-keyword">int</span> m)</span></span>&#123;<br>inc(i,<span class="hljs-number">0</span>,m)b[i]=_b[i];<br><span class="hljs-keyword">for</span>(n=p+m+<span class="hljs-number">1</span>,bit=<span class="hljs-number">0</span>;succ(bit)&lt;n;bit++);n=succ(bit);<br>invn=qpow(n,inf<span class="hljs-number">-2</span>);<br>inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)rev[i]=(rev[i&gt;&gt;<span class="hljs-number">1</span>]&gt;&gt;<span class="hljs-number">1</span>)|((i&amp;<span class="hljs-number">1</span>)&lt;&lt;(bit<span class="hljs-number">-1</span>));<br>fft(a,<span class="hljs-number">1</span>);fft(b,<span class="hljs-number">1</span>);inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)a[i]=a[i]*b[i]%inf;<br>fft(a,<span class="hljs-number">-1</span>);inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)a[i]=a[i]*invn%inf;<br>inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)b[i]=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">return</span> p+m;<br>    &#125;<br>&#125;fft;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    t=<span class="hljs-number">116195171</span>;<br>    <span class="hljs-keyword">int</span> _=read();<span class="hljs-keyword">while</span>(_--)&#123;<br>n=read();ans=<span class="hljs-number">0</span>;<br>mem(a);mem(b);<br>inc(i,<span class="hljs-number">0</span>,n)a[i]=qpow(qpow(t,<span class="hljs-number">1l</span>l*i*i%(inf<span class="hljs-number">-1</span>)),inf<span class="hljs-number">-2</span>);<br>inc(i,<span class="hljs-number">1</span>,n)b[i]=n/i*qpow(t,<span class="hljs-number">1l</span>l*i*i%(inf<span class="hljs-number">-1</span>))%inf;<br>fft.plu(a,b,n,n);<br>inc(i,<span class="hljs-number">1</span>,n)ans+=b[i]*a[i]%inf,ans%=inf;<br>ans&lt;&lt;=<span class="hljs-number">1</span>;ans%=inf;<br>inc(i,<span class="hljs-number">1</span>,n)ans+=inf-qpow(<span class="hljs-number">2</span>,<span class="hljs-number">1l</span>l*i*i%(inf<span class="hljs-number">-1</span>))*(n/i)%inf*(n/i)%inf,ans%=inf;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> FFT </tag>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hdu5322(CDQ分治+FFT)</title>
      <link href="/hdu5322/"/>
      <url>/hdu5322/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5322" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=5322</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定数 $n(n\le10^5)$ ，定义一个排列的价值如下：</p><p>如果 $i&lt;j​$ 且 $p[i]&lt;p[j]​$ ，那么 $i​$ 和 $j​$ 连边，然后排列的价值等于各个联通块大小的乘积</p><p>现在要求所有联通块的价值的平方的和</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>首先考虑这个图的形态，可以发现各个联通块中的最右侧的点总是最大的，那么可以看成一些大的点支配了小的点。那么考虑最大的点，他必定会支配在他之前的所有点，然后剩下的点又可以看成一个子问题了。那么设答案为 $f(n)$ ，有</p><script type="math/tex; mode=display">f(n) =\sum_{i=1}^{n}A_{n-1}^{i-1}i^2f(n-i)\\=(n-1)!\sum_{i=1}^{n}i^2\frac{f(n-i)}{(n-i)!}</script><p>这显然是一个卷积，但是由于是和 $f$ 自身做卷积，所以不能直接做 $FFT$ 。难点就在卷积之前需要把前面的 $f$ 全部求出，所以可以用 $CDQ$ 分治边求边做卷积。复杂度为 $O(nlog^2n)$</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 2100005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 105</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">998244353</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><br><span class="hljs-keyword">int</span> n,cnt,tot;<br>ll f[NM],a[NM],b[NM],p[NM],inv[NM];<br><span class="hljs-function">ll <span class="hljs-title">qpow</span><span class="hljs-params">(ll x,ll t)</span></span>&#123;<span class="hljs-keyword">return</span> t?qpow(sqr(x)%inf,t&gt;&gt;<span class="hljs-number">1</span>)*(t&amp;<span class="hljs-number">1</span>?x:<span class="hljs-number">1l</span>l)%inf:<span class="hljs-number">1l</span>l;&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">FFT</span>&#123;</span><br>    <span class="hljs-keyword">int</span> n,bit,rev[NM];<br>    ll b[NM],invn;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fft</span><span class="hljs-params">(ll*a,<span class="hljs-keyword">int</span> f)</span></span>&#123;<br>inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)<span class="hljs-keyword">if</span>(i&lt;rev[i])swap(a[i],a[rev[i]]);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">1</span>;k&lt;n;k&lt;&lt;=<span class="hljs-number">1</span>)&#123;<br>    ll t=qpow(<span class="hljs-number">3</span>,(inf<span class="hljs-number">-1</span>)/k/<span class="hljs-number">2</span>);<span class="hljs-keyword">if</span>(f==<span class="hljs-number">-1</span>)t=qpow(t,inf<span class="hljs-number">-2</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i+=k&lt;&lt;<span class="hljs-number">1</span>)&#123;<br>ll w=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;k;j++,w=w*t%inf)&#123;<br>    ll x=a[i+j],y=w*a[i+j+k]%inf;<br>    a[i+j]=(x+y)%inf;a[i+j+k]=(x-y+inf)%inf;<br>&#125;<br>    &#125;<br>&#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">plu</span><span class="hljs-params">(ll*a,ll*_b,<span class="hljs-keyword">int</span> p,<span class="hljs-keyword">int</span> m)</span></span>&#123;<br>inc(i,<span class="hljs-number">0</span>,m)b[i]=_b[i];<br><span class="hljs-keyword">for</span>(n=p+m+<span class="hljs-number">1</span>,bit=<span class="hljs-number">0</span>;succ(bit)&lt;n;bit++);n=succ(bit);<br>invn=qpow(n,inf<span class="hljs-number">-2</span>);<br>inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)rev[i]=(rev[i&gt;&gt;<span class="hljs-number">1</span>]&gt;&gt;<span class="hljs-number">1</span>)|((i&amp;<span class="hljs-number">1</span>)&lt;&lt;(bit<span class="hljs-number">-1</span>));<br>fft(a,<span class="hljs-number">1</span>);fft(b,<span class="hljs-number">1</span>);inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)a[i]=a[i]*b[i]%inf;<br>fft(a,<span class="hljs-number">-1</span>);inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)a[i]=a[i]*invn%inf;<br>inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)b[i]=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">return</span> m+p;<br>    &#125;<br>&#125;fft;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">cdq</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(l==r)&#123;f[l]=f[l]*inv[l]%inf;<span class="hljs-keyword">return</span>;&#125;<br>    <span class="hljs-keyword">int</span> mid=l+r&gt;&gt;<span class="hljs-number">1</span>,cnt=r-l,tot=mid-l;<br>    cdq(l,mid);<br>    inc(i,l,mid)a[i-l]=f[i];<br>    inc(i,<span class="hljs-number">1</span>,cnt)b[i]=<span class="hljs-number">1l</span>l*i*i%inf;<br>    tot=fft.plu(a,b,tot,cnt);<br>    inc(i,mid+<span class="hljs-number">1</span>,r)f[i]+=a[i-l];<br>    inc(i,<span class="hljs-number">0</span>,tot)a[i]=<span class="hljs-number">0</span>;<br>    inc(i,<span class="hljs-number">1</span>,cnt)b[i]=<span class="hljs-number">0</span>;<br>    cdq(mid+<span class="hljs-number">1</span>,r);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=<span class="hljs-number">1e5</span>;inv[<span class="hljs-number">1</span>]=p[<span class="hljs-number">1</span>]=p[<span class="hljs-number">0</span>]=inv[<span class="hljs-number">0</span>]=f[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    inc(i,<span class="hljs-number">2</span>,n)inv[i]=inv[inf%i]*(inf-inf/i)%inf,p[i]=p[i<span class="hljs-number">-1</span>]*i%inf;<br>    cdq(<span class="hljs-number">0</span>,n);<br>    inc(i,<span class="hljs-number">1</span>,n)f[i]=f[i]*p[i]%inf;<br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;n))<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,f[n]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> FFT </tag>
            
            <tag> 分治 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>countari(分块+FFT)</title>
      <link href="/countari/"/>
      <url>/countari/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://cn.vjudge.net/contest/178717#problem/E" target="_blank" rel="noopener">https://cn.vjudge.net/contest/178717#problem/E</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定一个序列 $a$ ，求满足下列要求的三元组的个数，三元组 $(i,j,k)$ 满足 $i&lt;j&lt;k$ 且 $a[i]、a[j]、a[k]$ 为等差数列</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>如果没有下标限制显然直接对任意两数卷积即可，现在有了下标限制显得有些麻烦。。</p><p>然后网友告诉我们可以分块，设块的大小为 $x$ ，值域为 $m$ ，那么分类讨论一下</p><p>如果 $j$ 在当前块中，只要对两边进行卷积即可，复杂度 $O(mlogm)$；如果有两个数或三个数在当前块中，这可以 $O(x^2)$ 暴力处理</p><p>总复杂度为 $O(\frac{n}{x}(mlogm+x^2))$ ，又均值不等式可得 $x=\sqrt{mlogm}$ ，然而 $FFT$ 常数比较大，所以实际取 $x$ 应该比 $\sqrt{mlogm}$ 要偏大，这可以本地跑大数据去调参。。</p><p>最后总的复杂度为 $O(n\sqrt{mlogm})$ ，勉强可以接受。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y)/2</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 100005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 105</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">998244353</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> cnt=<span class="hljs-number">4000</span>;<br><span class="hljs-keyword">int</span> n,a[NM],pre[NM],suc[NM];<br>ll c[NM],b[NM],ans,d[NM];<br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> cp complex<span class="hljs-meta-string">&lt;double&gt;</span></span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">FFT</span>&#123;</span><br>    <span class="hljs-keyword">int</span> n,bit,rev[NM];<br>    cp a[NM],b[NM];<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fft</span><span class="hljs-params">(cp*a,<span class="hljs-keyword">int</span> f)</span></span>&#123;<br>inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)<span class="hljs-keyword">if</span>(i&lt;rev[i])swap(a[i],a[rev[i]]);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">1</span>;k&lt;n;k&lt;&lt;=<span class="hljs-number">1</span>)&#123;<br>    <span class="hljs-function">cp <span class="hljs-title">t</span><span class="hljs-params">(<span class="hljs-built_in">cos</span>(pi/k),f*<span class="hljs-built_in">sin</span>(pi/k))</span></span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i+=k&lt;&lt;<span class="hljs-number">1</span>)&#123;<br><span class="hljs-function">cp <span class="hljs-title">w</span><span class="hljs-params">(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>)</span></span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;k;j++,w*=t)&#123;<br>    cp x=a[i+j],y=w*a[i+j+k];<br>    a[i+j]=x+y;a[i+j+k]=x-y;<br>&#125;<br>    &#125;<br>&#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">plu</span><span class="hljs-params">(ll*_a,ll*_b,<span class="hljs-keyword">int</span> p,<span class="hljs-keyword">int</span> m)</span></span>&#123;<br>n=p;<br>inc(i,<span class="hljs-number">0</span>,n)a[i]=_a[i];<br>inc(i,<span class="hljs-number">0</span>,m)b[i]=_b[i];<br><span class="hljs-keyword">for</span>(n=m=n+m+<span class="hljs-number">1</span>,bit=<span class="hljs-number">0</span>;succ(bit)&lt;n;bit++);n=succ(bit);<br>inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)rev[i]=(rev[i&gt;&gt;<span class="hljs-number">1</span>]&gt;&gt;<span class="hljs-number">1</span>)|((i&amp;<span class="hljs-number">1</span>)&lt;&lt;(bit<span class="hljs-number">-1</span>));<br>fft(a,<span class="hljs-number">1</span>);fft(b,<span class="hljs-number">1</span>);inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)a[i]*=b[i];<br>fft(a,<span class="hljs-number">-1</span>);inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)a[i]/=n;<br>inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)_a[i]=a[i].real()+<span class="hljs-number">0.5</span>;<br>inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)a[i]=b[i]=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">return</span> m<span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;fft;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();inc(i,<span class="hljs-number">1</span>,n)a[i]=pre[i]=suc[i]=read(),b[a[i]]++;<br>    inc(i,<span class="hljs-number">1</span>,n)pre[i]=max(pre[i],pre[i<span class="hljs-number">-1</span>]);<br>    dec(i,n,<span class="hljs-number">1</span>)suc[i]=max(suc[i],suc[i+<span class="hljs-number">1</span>]);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> x=<span class="hljs-number">1</span>,y=cnt;x&lt;=n;x=y+<span class="hljs-number">1</span>,y+=cnt)&#123;<br>y=min(y,n);<br>inc(i,x,y)b[a[i]]--;<br>inc(i,x,y)&#123;<br>    inc(j,i+<span class="hljs-number">1</span>,y)&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-number">2</span>*a[i]&gt;a[j])ans+=d[<span class="hljs-number">2</span>*a[i]-a[j]],ans+=c[<span class="hljs-number">2</span>*a[i]-a[j]];<br><span class="hljs-keyword">if</span>(<span class="hljs-number">2</span>*a[j]&gt;a[i])ans+=b[<span class="hljs-number">2</span>*a[j]-a[i]];<br>    &#125;<br>    d[a[i]]++;<br>&#125;<br>inc(i,x,y)d[a[i]]--;<br>inc(i,<span class="hljs-number">0</span>,suc[y+<span class="hljs-number">1</span>])d[i]=b[i];<br><span class="hljs-keyword">int</span> tot=fft.plu(d,c,suc[y+<span class="hljs-number">1</span>],pre[x<span class="hljs-number">-1</span>]);<br>inc(i,x,y)ans+=d[<span class="hljs-number">2</span>*a[i]];<br>inc(i,<span class="hljs-number">0</span>,tot)d[i]=<span class="hljs-number">0</span>;<br>inc(i,x,y)c[a[i]]++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>*<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> FFT </tag>
            
            <tag> 分块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tsy1(欧拉函数+莫比乌斯函数)</title>
      <link href="/tsy1/"/>
      <url>/tsy1/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://nanti.jisuanke.com/t/38226" target="_blank" rel="noopener">https://nanti.jisuanke.com/t/38226</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>求 </p><script type="math/tex; mode=display">\sum_{i=1}^n\sum_{j=1}^n\sum_{k=1}^n\frac{\varphi(i)\varphi(j^2)\varphi(k^3)}{\varphi(i)\varphi(j)\varphi(k)}\varphi(gcd(i,j,k))​</script><p>$n\le1e7$</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>首先需要一个结论是 $\varphi(n^2)=n\varphi(n)$ ，这个可以通过素因子分解推出来，同理易得 $\varphi(n^3)=n^2\varphi(n)$</p><p>然后原式可以化为</p><script type="math/tex; mode=display">\begin{equation}\begin{aligned}ans&=\sum_{i=1}^n\sum_{j=1}^n\sum_{k=1}^njk^2\varphi((i,j,k))\\&=\sum_{d=1}^n\varphi(d)\sum_{i=1}^{\lfloor\frac{n}{d} \rfloor}\sum_{j=1}^{\lfloor\frac{n}{d} \rfloor}\sum_{k=1}^{\lfloor\frac{n}{d} \rfloor}jdk^2d^2[(i,j,k)=1]\\&=\sum_{d=1}^nd^3\varphi(d)\sum_{i=1}^{\lfloor\frac{n}{d} \rfloor}\sum_{j=1}^{\lfloor\frac{n}{d} \rfloor}\sum_{k=1}^{\lfloor\frac{n}{d} \rfloor}jk^2\sum_{d'|(i,j,k)}\mu(d')\\&=\sum_{d=1}^nd^3\varphi(d)\sum_{d'=1}^n\mu(d')\sum_{i=1}^{\lfloor\frac{n}{dd'} \rfloor}\sum_{j=1}^{\lfloor\frac{n}{dd'} \rfloor}\sum_{k=1}^{\lfloor\frac{n}{dd'} \rfloor}jd'k{d'}^2\\&=\sum_{d=1}^nd^3\sum_{d'|d}\varphi(d)\mu(\frac{d}{d'})\sum_{i=1}^{\lfloor\frac{n}{d} \rfloor}\sum_{j=1}^{\lfloor\frac{n}{d} \rfloor}j\sum_{k=1}^{\lfloor\frac{n}{d} \rfloor}k^2\\&=\sum_{d=1}^n\lfloor\frac{n}{d} \rfloor\frac{\lfloor\frac{n}{d} \rfloor(\lfloor\frac{n}{d} \rfloor+1)}{2}\frac{\lfloor\frac{n}{d} \rfloor(\lfloor\frac{n}{d} \rfloor+1)(2\lfloor\frac{n}{d} \rfloor+1)}{6}d^3\sum_{d'|d}\varphi(d)\mu(\frac{d}{d'})\end{aligned}\end{equation}</script><p>然后设 $f(n)=\sum_{d|n}\varphi(d)\mu(\frac{n}{d})$ ，有</p><script type="math/tex; mode=display">\sum_{d=1}^n\frac{\lfloor\frac{n}{d} \rfloor^3(\lfloor\frac{n}{d} \rfloor+1)^2(2\lfloor\frac{n}{d} \rfloor+1)}{12}d^3f(d)</script><p>然后用积性函数预处理 $f(n)$ 和 $n^3f(n)$ ，然后分块就行了。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y)/2</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 10000005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 105</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">1073741824</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br>ll f[NM],ans;<br><span class="hljs-keyword">int</span> n,prime[NM],tot;<br><span class="hljs-keyword">bool</span> v[NM];<br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123;<br>    n=<span class="hljs-number">1e7</span>;f[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    inc(i,<span class="hljs-number">2</span>,n)&#123;<br><span class="hljs-keyword">if</span>(!v[i])prime[++tot]=i,f[i]=i<span class="hljs-number">-2</span>;<br>inc(j,<span class="hljs-number">1</span>,tot)&#123;<br>    <span class="hljs-keyword">if</span>(i*prime[j]&gt;n)<span class="hljs-keyword">break</span>;<br>    v[i*prime[j]]++;<br>    <span class="hljs-keyword">if</span>(i%prime[j]==<span class="hljs-number">0</span>)&#123;<br><span class="hljs-keyword">if</span>(i/prime[j]%prime[j]==<span class="hljs-number">0</span>)f[i*prime[j]]=f[i]*prime[j]%inf;<br><span class="hljs-keyword">else</span> f[i*prime[j]]=f[i/prime[j]]*(prime[j]<span class="hljs-number">-1</span>)%inf*(prime[j]<span class="hljs-number">-1</span>)%inf;<br><span class="hljs-keyword">break</span>;<br>    &#125;<br>    f[i*prime[j]]=f[i]*f[prime[j]]%inf;<br>&#125;<br>    &#125;<br>    inc(i,<span class="hljs-number">1</span>,n)f[i]=f[i]*i%inf*i%inf*i%inf;<br>    inc(i,<span class="hljs-number">1</span>,n)f[i]+=f[i<span class="hljs-number">-1</span>],f[i]%=inf;<br>&#125;<br><br><span class="hljs-function">ll <span class="hljs-title">fun</span><span class="hljs-params">(ll t)</span></span>&#123;<br>    ll x=t+<span class="hljs-number">1</span>,y=<span class="hljs-number">2</span>*t+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(t%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>)t/=<span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">else</span> x/=<span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">if</span>(t%<span class="hljs-number">3</span>==<span class="hljs-number">0</span>)t/=<span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(x%<span class="hljs-number">3</span>==<span class="hljs-number">0</span>)x/=<span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">else</span> y/=<span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">return</span> t*x%inf*y%inf;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    init();<br>    <span class="hljs-keyword">int</span> _=read();<span class="hljs-keyword">while</span>(_--)&#123;<br>n=read();<br>ans=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>,j;i&lt;=n;i=j+<span class="hljs-number">1</span>)&#123;<br>    j=n/(n/i);ll t=n/i;<br>    t=t*(t+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>%inf*t%inf*fun(t)%inf;<br>    ans+=t*(f[j]-f[i<span class="hljs-number">-1</span>]+inf)%inf;<br>    ans%=inf;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>primedst(点分治+FFT)</title>
      <link href="/primedst/"/>
      <url>/primedst/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://cn.vjudge.net/problem/CodeChef-PRIMEDST" target="_blank" rel="noopener">https://cn.vjudge.net/problem/CodeChef-PRIMEDST</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定一棵树，找距离为质数的点对数</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>很容易想到点分，但是合并的时候复杂度过大，需要考虑降低合并的复杂度</p><p>而这个树背包本质也是个多项式，所以合并的时候相当于做多项式乘法，这就可以用 $FFT$ 优化了。。</p><p>这里答案的总数会达到 $10^9$ ，所以选了个比较大的 $NTT$ 模数做 $NTT$ 。。</p><p>然后注意分治的时候当前子根和其他点产生的贡献只记了一次，其他点之间记了两次的差异即可。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y)/2</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 50005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 150005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">2013265921</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span>&#123;</span><span class="hljs-keyword">int</span> t;edge*next;&#125;e[nm],*h[NM],*o=e;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;o-&gt;t=y;o-&gt;next=h[x];h[x]=o++;&#125;<br><span class="hljs-keyword">int</span> n,m,size[NM],tot,smin,root,_x,_y,rev[nm];<br><span class="hljs-keyword">bool</span> v[NM],_v[nm];<br>ll a[nm],b[nm],c[nm],ans;<br><span class="hljs-function">ll <span class="hljs-title">qpow</span><span class="hljs-params">(ll x,ll t)</span></span>&#123;<span class="hljs-keyword">return</span> t?qpow(sqr(x)%inf,t&gt;&gt;<span class="hljs-number">1</span>)*(t&amp;<span class="hljs-number">1</span>?x:<span class="hljs-number">1l</span>l)%inf:<span class="hljs-number">1l</span>l;&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> f)</span></span>&#123;size[x]=<span class="hljs-number">1</span>;link(x)<span class="hljs-keyword">if</span>(!v[j-&gt;t]&amp;&amp;j-&gt;t!=f)dfs2(j-&gt;t,x),size[x]+=size[j-&gt;t];&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getroot</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> f)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> s=tot-size[x];<br>    link(x)<span class="hljs-keyword">if</span>(!v[j-&gt;t]&amp;&amp;j-&gt;t!=f)getroot(j-&gt;t,x),s=max(s,size[j-&gt;t]);<br>    <span class="hljs-keyword">if</span>(s&lt;smin)smin=s,root=x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fft</span><span class="hljs-params">(ll*a,<span class="hljs-keyword">int</span> f)</span></span>&#123;<br>    inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)<span class="hljs-keyword">if</span>(i&lt;rev[i])swap(a[i],a[rev[i]]);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">1</span>;k&lt;n;k&lt;&lt;=<span class="hljs-number">1</span>)&#123;<br>ll t=qpow(<span class="hljs-number">31</span>,(inf<span class="hljs-number">-1</span>)/k/<span class="hljs-number">2</span>);<span class="hljs-keyword">if</span>(f==<span class="hljs-number">-1</span>)t=qpow(t,inf<span class="hljs-number">-2</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i+=k&lt;&lt;<span class="hljs-number">1</span>)&#123;<br>    ll w=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;k;j++,w=w*t%inf)&#123;<br>ll x=a[i+j],y=w*a[i+j+k]%inf;<br>a[i+j]=(x+y)%inf;a[i+j+k]=(x-y+inf)%inf;<br>    &#125;<br>&#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">plu</span><span class="hljs-params">(ll*a,ll*b)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> bit=<span class="hljs-number">0</span>;<br>    n=n+m<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">while</span>(succ(bit)&lt;n)bit++;n=succ(bit);<br>    inc(i,m,n)b[i]=<span class="hljs-number">0</span>;<br>    ll invn=qpow(n,inf<span class="hljs-number">-2</span>);<br>    inc(i,<span class="hljs-number">1</span>,n<span class="hljs-number">-1</span>)rev[i]=(rev[i&gt;&gt;<span class="hljs-number">1</span>]&gt;&gt;<span class="hljs-number">1</span>)|((i&amp;<span class="hljs-number">1</span>)&lt;&lt;(bit<span class="hljs-number">-1</span>));<br>    fft(a,<span class="hljs-number">1</span>);fft(b,<span class="hljs-number">1</span>);inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)a[i]=a[i]*b[i]%inf;<br>    fft(a,<span class="hljs-number">-1</span>);inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)a[i]=a[i]*invn%inf;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> f,<span class="hljs-keyword">int</span> t)</span></span>&#123;<br>    a[t]++;tot=max(tot,t);<br>    link(x)<span class="hljs-keyword">if</span>(!v[j-&gt;t]&amp;&amp;j-&gt;t!=f)dfs(j-&gt;t,x,t+<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">div</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br>    dfs2(x,<span class="hljs-number">0</span>);<br>    tot=size[x];smin=inf;<br>    getroot(x,<span class="hljs-number">0</span>);tot=<span class="hljs-number">0</span>;<br>    dfs(root,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br>    v[root]++;<br>    inc(i,<span class="hljs-number">0</span>,tot)c[i]=a[i],a[i]=<span class="hljs-number">0</span>;<br>    inc(i,<span class="hljs-number">2</span>,tot)<span class="hljs-keyword">if</span>(!_v[i])ans+=c[i];<br>    m=tot+<span class="hljs-number">1</span>;<br>    link(root)<span class="hljs-keyword">if</span>(!v[j-&gt;t])&#123;<br>tot=<span class="hljs-number">0</span>;<br>dfs(j-&gt;t,root,<span class="hljs-number">1</span>);<br>inc(i,<span class="hljs-number">0</span>,m<span class="hljs-number">-1</span>)b[i]=c[i]-a[i];<br>n=tot+<span class="hljs-number">1</span>;<br>plu(a,b);<br>inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)&#123;<span class="hljs-keyword">if</span>(!_v[i])ans+=a[i];a[i]=<span class="hljs-number">0</span>;&#125;<br>    &#125;<br>    link(root)<span class="hljs-keyword">if</span>(!v[j-&gt;t])div(j-&gt;t);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=<span class="hljs-number">1e5</span>;_v[<span class="hljs-number">1</span>]++;_v[<span class="hljs-number">0</span>]++;<br>    inc(i,<span class="hljs-number">2</span>,n)<span class="hljs-keyword">if</span>(!_v[i])<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=i&lt;&lt;<span class="hljs-number">1</span>;j&lt;=n;j+=i)_v[j]++;<br>    n=read();inc(i,<span class="hljs-number">2</span>,n)&#123;_x=read();_y=read();add(_x,_y);add(_y,_x);&#125;<br>    _x=n;<br>    div(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>*<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%.7lf\n"</span>,<span class="hljs-number">1.0</span>*ans/_x/(_x<span class="hljs-number">-1</span>));<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> FFT </tag>
            
            <tag> 分治 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xdoj1420(二项式反演+FFT)</title>
      <link href="/xdoj1409/"/>
      <url>/xdoj1409/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://acm.xidian.edu.cn/problem.php?id=1409" target="_blank" rel="noopener">http://acm.xidian.edu.cn/problem.php?id=1409</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h4><p>公式推了挺久。。</p><p>设答案为 $f(k)$ ，那么有</p><script type="math/tex; mode=display">f(k)=\binom mk (\frac{k}{m})^n-\sum_{d=1}^{k-1}f(d)\binom{m-d}{k-d}\\\sum_{d=0}^{k}f(d)\binom{m-d}{k-d}=\binom mk(\frac{k}{m})^n\\\sum_{d=0}^{k}\binom{m-d}{k-d}(-1)^d(-1)^df(d) =\binom mk(\frac{k}{m})^n\\(-1)^kf(k)=\sum_{d=0}^{k}\binom{m-d}{k-d}(-1)^d\binom md(\frac{d}{m})^n\\f(k)=\frac{m!}{(m-k)!m^n} \sum_{d=0}^{k}\frac{(-1)^{k-d}}{(k-d)!}\frac{d^n}{d!}</script><p>然后后面的和式可以用 $FFT$ 做，复杂度 $O(nlogn)$</p><h4 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h4><p>这题还可以利用生成函数。。</p><p>设指数型生成函数 $G(x,z)=1+z(e^x-1)$ ，有</p><script type="math/tex; mode=display">\begin{aligned}G^n(x,z)=&(1+ze^x)^n\\=&\sum_k\binom nk z^k(e^x-1)^k\\=&\sum_k\binom nk z^k\sum_j \binom kj(-1)^{k-j}e^{jx}\\=&\sum_k\binom nk z^k\sum_j \binom kj(-1)^{k-j}\sum_i j^i\frac{x^i}{i!}\\=&\sum_k\sum_i\sum_j\binom nk\binom kj(-1)^{k-j}j^iz^k\frac{x^i}{i!}\end{aligned}</script><p>那么，所需要的项为 $z^k\frac{x^m}{m!}$ ，其系数为</p><script type="math/tex; mode=display">\sum_j \binom nk \binom kj (-1)^{k-j}j^m=\frac{n!}{(n-k)!} \sum_j \frac{j^m}{j!}\frac{(-1)^{k-j}}{(k-j)!}</script><p> 这和上面的结果一样了</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y)/2</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 400005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 300005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">998244353</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><span class="hljs-keyword">int</span> n,m,rev[NM],_x;<br>ll a[NM],b[NM],inv[NM],invp[NM],p[NM],<span class="hljs-keyword">_t</span>;<br><span class="hljs-function">ll <span class="hljs-title">qpow</span><span class="hljs-params">(ll x,ll t)</span></span>&#123;<span class="hljs-keyword">return</span> t?qpow(sqr(x)%inf,t&gt;&gt;<span class="hljs-number">1</span>)*(t&amp;<span class="hljs-number">1</span>?x:<span class="hljs-number">1l</span>l)%inf:<span class="hljs-number">1l</span>l;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fft</span><span class="hljs-params">(ll*a,<span class="hljs-keyword">int</span> f)</span></span>&#123;<br>    inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)<span class="hljs-keyword">if</span>(i&lt;rev[i])swap(a[i],a[rev[i]]);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">1</span>;k&lt;n;k&lt;&lt;=<span class="hljs-number">1</span>)&#123;<br>ll t=qpow(<span class="hljs-number">3</span>,(inf<span class="hljs-number">-1</span>)/k/<span class="hljs-number">2</span>);<span class="hljs-keyword">if</span>(f==<span class="hljs-number">-1</span>)t=qpow(t,inf<span class="hljs-number">-2</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i+=k&lt;&lt;<span class="hljs-number">1</span>)&#123;<br>    ll w=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;k;j++,w=w*t%inf)&#123;<br>ll x=a[i+j],y=w*a[i+j+k]%inf;<br>a[i+j]=(x+y)%inf;a[i+j+k]=(x-y+inf)%inf;<br>    &#125;<br>&#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">plu</span><span class="hljs-params">(ll*a,ll*b)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> bit=<span class="hljs-number">0</span>;<br>    n=<span class="hljs-number">2</span>*n<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">while</span>(succ(bit)&lt;n)bit++;n=succ(bit);<br>    inc(i,<span class="hljs-number">1</span>,n<span class="hljs-number">-1</span>)rev[i]=(rev[i&gt;&gt;<span class="hljs-number">1</span>]&gt;&gt;<span class="hljs-number">1</span>)|((i&amp;<span class="hljs-number">1</span>)&lt;&lt;(bit<span class="hljs-number">-1</span>));<br>    ll invn=qpow(n,inf<span class="hljs-number">-2</span>);<br>    fft(a,<span class="hljs-number">1</span>);fft(b,<span class="hljs-number">1</span>);inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)a[i]*=b[i],a[i]%=inf;<br>    fft(a,<span class="hljs-number">-1</span>);inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)a[i]*=invn,a[i]%=inf;<br>    n=_x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=<span class="hljs-number">1e5</span>;p[<span class="hljs-number">1</span>]=p[<span class="hljs-number">0</span>]=invp[<span class="hljs-number">0</span>]=inv[<span class="hljs-number">1</span>]=invp[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    inc(i,<span class="hljs-number">2</span>,n)p[i]=p[i<span class="hljs-number">-1</span>]*i%inf,inv[i]=inv[inf%i]*(inf-inf/i)%inf,invp[i]=invp[i<span class="hljs-number">-1</span>]*inv[i]%inf;<br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d"</span>,&amp;m,&amp;n))&#123;<br>mem(a);mem(b);<br><span class="hljs-keyword">_t</span>=m;_x=n;<br>inc(i,<span class="hljs-number">0</span>,min(n,m))<span class="hljs-keyword">if</span>(i&amp;<span class="hljs-number">1</span>)b[i]=inf-invp[i];<span class="hljs-keyword">else</span> b[i]=invp[i];<br>inc(i,<span class="hljs-number">1</span>,min(n,m))a[i]=qpow(i,n)*invp[i]%inf;<br>n=min(n,m);n++;<br>plu(a,b);m=<span class="hljs-keyword">_t</span>;<span class="hljs-keyword">_t</span>=qpow(inv[m],_x);<br>n=min(n,m);<br>inc(i,<span class="hljs-number">1</span>,n)a[i]=a[i]*p[m]%inf*invp[m-i]%inf*<span class="hljs-keyword">_t</span>%inf;<br>inc(i,<span class="hljs-number">1</span>,n<span class="hljs-number">-1</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld "</span>,a[i]);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,a[n]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> FFT </tag>
            
            <tag> 组合数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cf1153F(多项式展开)</title>
      <link href="/cf1153F/"/>
      <url>/cf1153F/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://codeforces.com/contest/1153/problem/F" target="_blank" rel="noopener">https://codeforces.com/contest/1153/problem/F</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>随机在长度为 $l$ 的线段上取 $n$ 个区间，要求被至少 $m$ 个区间覆盖的部分的长度的期望值。线段由随机在 $l$ 上取两个点形成。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>比较少见的题，不过挺简单的。。</p><p>直接考虑单点贡献，那么答案为</p><script type="math/tex; mode=display">\int_0^l \sum_{k=m}^{n} \binom{n}{k}p^k(1-p)^{n-k}dx</script><p>其中 $p$ 为点 $x$ 被一条线段覆盖的概率，则有</p><script type="math/tex; mode=display">1-p=\frac{x^2+(l-x)^2}{l^2}</script><p>答案为</p><script type="math/tex; mode=display">\int_0^l \sum_{k=m}^n \binom nk (1-\frac{x^2+(l-x)^2}{l^2})^k(\frac{x^2+(l-x)^2}{l^2})^{n-k}dx</script><p>从内到外层层用二项式展开成多项式即可，这里窝先展开成关于 $x^2+(l−x)^2$ 的多项式再展开成 $x$ 的多项式，复杂度为 $O(n^2)$</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y)/2</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 4005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 300005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">998244353</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><br>ll inv[NM],invp[NM],p[NM],l,_l,a[NM],b[NM],c[NM],d[NM],ans;<br><span class="hljs-keyword">int</span> n,m;<br><span class="hljs-function">ll <span class="hljs-title">qpow</span><span class="hljs-params">(ll x,ll t)</span></span>&#123;<span class="hljs-keyword">return</span> t?qpow(sqr(x)%inf,t&gt;&gt;<span class="hljs-number">1</span>)*(t&amp;<span class="hljs-number">1</span>?x:<span class="hljs-number">1l</span>l)%inf:<span class="hljs-number">1l</span>l;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();m=read();l=read();_l=sqr(l)%inf;<br>    p[<span class="hljs-number">0</span>]=p[<span class="hljs-number">1</span>]=inv[<span class="hljs-number">1</span>]=invp[<span class="hljs-number">0</span>]=invp[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    inc(i,<span class="hljs-number">2</span>,n*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>)p[i]=p[i<span class="hljs-number">-1</span>]*i%inf,inv[i]=inv[inf%i]*(inf-inf/i)%inf,invp[i]=invp[i<span class="hljs-number">-1</span>]*inv[i]%inf;<br>    a[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    inc(k,<span class="hljs-number">1</span>,n)&#123;<br>mem(b);<br>inc(i,<span class="hljs-number">0</span>,n)b[i+<span class="hljs-number">1</span>]=-a[i];<br>inc(i,<span class="hljs-number">0</span>,n)b[i]+=a[i]*_l%inf,b[i]%=inf;<br>inc(i,<span class="hljs-number">0</span>,n)a[i]=(b[i]+inf)%inf;<br><span class="hljs-keyword">if</span>(k&lt;m)<span class="hljs-keyword">continue</span>;<br>inc(i,<span class="hljs-number">0</span>,n)c[i+n-k]+=b[i]*p[n]%inf*invp[k]%inf*invp[n-k]%inf,c[i+n-k]%=inf;<br>    &#125;<br>    mem(a);a[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;d[<span class="hljs-number">0</span>]=c[<span class="hljs-number">0</span>];<br>    inc(k,<span class="hljs-number">1</span>,n)&#123;<br>mem(b);<br>inc(i,<span class="hljs-number">0</span>,n*<span class="hljs-number">2</span>)b[i]=a[i]*_l%inf;<br>inc(i,<span class="hljs-number">0</span>,n*<span class="hljs-number">2</span>)b[i+<span class="hljs-number">1</span>]+=inf<span class="hljs-number">-2</span>*l%inf*a[i]%inf,b[i+<span class="hljs-number">1</span>]%=inf;<br>inc(i,<span class="hljs-number">0</span>,n*<span class="hljs-number">2</span>)b[i+<span class="hljs-number">2</span>]+=<span class="hljs-number">2</span>*a[i]%inf,b[i+<span class="hljs-number">2</span>]%=inf;<br>inc(i,<span class="hljs-number">0</span>,n*<span class="hljs-number">2</span>)a[i]=b[i];<br>inc(i,<span class="hljs-number">0</span>,n*<span class="hljs-number">2</span>)d[i]+=c[k]*a[i]%inf,d[i]%=inf;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>,t=l;k&lt;=<span class="hljs-number">2</span>*n;k++,t=t*l%inf)ans+=d[k]*t%inf*inv[k+<span class="hljs-number">1</span>]%inf,ans%=inf;<br>    ans*=qpow(qpow(_l,n),inf<span class="hljs-number">-2</span>);ans%=inf;<span class="hljs-keyword">if</span>(ans&lt;<span class="hljs-number">0</span>)ans+=inf;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 组合数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hdu4609(FFT)</title>
      <link href="/hdu4609/"/>
      <url>/hdu4609/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=4609" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=4609</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定 $n$ 根木棍，从中选 $3$ 个木棍，问能形成三角形的概率</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>要算出组成三角形的方案数，很容易想到先把两条边的情况组合出来，然后再配上第三条，但是会算重，但是算不能构成三角形的话，令第三边为最大边就不会计重了。然后记得减去选两条相同边的情况然后去去和计数就可以了。。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y)/2</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 400005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 105</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">998244353</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><span class="hljs-keyword">int</span> n,c[NM],m,rev[NM],_x;<br>ll ans;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> cp complex<span class="hljs-meta-string">&lt;double&gt;</span></span><br>cp a[NM];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fft</span><span class="hljs-params">(cp*a,<span class="hljs-keyword">int</span> f)</span></span>&#123;<br>    inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)<span class="hljs-keyword">if</span>(i&lt;rev[i])swap(a[i],a[rev[i]]);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">1</span>;k&lt;n;k&lt;&lt;=<span class="hljs-number">1</span>)&#123;<br><span class="hljs-function">cp <span class="hljs-title">t</span><span class="hljs-params">(<span class="hljs-built_in">cos</span>(pi/k),f*<span class="hljs-built_in">sin</span>(pi/k))</span></span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i+=k&lt;&lt;<span class="hljs-number">1</span>)&#123;<br>    <span class="hljs-function">cp <span class="hljs-title">w</span><span class="hljs-params">(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>)</span></span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;k;j++,w*=t)&#123;<br>cp x=a[i+j],y=w*a[i+j+k];<br>a[i+j]=x+y;a[i+j+k]=x-y;<br>    &#125;<br>&#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">plu</span><span class="hljs-params">(cp*a)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> bit=<span class="hljs-number">0</span>;<br>    n&lt;&lt;=<span class="hljs-number">1</span>;n--;<br>    <span class="hljs-keyword">while</span>(succ(bit)&lt;n)bit++;n=succ(bit);<br>    inc(i,<span class="hljs-number">1</span>,n<span class="hljs-number">-1</span>)rev[i]=(rev[i&gt;&gt;<span class="hljs-number">1</span>]&gt;&gt;<span class="hljs-number">1</span>)|((i&amp;<span class="hljs-number">1</span>)&lt;&lt;(bit<span class="hljs-number">-1</span>));<br>    fft(a,<span class="hljs-number">1</span>);inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)a[i]*=a[i];<br>    fft(a,<span class="hljs-number">-1</span>);inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)a[i]/=n;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> _=read();<span class="hljs-keyword">while</span>(_--)&#123;<br>mem(a);mem(c);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;n);<br><span class="hljs-keyword">int</span> cnt=<span class="hljs-number">0</span>;<br>m=n;<span class="hljs-keyword">while</span>(n--)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;_x),c[_x]++,cnt=max(cnt,_x);<br>n=cnt+<span class="hljs-number">1</span>;ans=<span class="hljs-number">0</span>;<br>inc(i,<span class="hljs-number">1</span>,n)a[i]=c[i];<br>plu(a);<br>n=cnt+<span class="hljs-number">1</span>;<br>inc(i,<span class="hljs-number">1</span>,n)a[i*<span class="hljs-number">2</span>]-=c[i];<br>dec(i,n,<span class="hljs-number">1</span>)c[i]+=c[i+<span class="hljs-number">1</span>];<br>inc(i,<span class="hljs-number">1</span>,n)ans+=c[i]*(ll)(a[i].real()+<span class="hljs-number">0.5</span>);<br><span class="hljs-comment">//inc(i,1,10)printf("%d:%d\n",i,(int)(a[i].real()+0.5));</span><br>ans/=<span class="hljs-number">2</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%.7lf\n"</span>,<span class="hljs-number">1</span>-ans*<span class="hljs-number">6.0</span>/m/(m<span class="hljs-number">-1</span>)/(m<span class="hljs-number">-2</span>));<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> FFT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bzoj2219(离散对数+CRT)</title>
      <link href="/bzoj2219/"/>
      <url>/bzoj2219/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=2219" target="_blank" rel="noopener">https://www.lydsy.com/JudgeOnline/problem.php?id=2219</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>模数是奇数应该是为了保证原根的存在。。</p><p>设原方程解为 $X$</p><p>然后由于模数可以为合数所以要用 $CRT$ 分解，类似</p><script type="math/tex; mode=display">x^a\equiv b(mod\,\,p^k)</script><p>设其解为 $w_1,w_2…w_j$ ，那么</p><script type="math/tex; mode=display">X\equiv w_j(mod\,\,p^k)</script><p>必有且仅有一个成立</p><p>这样可以组成若干个方程组，根据 $CRT$  一个方程组在模数范围内仅有一解，那么解的个数即为方程组的个数，所以只需要计算每个方程组的解集大小，直接相乘即可。。</p><p>回到</p><script type="math/tex; mode=display">x^a\equiv b(mod\,\,p^k)</script><p>此时模数不是质数，不能直接求对数</p><p>当 $(b,p^k)=1$ ，此时可以直接求对数后求解，若存在解，那么解个数为 $gcd((p-1)p^{k-1},a)$</p><p>当 $b%p^k=0$ ，那么 $x=Cp^t$ ，那么 $at\geq k$ ，所以 $t=\left\lceil \frac{k}{a} \right\rceil$</p><p>那么解个数为</p><script type="math/tex; mode=display">\frac{p^k}{p^t}=p^{k-\left\lceil \frac{k}{a} \right\rceil}</script><p>当 $1&lt;(b,p^k)&lt;p^k$ ，令 $b=Bp^{cnt}$ ，那么</p><script type="math/tex; mode=display">\left(\frac{x}{p^{\frac{cnt}{a} }}  \right)^a\equiv B(mod\,\,p^{k-cnt})</script><p>此时满足 $a|cnt$ 才有解，然后就可以求离散对数了。。</p><p>但是解集的范围均落在 $[0,p^{k-cnt})$ 之间，那么需要将解集扩大到 $[0,p^{k-\frac{cnt}{a}})$ ，所以方案数要乘上 $p^{cnt-\frac{cnt}{a}}$</p><p>相当考验板子。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 1000005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 1025</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pi 3.1415926535897931</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br> <br> <br><br><br><br><br><span class="hljs-keyword">int</span> _x,_y,b[<span class="hljs-number">40</span>],c[<span class="hljs-number">40</span>],<span class="hljs-keyword">_t</span>,p,tot;<br>ll inf,ans;<br><span class="hljs-function">ll <span class="hljs-title">qpow</span><span class="hljs-params">(ll x,ll t)</span></span>&#123;<span class="hljs-keyword">return</span> t?qpow(sqr(x)%inf,t&gt;&gt;<span class="hljs-number">1</span>)*(t&amp;<span class="hljs-number">1</span>?x:<span class="hljs-number">1l</span>l)%inf:<span class="hljs-number">1l</span>l;&#125;<br><span class="hljs-function">ll <span class="hljs-title">exgcd</span><span class="hljs-params">(ll a,ll b,ll&amp;x,ll&amp;y)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(b==<span class="hljs-number">0</span>)&#123;x=<span class="hljs-number">1</span>;y=<span class="hljs-number">0</span>;<span class="hljs-keyword">return</span> a;&#125;<br>    ll t=exgcd(b,a%b,y,x);y-=a/b*x;<span class="hljs-keyword">return</span> t;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">gen</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>    <span class="hljs-comment">//m=phi(n)</span><br>    <span class="hljs-keyword">int</span> m=n/<span class="hljs-keyword">_t</span>*(<span class="hljs-keyword">_t</span><span class="hljs-number">-1</span>),cnt=m,tot=<span class="hljs-number">0</span>,c[<span class="hljs-number">40</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>;i*i&lt;=m;i++)<span class="hljs-keyword">if</span>(m%i==<span class="hljs-number">0</span>)&#123;<br>c[++tot]=cnt/i;<br><span class="hljs-keyword">while</span>(m%i==<span class="hljs-number">0</span>)m/=i;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(m&gt;<span class="hljs-number">1</span>)c[++tot]=cnt/m;<br>    inc(i,<span class="hljs-number">1</span>,n)&#123;<br><span class="hljs-keyword">bool</span> f=<span class="hljs-literal">true</span>;<br>inc(j,<span class="hljs-number">1</span>,tot)<span class="hljs-keyword">if</span>(qpow(i,c[j])==<span class="hljs-number">1</span>)&#123;f=<span class="hljs-literal">false</span>;<span class="hljs-keyword">break</span>;&#125;<br><span class="hljs-keyword">if</span>(f)<span class="hljs-keyword">return</span> i;<br>    &#125;<br>&#125;<br><br><span class="hljs-function">ll <span class="hljs-title">bsgs</span><span class="hljs-params">(ll a,ll b)</span></span>&#123;<br>    <span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt;v;<span class="hljs-keyword">int</span> n=<span class="hljs-built_in">sqrt</span>(inf)+<span class="hljs-number">1</span>,ans=inf;<br>    ll inv,t;exgcd(a,inf,inv,t);inv%=inf;<span class="hljs-keyword">if</span>(inv&lt;<span class="hljs-number">0</span>)inv+=inf;t=qpow(a,n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++,b=b*inv%inf)<span class="hljs-keyword">if</span>(!v.count(b))v[b]=i;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>,k=<span class="hljs-number">1</span>;i&lt;=n;i++,k=k*t%inf)<span class="hljs-keyword">if</span>(v.count(k))ans=min(ans,v[k]+i*n);<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function">ll <span class="hljs-title">solve</span><span class="hljs-params">(ll a,ll b)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> s=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(b==<span class="hljs-number">0</span>)&#123;<br><span class="hljs-keyword">while</span>(inf&gt;<span class="hljs-number">1</span>)s++,inf/=<span class="hljs-keyword">_t</span>;<br>inf=<span class="hljs-number">1e9</span>;<br><span class="hljs-keyword">return</span> qpow(<span class="hljs-keyword">_t</span>,s<span class="hljs-number">-1</span>-(s<span class="hljs-number">-1</span>)/a);<br>    &#125;<br>    <span class="hljs-keyword">while</span>(b%<span class="hljs-keyword">_t</span>==<span class="hljs-number">0</span>)&#123;<br>b/=<span class="hljs-keyword">_t</span>;inf/=<span class="hljs-keyword">_t</span>;s++;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(s%a)<span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">int</span> g=gen(inf),indb=bsgs(g,b);<br>    ll x,y;ll t=exgcd(a,inf/<span class="hljs-keyword">_t</span>*(<span class="hljs-keyword">_t</span><span class="hljs-number">-1</span>),x,y);<br>    <span class="hljs-keyword">if</span>(indb%t)<span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    inf=<span class="hljs-number">1e9</span>;t*=qpow(<span class="hljs-keyword">_t</span>,s-s/a);<span class="hljs-keyword">return</span> t;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> _=read();<span class="hljs-keyword">while</span>(_--)&#123;<br>_x=read();_y=read();p=read()&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>;tot=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">3</span>;i*i&lt;=p;i++)<span class="hljs-keyword">if</span>(p%i==<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">for</span>(c[++tot]=<span class="hljs-number">1</span>,b[tot]=i;p%i==<span class="hljs-number">0</span>;p/=i)c[tot]*=i;<br><span class="hljs-keyword">if</span>(p&gt;<span class="hljs-number">2</span>)c[++tot]=p,b[tot]=p;<br>ans=<span class="hljs-number">1</span>;<br>inc(i,<span class="hljs-number">1</span>,tot)&#123;<br>    inf=c[i];<span class="hljs-keyword">_t</span>=b[i];<br>    ll t=solve(_x,_y%inf);<br>    <span class="hljs-keyword">if</span>(t==<span class="hljs-number">-1</span>)&#123;ans=<span class="hljs-number">-1</span>;<span class="hljs-keyword">break</span>;&#125;<br>    ans*=t;<br>&#125;<br><span class="hljs-keyword">if</span>(ans==<span class="hljs-number">-1</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"0\n"</span>);<span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> BSGS </tag>
            
            <tag> CRT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bzoj1319(原根+BSGS)</title>
      <link href="/bzoj1319/"/>
      <url>/bzoj1319/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=1319" target="_blank" rel="noopener">https://www.lydsy.com/JudgeOnline/problem.php?id=1319</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>求解 $x^a\equiv b(mod\,p)$</p><p>由于 $p$ 为质数，令 $g$ 为 $p$ 的一个原根</p><p>那么 $a\,ind_gx\equiv ind_gb(mod\,\,\varphi(p))$</p><p>原根的求解可以依次枚举 $g$ ，检验 $g^d\equiv 1(mod\,p)$ ，其中 $d&lt;\varphi(p)$</p><p>如果这个 $d$ 存在，那么 $d$ 的倍数也必然成立，那么只要取 $d=\frac{\varphi(p)}{p_i}$ 检验即可，其中 $p_i$ 为$\varphi(p)$ 的素因子</p><p>由于原根的大小一般在 $O(n^{0.25})$ 以内，所以求原根的复杂度为 $O(n^{0.25}logp\times loglogp)$</p><p>求出 $g$ 之后利用 $BSGS$ 求出 $ind_gb$ 进而求出 $ind_gx$ 即可。。</p><p>然后还有注意判 $b=0$ 的情况，不过题目数据好像并没有？</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 1000005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 1025</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pi 3.1415926535897931</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br> <br> <br><br><br><br>ll inf,_x,_y;<br><br><span class="hljs-function">ll <span class="hljs-title">qpow</span><span class="hljs-params">(ll x,ll t)</span></span>&#123;<span class="hljs-keyword">return</span> t?qpow(sqr(x)%inf,t&gt;&gt;<span class="hljs-number">1</span>)*(t&amp;<span class="hljs-number">1</span>?x:<span class="hljs-number">1l</span>l)%inf:<span class="hljs-number">1l</span>l;&#125;<br><span class="hljs-function">ll <span class="hljs-title">exgcd</span><span class="hljs-params">(ll a,ll b,ll&amp;x,ll&amp;y)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(b==<span class="hljs-number">0</span>)&#123;x=<span class="hljs-number">1</span>;y=<span class="hljs-number">0</span>;<span class="hljs-keyword">return</span> a;&#125;<br>    ll t=exgcd(b,a%b,y,x);y-=a/b*x;<span class="hljs-keyword">return</span> t;<br>&#125;<br><br><br><br><span class="hljs-comment">//保证n一定存在原根</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">gen</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> m=n<span class="hljs-number">-1</span>,cnt=m,tot=<span class="hljs-number">0</span>,c[<span class="hljs-number">30</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>;i*i&lt;m;i++)<span class="hljs-keyword">if</span>(m%i==<span class="hljs-number">0</span>)&#123;<br>c[++tot]=cnt/i;<br><span class="hljs-keyword">while</span>(m%i==<span class="hljs-number">0</span>)m/=i;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(m&gt;<span class="hljs-number">2</span>)c[++tot]=cnt/m;<br>    inc(i,<span class="hljs-number">1</span>,n)&#123;<br><span class="hljs-keyword">bool</span> f=<span class="hljs-literal">true</span>;<br>inc(j,<span class="hljs-number">1</span>,tot)<span class="hljs-keyword">if</span>(qpow(i,c[j])==<span class="hljs-number">1</span>)&#123;f=<span class="hljs-literal">false</span>;<span class="hljs-keyword">break</span>;&#125;<br><span class="hljs-keyword">if</span>(f)<span class="hljs-keyword">return</span> i;<br>    &#125;<br>&#125;<br><br><span class="hljs-function">ll <span class="hljs-title">bsgs</span><span class="hljs-params">(ll a,ll b)</span></span>&#123;<br>    <span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt;v;<span class="hljs-keyword">int</span> n=<span class="hljs-built_in">sqrt</span>(inf)+<span class="hljs-number">1</span>,ans=inf;<br>    ll inv=qpow(a,inf<span class="hljs-number">-2</span>),t=qpow(a,n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++,b=b*inv%inf)<span class="hljs-keyword">if</span>(!v.count(b))v[b]=i;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>,k=<span class="hljs-number">1</span>;i&lt;n;i++,k=k*t%inf)<span class="hljs-keyword">if</span>(v.count(k))ans=min(ans,v[k]+i*n);<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><br><span class="hljs-comment">//inf为质数</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(_y==<span class="hljs-number">0</span>)&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"1\n0\n"</span>);<span class="hljs-keyword">return</span>;&#125;<br>    <span class="hljs-keyword">int</span> g=gen(inf),indb=bsgs(g,b);<br>    ll x,y;ll t=exgcd(a,inf<span class="hljs-number">-1</span>,x,y);x%=(inf<span class="hljs-number">-1</span>)/t;<span class="hljs-keyword">if</span>(x&lt;<span class="hljs-number">0</span>)x+=(inf<span class="hljs-number">-1</span>)/t;<br>    <span class="hljs-keyword">if</span>(indb%t)&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"0\n"</span>);<span class="hljs-keyword">return</span>;&#125;<br>    x*=indb/t;x%=(inf<span class="hljs-number">-1</span>)/t;<br>    <span class="hljs-keyword">int</span> tot=<span class="hljs-number">0</span>,c[<span class="hljs-number">100005</span>];<span class="hljs-comment">//答案个数</span><br>    <span class="hljs-keyword">if</span>(b==<span class="hljs-number">1</span>)c[++tot]=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(;x&lt;inf<span class="hljs-number">-1</span>;x+=(inf<span class="hljs-number">-1</span>)/t)c[++tot]=qpow(g,x);<br>    sort(c+<span class="hljs-number">1</span>,c+<span class="hljs-number">1</span>+tot);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,tot);inc(i,<span class="hljs-number">1</span>,tot)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d "</span>,c[i]);<span class="hljs-built_in">putchar</span>(<span class="hljs-string">'\n'</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    inf=read();_x=read();_y=read();<br>    solve(_x,_y);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> BSGS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bzoj1467(EXBSGS)</title>
      <link href="/bzoj1467/"/>
      <url>/bzoj1467/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=1467" target="_blank" rel="noopener">https://www.lydsy.com/JudgeOnline/problem.php?id=1467</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>$EXBSGS$ 板子题，就是在 $BSGS$ 基础上对模数疯狂约去 $gcd$</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y)/2</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 2100005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 105</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><br><br><br><span class="hljs-keyword">int</span> x,y;<br>ll inf;<br><span class="hljs-function">ll <span class="hljs-title">qpow</span><span class="hljs-params">(ll x,ll t)</span></span>&#123;<span class="hljs-keyword">return</span> t?qpow(sqr(x)%inf,t&gt;&gt;<span class="hljs-number">1</span>)*(t&amp;<span class="hljs-number">1</span>?x:<span class="hljs-number">1l</span>l)%inf:<span class="hljs-number">1l</span>l;&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">exgcd</span><span class="hljs-params">(ll a,ll b,ll&amp;x,ll&amp;y)</span></span>&#123;<span class="hljs-keyword">if</span>(b==<span class="hljs-number">0</span>)x=<span class="hljs-number">1</span>,y=<span class="hljs-number">0</span>;<span class="hljs-keyword">else</span> exgcd(b,a%b,y,x),y-=a/b*x;&#125;<br><br><br><span class="hljs-comment">//try a=4560 b=848750 inf=1203550 ans=783</span><br><span class="hljs-function">ll <span class="hljs-title">bsgs</span><span class="hljs-params">(ll a,ll b)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> s=<span class="hljs-number">0</span>;ll x,y;<br>    a%=inf;b%=inf;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>,t=<span class="hljs-number">1</span>%inf;succ(i)&lt;=inf;i++,t=t*a%inf)<span class="hljs-keyword">if</span>(t==b)<span class="hljs-keyword">return</span> i;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> t=__gcd(a,inf);t&gt;<span class="hljs-number">1</span>;t=__gcd(a,inf))&#123;<br><span class="hljs-keyword">if</span>(b%t)<span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>s++;b/=t;inf/=t;<br>exgcd(a/t,inf,x,y);x%=inf;<span class="hljs-keyword">if</span>(x&lt;<span class="hljs-number">0</span>)x+=inf;<br>b*=x;b%=inf;<br>    &#125;<br>    <span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt;v;<span class="hljs-keyword">int</span> n=<span class="hljs-built_in">sqrt</span>(inf)+<span class="hljs-number">1</span>,ans=inf;a%=inf;<br>    ll inv,t=qpow(a,n);exgcd(a,inf,inv,y);inv%=inf;<span class="hljs-keyword">if</span>(inv&lt;<span class="hljs-number">0</span>)inv+=inf;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++,b=b*inv%inf)<span class="hljs-keyword">if</span>(!v.count(b))v[b]=i;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>,k=<span class="hljs-number">1</span>;i&lt;n;i++,k=k*t%inf)<span class="hljs-keyword">if</span>(v.count(k))ans=min(ans,v[k]+i*n);<br>    <span class="hljs-keyword">if</span>(ans==inf)<span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> ans+s;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%lld%d"</span>,&amp;x,&amp;inf,&amp;y)&amp;&amp;(x||y||inf))&#123;<br><span class="hljs-keyword">if</span>(y&gt;=inf)&#123;<span class="hljs-built_in">puts</span>(<span class="hljs-string">"No Solution"</span>);<span class="hljs-keyword">continue</span>;&#125;<br><span class="hljs-keyword">int</span> t=bsgs(x,y);<br><span class="hljs-keyword">if</span>(t==<span class="hljs-number">-1</span>)<span class="hljs-built_in">puts</span>(<span class="hljs-string">"No Solution"</span>);<span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,t);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> BSGS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>comet-0-F(状压DP+二分)</title>
      <link href="/comet-0-F/"/>
      <url>/comet-0-F/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.cometoj.com/contest/34/problem/F?problem_id=1478" target="_blank" rel="noopener">https://www.cometoj.com/contest/34/problem/F?problem_id=1478</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>首先得处理一个多边形的情况，然后若干个多边形乘积可以直接状压 $DP$ 解决。。</p><p>$fffasttime$ 告诉窝萌，当共圆时多边形的面积最大，这个是定边长四边形共圆时面积最大这个结论的推广，严格证明见<a href="https://zhuanlan.zhihu.com/p/19673179" target="_blank" rel="noopener">这里</a>。然后就要求圆的半径，然后 $fffasttime$ 又告诉窝萌这显然可以二分，$check$ 直接判圆心角就行了，不过还有一种比较坑的情况是圆心在多边形外，这个也得特判一下。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-10</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y)/2</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 15</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 5005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><span class="hljs-keyword">int</span> n,m,tot,a[NM],p[nm],ans,b[NM];<br><span class="hljs-keyword">double</span> d[nm],g[nm];<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;c[NM];<br><br><br><span class="hljs-keyword">bool</span> _check(<span class="hljs-keyword">double</span> t)&#123;<br>    <span class="hljs-keyword">double</span> s=<span class="hljs-number">0</span>;<br>    inc(i,<span class="hljs-number">1</span>,tot<span class="hljs-number">-1</span>)s+=<span class="hljs-built_in">asin</span>(b[i]/t/<span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">return</span> s&gt;<span class="hljs-built_in">asin</span>(b[tot]/t/<span class="hljs-number">2</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-keyword">double</span> t)</span></span>&#123;<br>    <span class="hljs-keyword">double</span> s=<span class="hljs-number">0</span>;<br>    inc(i,<span class="hljs-number">1</span>,tot)s+=<span class="hljs-built_in">asin</span>(b[i]/t/<span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">return</span> s&lt;pi;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//freopen("data.in","r",stdin);</span><br>    <span class="hljs-keyword">int</span> _=read();<span class="hljs-keyword">while</span>(_--)&#123;<br>n=read();inc(i,<span class="hljs-number">1</span>,n)a[i]=read();<br>sort(a+<span class="hljs-number">1</span>,a+<span class="hljs-number">1</span>+n);<br>m=succ(n)<span class="hljs-number">-1</span>;<br>inc(i,<span class="hljs-number">7</span>,m)&#123;<br>    tot=<span class="hljs-number">0</span>;d[i]=g[i]=<span class="hljs-number">0</span>;<br>    inc(j,<span class="hljs-number">1</span>,n)<span class="hljs-keyword">if</span>(i&amp;succ(j<span class="hljs-number">-1</span>))b[++tot]=a[j];<br>    <span class="hljs-keyword">if</span>(tot&lt;<span class="hljs-number">3</span>)<span class="hljs-keyword">continue</span>;<br>    <span class="hljs-keyword">double</span> R=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> cnt=<span class="hljs-number">0</span>;<br>    inc(j,<span class="hljs-number">1</span>,tot<span class="hljs-number">-1</span>)cnt+=b[j];<br>    <span class="hljs-keyword">if</span>(cnt&lt;b[tot])<span class="hljs-keyword">continue</span>;<br>    cnt=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(!check(b[tot]/<span class="hljs-number">2.0</span>))&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">double</span> x=b[tot]/<span class="hljs-number">2.0</span>,y=<span class="hljs-number">10000</span>;cnt&lt;=<span class="hljs-number">100</span>;cnt++)<br>    <span class="hljs-keyword">if</span>(check(mid))R=y=mid;<span class="hljs-keyword">else</span> x=mid;<br>inc(j,<span class="hljs-number">1</span>,tot)g[i]+=<span class="hljs-built_in">sqrt</span>(sqr(R)-sqr(b[j])/<span class="hljs-number">4.0</span>)*b[j]/<span class="hljs-number">2</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">double</span> x=b[tot]/<span class="hljs-number">2.0</span>,y=<span class="hljs-number">10000</span>;cnt&lt;=<span class="hljs-number">100</span>;cnt++)<br>    <span class="hljs-keyword">if</span>(_check(mid))R=y=mid;<span class="hljs-keyword">else</span> x=mid;<br>inc(j,<span class="hljs-number">1</span>,tot<span class="hljs-number">-1</span>)g[i]+=<span class="hljs-built_in">sqrt</span>(sqr(R)-sqr(b[j])/<span class="hljs-number">4.0</span>)*b[j]/<span class="hljs-number">2</span>;<br>g[i]-=<span class="hljs-built_in">sqrt</span>(sqr(R)-sqr(b[tot])/<span class="hljs-number">4.0</span>)*b[tot]/<span class="hljs-number">2</span>;<br>    &#125;<br>&#125;<br>d[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>inc(i,<span class="hljs-number">0</span>,m)<span class="hljs-keyword">if</span>(d[i]&gt;eps)&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> t=m^i,j=t;j;j=(j<span class="hljs-number">-1</span>)&amp;t)<span class="hljs-keyword">if</span>(g[j]&gt;eps)&#123;<br><span class="hljs-keyword">double</span> cnt=d[i]*g[j];<br><span class="hljs-keyword">if</span>(d[i|j]&lt;cnt)d[i|j]=cnt,p[i|j]=i;<br>    &#125;<br>&#125;<br>ans=<span class="hljs-number">1</span>;tot=<span class="hljs-number">0</span>;d[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br>inc(i,<span class="hljs-number">1</span>,m)<span class="hljs-keyword">if</span>(d[i]&gt;d[ans])ans=i;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%.10lf\n"</span>,d[ans]);<br><span class="hljs-keyword">for</span>(;ans;ans=p[ans])&#123;<br>    <span class="hljs-keyword">int</span> t=ans^p[ans];<br>    <span class="hljs-keyword">if</span>(g[t]&lt;eps)<span class="hljs-keyword">continue</span>;<br>    c[++tot].clear();<br>    inc(i,<span class="hljs-number">1</span>,n)<span class="hljs-keyword">if</span>(t&amp;succ(i<span class="hljs-number">-1</span>))c[tot].push_back(i);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,tot);<br>inc(i,<span class="hljs-number">1</span>,tot)&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d"</span>,(<span class="hljs-keyword">int</span>)c[i].size());<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span>&amp;j:c[i])<span class="hljs-built_in">printf</span>(<span class="hljs-string">" %d"</span>,a[j]);<span class="hljs-built_in">putchar</span>(<span class="hljs-string">'\n'</span>);&#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 二分 </tag>
            
            <tag> 计算几何 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>comet-0-D(状压DP)</title>
      <link href="/comet-0-D/"/>
      <url>/comet-0-D/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.cometoj.com/contest/34/problem/D" target="_blank" rel="noopener">https://www.cometoj.com/contest/34/problem/D</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>场上一直没看这题。。因为没什么人过。。现在看起来真的不难。。甚至想暴力乱搞（</p><p>一个直观的想法就是设 $d[S][i][j][k]$ 表示做题情况为 $S$ ，三人各用了 $i$ 、 $j$ 、$k$ 时间能否到达</p><p>发现复杂度过高，而这个 $DP$ 方程只涉及到这个状态可不可达，所以可以降个维，设 $d[S][i][j]$ 表示做题情况为 $S$ ，前两人各用了 $i$ 、 $j$  时间的同时第三个人的最少用时。然后这个复杂度是$O(2^6180^2*6)$ ，过此题足够了。。</p><p>所以面对没人过的题一定不能怂啊。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y)/2</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 100005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 105</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><br><br><br><br><br><br><br><span class="hljs-keyword">int</span> n,tot,a[<span class="hljs-number">10</span>][<span class="hljs-number">10</span>],d[<span class="hljs-number">64</span>][<span class="hljs-number">185</span>][<span class="hljs-number">185</span>],_ans,ans;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">upd</span><span class="hljs-params">(<span class="hljs-keyword">int</span>&amp;x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<span class="hljs-keyword">if</span>(y&lt;x)x=y;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=<span class="hljs-number">6</span>;tot=<span class="hljs-number">63</span>;<br>    <span class="hljs-keyword">int</span> _=read();<span class="hljs-keyword">while</span>(_--)&#123;<br>inc(i,<span class="hljs-number">1</span>,n)inc(j,<span class="hljs-number">1</span>,<span class="hljs-number">7</span>)a[i][j]=read();<br>inc(p,<span class="hljs-number">0</span>,tot)inc(i,<span class="hljs-number">0</span>,<span class="hljs-number">180</span>)inc(j,<span class="hljs-number">0</span>,<span class="hljs-number">180</span>)d[p][i][j]=inf;<br>d[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=ans=_ans=<span class="hljs-number">0</span>;<br>inc(p,<span class="hljs-number">0</span>,tot)inc(i,<span class="hljs-number">0</span>,<span class="hljs-number">180</span>)inc(j,<span class="hljs-number">0</span>,<span class="hljs-number">180</span>)<span class="hljs-keyword">if</span>(d[p][i][j]&lt;=<span class="hljs-number">180</span>)&#123;<br>    inc(k,<span class="hljs-number">1</span>,n)<span class="hljs-keyword">if</span>(!(p&amp;succ(k<span class="hljs-number">-1</span>)))&#123;<br><span class="hljs-keyword">int</span> t=p|succ(k<span class="hljs-number">-1</span>),v;<br>v=i+a[k][<span class="hljs-number">1</span>];<span class="hljs-keyword">if</span>(v&lt;=<span class="hljs-number">180</span>)upd(d[t][v][j],d[p][i][j]);<br>v=j+a[k][<span class="hljs-number">2</span>];<span class="hljs-keyword">if</span>(v&lt;=<span class="hljs-number">180</span>)upd(d[t][i][v],d[p][i][j]);<br>v=d[p][i][j]+a[k][<span class="hljs-number">3</span>];<span class="hljs-keyword">if</span>(v&lt;=<span class="hljs-number">180</span>)upd(d[t][i][j],v);<br>v=max(i,j)+a[k][<span class="hljs-number">4</span>];<span class="hljs-keyword">if</span>(v&lt;=<span class="hljs-number">180</span>)upd(d[t][v][v],d[p][i][j]);<br>v=max(i,d[p][i][j])+a[k][<span class="hljs-number">5</span>];<span class="hljs-keyword">if</span>(v&lt;=<span class="hljs-number">180</span>)upd(d[t][v][j],v);<br>v=max(j,d[p][i][j])+a[k][<span class="hljs-number">6</span>];<span class="hljs-keyword">if</span>(v&lt;=<span class="hljs-number">180</span>)upd(d[t][i][v],v);<br>v=max(max(i,j),d[p][i][j])+a[k][<span class="hljs-number">7</span>];<span class="hljs-keyword">if</span>(v&lt;=<span class="hljs-number">180</span>)upd(d[t][v][v],v);<br>    &#125;<br>    <span class="hljs-keyword">int</span> t=__builtin_popcount(p);<br>    <span class="hljs-keyword">if</span>(t&gt;ans)ans=t,_ans=max(max(i,j),d[p][i][j]);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ans==t)_ans=min(_ans,max(max(i,j),d[p][i][j]));<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d %d\n"</span>,ans,_ans);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>comet-0-E(LIS+离散化)</title>
      <link href="/comet-0-E/"/>
      <url>/comet-0-E/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.cometoj.com/contest/34/problem/E?problem_id=1477" target="_blank" rel="noopener">https://www.cometoj.com/contest/34/problem/E?problem_id=1477</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>这题和<a href="/cf650D">cf650D</a>很像。。</p><p>首先一个点他最多只能使 $LIS$ 加一，所以只需要考虑每个点能不能加一就可以了。。</p><p>然后考虑是不是转移关键点。</p><p>设当前点为 $i$</p><p>如果 $i$ 不是关键点，那么考虑接在 $LIS$ 中，所以要处理 $i$ 之前的转移点的最小值，还要考虑转移点的有效转移区间和与下一个转移点差值等于 $1$ 的情况，然后再丢进优先队列，预处理起来比较恶心。。</p><p>如果 $i$ 是关键点，那么 $LIS$ 必定不会增长，那么可以接在他的转移点后面 $(a[pre_i]+1)$ 。还有一个很坑的地方是可以接在 $LIS-1$ 的序列中，所以还要把 $LIS-1$ 的点扣出来，想上面一样再开个优先队列恶心预处理。。</p><p>各种细节问题吧，得对拍一下比较好。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y)/2</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 100005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 105</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><br><span class="hljs-keyword">int</span> n,a[NM],c[NM],b[NM],len,d[NM],ans[NM],v[NM];<br><span class="hljs-keyword">int</span> nxt[NM],_v[NM],nx[NM];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tmp</span>&#123;</span><br>    <span class="hljs-keyword">int</span> x,y;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-keyword">const</span> tmp&amp;o)<span class="hljs-keyword">const</span>&#123;<span class="hljs-keyword">return</span> y&gt;o.y;&#125;<br>&#125;;<br>priority_queue&lt;tmp&gt;q,_q;<br><span class="hljs-built_in">vector</span>&lt;tmp&gt;cnt[NM];<br><br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//freopen("data.in","r",stdin);</span><br>    <span class="hljs-keyword">int</span> _=read();<span class="hljs-keyword">while</span>(_--)&#123;<br>n=read();inc(i,<span class="hljs-number">1</span>,n)a[i]=read();<br>inc(i,<span class="hljs-number">1</span>,n)v[i]=<span class="hljs-number">0</span>,nxt[i]=<span class="hljs-number">0</span>,_v[i]=<span class="hljs-number">0</span>,cnt[i].clear(),nx[i]=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(!q.empty())q.pop();<br><span class="hljs-keyword">while</span>(!_q.empty())_q.pop();<br>d[len=<span class="hljs-number">1</span>]=a[<span class="hljs-number">1</span>];c[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;b[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;d[<span class="hljs-number">0</span>]=<span class="hljs-number">-1</span>;<br>inc(i,<span class="hljs-number">2</span>,n)&#123;<br>    <span class="hljs-keyword">if</span>(d[len]&lt;a[i])d[++len]=a[i],c[i]=len,b[i]=len,ans[i]=d[len<span class="hljs-number">-1</span>]+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">int</span> t=lower_bound(d+<span class="hljs-number">1</span>,d+<span class="hljs-number">1</span>+len,a[i])-d;ans[i]=d[t<span class="hljs-number">-1</span>]+<span class="hljs-number">1</span>;<br>d[t]=a[i];c[i]=t;b[i]=t;<br>    &#125;<br>&#125;<br>d[len=<span class="hljs-number">1</span>]=-a[n];<br>dec(i,n<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>)&#123;<br>    <span class="hljs-keyword">if</span>(d[len]&lt;-a[i])d[++len]=-a[i],c[i]+=len<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">int</span> t=lower_bound(d+<span class="hljs-number">1</span>,d+<span class="hljs-number">1</span>+len,-a[i])-d;<br>d[t]=-a[i];c[i]+=t<span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;<br>inc(i,<span class="hljs-number">1</span>,n)<span class="hljs-keyword">if</span>(c[i]==len)&#123;<br>    v[b[i]]++;<br>    cnt[b[i]].push_back(tmp&#123;i,a[i]&#125;);<br>    <span class="hljs-keyword">if</span>(b[i]==len)nxt[i]=n+<span class="hljs-number">1</span>;<br>&#125;<br>inc(i,<span class="hljs-number">1</span>,len)sort(cnt[i].begin(),cnt[i].end());<br>inc(i,<span class="hljs-number">1</span>,len<span class="hljs-number">-1</span>)&#123;<br>    <span class="hljs-keyword">int</span> t=<span class="hljs-number">0</span>,s=<span class="hljs-number">0</span>,tot=cnt[i+<span class="hljs-number">1</span>].size()<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span>(tmp&amp;j:cnt[i])&#123;<br><span class="hljs-keyword">while</span>(t&lt;=tot&amp;&amp;cnt[i+<span class="hljs-number">1</span>][t].y&gt;j.y+<span class="hljs-number">1</span>)s=max(s,cnt[i+<span class="hljs-number">1</span>][t].x),t++;<br>nxt[j.x]=s;<br>    &#125;<br>&#125;<br>inc(i,<span class="hljs-number">1</span>,n)<span class="hljs-keyword">if</span>(c[i]==len<span class="hljs-number">-1</span>)cnt[b[i]].push_back(tmp&#123;i,a[i]&#125;);<br>inc(i,<span class="hljs-number">1</span>,len)sort(cnt[i].begin(),cnt[i].end());<br>inc(i,<span class="hljs-number">1</span>,len<span class="hljs-number">-1</span>)&#123;<br>    <span class="hljs-keyword">int</span> t=<span class="hljs-number">0</span>,s=<span class="hljs-number">0</span>,tot=cnt[i+<span class="hljs-number">1</span>].size()<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span>(tmp&amp;j:cnt[i])&#123;<br><span class="hljs-keyword">while</span>(t&lt;=tot&amp;&amp;cnt[i+<span class="hljs-number">1</span>][t].y&gt;j.y+<span class="hljs-number">1</span>)s=max(s,cnt[i+<span class="hljs-number">1</span>][t].x),t++;<br>nx[j.x]=s;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//inc(i,1,n)printf("%d ",b[i]);putchar('\n');</span><br><span class="hljs-comment">//inc(i,1,n)printf("%d ",nxt[i]);putchar('\n');</span><br>dec(i,n,<span class="hljs-number">1</span>)<span class="hljs-keyword">if</span>(b[i]==<span class="hljs-number">1</span>&amp;&amp;c[i]==len&amp;&amp;a[i]&gt;<span class="hljs-number">0</span>&amp;&amp;q.empty())q.push(tmp&#123;i,<span class="hljs-number">0</span>&#125;);<br>dec(i,n,<span class="hljs-number">1</span>)<span class="hljs-keyword">if</span>(b[i]==<span class="hljs-number">1</span>&amp;&amp;c[i]&gt;=len<span class="hljs-number">-1</span>&amp;&amp;a[i]&gt;<span class="hljs-number">0</span>&amp;&amp;_q.empty())_q.push(tmp&#123;i,<span class="hljs-number">0</span>&#125;);<br>inc(i,<span class="hljs-number">1</span>,n)&#123;<br>    <span class="hljs-keyword">if</span>(c[i]==len&amp;&amp;v[b[i]]==<span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">while</span>(!_q.empty()&amp;&amp;_q.top().x&lt;=i)_q.pop();<br><span class="hljs-keyword">if</span>(!_q.empty())ans[i]=min(ans[i],_q.top().y);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d %d\n"</span>,len,ans[i]);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">while</span>(!q.empty()&amp;&amp;q.top().x&lt;=i)q.pop();<br><span class="hljs-keyword">if</span>(q.empty())<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d 0\n"</span>,len);<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d %d\n"</span>,len+<span class="hljs-number">1</span>,q.top().y);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(c[i]==len&amp;&amp;nxt[i])q.push(tmp&#123;nxt[i],a[i]+<span class="hljs-number">1</span>&#125;);<br>    <span class="hljs-keyword">if</span>(c[i]&gt;=len<span class="hljs-number">-1</span>&amp;&amp;nx[i])_q.push(tmp&#123;nx[i],a[i]+<span class="hljs-number">1</span>&#125;);<br>&#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bzoj2242(BSGS)</title>
      <link href="/bzoj2242/"/>
      <url>/bzoj2242/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=3239" target="_blank" rel="noopener">https://www.lydsy.com/JudgeOnline/problem.php?id=3239</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>$BSGS$ 板子题，这个板子要求 $a$ 和 $inf$ 互质，所以在这题，需要特判 $a%inf=0$ ，给了个比较强的数据来测试，应该很快就能发现有没有写挂。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y)/2</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 2100005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 105</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><br><br>ll _x,_y,inf;<br><span class="hljs-keyword">int</span> p;<br><br><span class="hljs-function">ll <span class="hljs-title">qpow</span><span class="hljs-params">(ll x,ll t)</span></span>&#123;<span class="hljs-keyword">return</span> t?qpow(sqr(x)%inf,t&gt;&gt;<span class="hljs-number">1</span>)*(t&amp;<span class="hljs-number">1</span>?x:<span class="hljs-number">1l</span>l)%inf:<span class="hljs-number">1l</span>l;&#125;<br><br><span class="hljs-function">ll <span class="hljs-title">exgcd</span><span class="hljs-params">(ll a,ll b,ll&amp;x,ll&amp;y)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(b==<span class="hljs-number">0</span>)&#123;x=<span class="hljs-number">1</span>;y=<span class="hljs-number">0</span>;<span class="hljs-keyword">return</span> a;&#125;<br>    ll t=exgcd(b,a%b,y,x);y-=a/b*x;<span class="hljs-keyword">return</span> t;<br>&#125;<br><br><span class="hljs-comment">//a^x=b(mod inf)</span><br><span class="hljs-comment">//try a=2 b=1111111 inf=12345701 output=9584351</span><br><span class="hljs-function">ll <span class="hljs-title">bsgs</span><span class="hljs-params">(ll a,ll b)</span></span>&#123;<br>    <span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt;v;<span class="hljs-keyword">int</span> n=<span class="hljs-built_in">sqrt</span>(inf)+<span class="hljs-number">1</span>,ans=inf;<br>    ll inv=qpow(a,inf<span class="hljs-number">-2</span>),t=qpow(a,n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++,b=b*inv%inf)<span class="hljs-keyword">if</span>(!v.count(b))v[b]=i;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>,k=<span class="hljs-number">1</span>;i&lt;=n;i++,k=k*t%inf)<span class="hljs-keyword">if</span>(v.count(k))ans=min(ans,v[k]+i*n);<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> _=read();p=read();<span class="hljs-keyword">while</span>(_--)&#123;<br>_x=read();_y=read();inf=read();<br><span class="hljs-keyword">if</span>(p==<span class="hljs-number">1</span>)&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,qpow(_x,_y));<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(p==<span class="hljs-number">2</span>)&#123;<br>    _x%=inf;_y%=inf;<br>    ll x,y;<br>    ll t=exgcd(_x,inf,x,y);x%=inf;<span class="hljs-keyword">if</span>(x&lt;<span class="hljs-number">0</span>)x+=inf;<br>    <span class="hljs-keyword">if</span>(_y%t)&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"Orz, I cannot find x!\n"</span>);<span class="hljs-keyword">continue</span>;&#125;<br>    x*=_y/t;x%=inf;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,x);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    _x%=inf;_y%=inf;<br>    <span class="hljs-keyword">if</span>(_x==<span class="hljs-number">0</span>)&#123;<span class="hljs-keyword">if</span>(_y==<span class="hljs-number">1</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"0\n"</span>);<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(_y==<span class="hljs-number">0</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"1\n"</span>);<span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Orz, I cannot find x!\n"</span>);<span class="hljs-keyword">continue</span>;&#125;<br>    <span class="hljs-keyword">int</span> t=bsgs(_x,_y);<span class="hljs-keyword">if</span>(t&lt;inf)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,t);<span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Orz, I cannot find x!\n"</span>);<br>&#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> BSGS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>luogu3803(FFT/NTT模板)</title>
      <link href="/fft/"/>
      <url>/fft/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.org/problemnew/show/P3803" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P3803</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>来贴 $FFT$ 模板</p><p>这个和位数为 $1e6$ 的高精度乘法优化差不多。。</p><p>多项式乘完之后项数会变多，所以要对原多项式进行拓展，视作高次项的系数为 $0$ ，然后由于 $FFT$ 需要以 $2^n$ 作为运算的基数，所以内存要开大一点。。</p><p>然后由于数字比较小可以用 $NTT$ 做</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>$FFT$</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y)/2</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 2100005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 105</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><br><span class="hljs-keyword">int</span> n,m;<br>ll a[NM],b[NM];<br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> cp complex<span class="hljs-meta-string">&lt;double&gt;</span></span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">FFT</span>&#123;</span><br>    <span class="hljs-keyword">int</span> n,bit,rev[NM];<br>    cp a[NM],b[NM];<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fft</span><span class="hljs-params">(cp*a,<span class="hljs-keyword">int</span> f)</span></span>&#123;<br>inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)<span class="hljs-keyword">if</span>(i&lt;rev[i])swap(a[i],a[rev[i]]);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">1</span>;k&lt;n;k&lt;&lt;=<span class="hljs-number">1</span>)&#123;<br>    <span class="hljs-function">cp <span class="hljs-title">t</span><span class="hljs-params">(<span class="hljs-built_in">cos</span>(pi/k),f*<span class="hljs-built_in">sin</span>(pi/k))</span></span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i+=k&lt;&lt;<span class="hljs-number">1</span>)&#123;<br><span class="hljs-function">cp <span class="hljs-title">w</span><span class="hljs-params">(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>)</span></span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;k;j++,w*=t)&#123;<br>    cp x=a[i+j],y=w*a[i+j+k];<br>    a[i+j]=x+y;a[i+j+k]=x-y;<br>&#125;<br>    &#125;<br>&#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">plu</span><span class="hljs-params">(ll*_a,ll*_b,<span class="hljs-keyword">int</span> p,<span class="hljs-keyword">int</span> m)</span></span>&#123;<br>inc(i,<span class="hljs-number">0</span>,p)a[i]=_a[i];<br>inc(i,<span class="hljs-number">0</span>,m)b[i]=_b[i];<br><span class="hljs-keyword">for</span>(n=p+m+<span class="hljs-number">1</span>,bit=<span class="hljs-number">0</span>;succ(bit)&lt;n;bit++);n=succ(bit);<br>inc(i,<span class="hljs-number">1</span>,n<span class="hljs-number">-1</span>)rev[i]=(rev[i&gt;&gt;<span class="hljs-number">1</span>]&gt;&gt;<span class="hljs-number">1</span>)|((i&amp;<span class="hljs-number">1</span>)&lt;&lt;(bit<span class="hljs-number">-1</span>));<br>fft(a,<span class="hljs-number">1</span>);fft(b,<span class="hljs-number">1</span>);inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)a[i]*=b[i];<br>fft(a,<span class="hljs-number">-1</span>);inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)a[i]/=n;<br>inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)_a[i]=a[i].real()+<span class="hljs-number">0.5</span>;<br>inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)a[i]=b[i]=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">return</span> p+m;<br>    &#125;<br>&#125;fft;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();m=read();<br>    inc(i,<span class="hljs-number">0</span>,n)a[i]=read();<br>    inc(i,<span class="hljs-number">0</span>,m)b[i]=read();<br>    n=fft.plu(a,b,n,m);<br>    inc(i,<span class="hljs-number">0</span>,n)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld "</span>,a[i]);<span class="hljs-built_in">putchar</span>(<span class="hljs-string">'\n'</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><br></p><p><br></p><p>$NTT$</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y)/2</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 2100005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 105</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">998244353</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><span class="hljs-keyword">int</span> n,m;<br>ll a[NM],b[NM];<br><br><span class="hljs-function">ll <span class="hljs-title">qpow</span><span class="hljs-params">(ll x,ll t)</span></span>&#123;<span class="hljs-keyword">return</span> t?qpow(sqr(x)%inf,t&gt;&gt;<span class="hljs-number">1</span>)*(t&amp;<span class="hljs-number">1</span>?x:<span class="hljs-number">1l</span>l)%inf:<span class="hljs-number">1l</span>l;&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">FFT</span>&#123;</span><br>    <span class="hljs-keyword">int</span> n,m,bit,rev[NM];<br>    ll b[NM],invn;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fft</span><span class="hljs-params">(ll*a,<span class="hljs-keyword">int</span> f)</span></span>&#123;<br>inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)<span class="hljs-keyword">if</span>(i&lt;rev[i])swap(a[i],a[rev[i]]);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">1</span>;k&lt;n;k&lt;&lt;=<span class="hljs-number">1</span>)&#123;<br>    ll t=qpow(<span class="hljs-number">3</span>,(inf<span class="hljs-number">-1</span>)/k/<span class="hljs-number">2</span>);<span class="hljs-keyword">if</span>(f==<span class="hljs-number">-1</span>)t=qpow(t,inf<span class="hljs-number">-2</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i+=k&lt;&lt;<span class="hljs-number">1</span>)&#123;<br>ll w=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;k;j++,w=w*t%inf)&#123;<br>    ll x=a[i+j],y=w*a[i+j+k]%inf;<br>    a[i+j]=(x+y)%inf;a[i+j+k]=(x-y+inf)%inf;<br>&#125;<br>    &#125;<br>&#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">plu</span><span class="hljs-params">(ll*a,ll*_b,<span class="hljs-keyword">int</span> p,<span class="hljs-keyword">int</span> m)</span></span>&#123;<br>inc(i,<span class="hljs-number">0</span>,m)b[i]=_b[i];<br><span class="hljs-keyword">for</span>(n=p+m+<span class="hljs-number">1</span>,bit=<span class="hljs-number">0</span>;succ(bit)&lt;n;bit++);n=succ(bit);<br>invn=qpow(n,inf<span class="hljs-number">-2</span>);<br>inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)rev[i]=(rev[i&gt;&gt;<span class="hljs-number">1</span>]&gt;&gt;<span class="hljs-number">1</span>)|((i&amp;<span class="hljs-number">1</span>)&lt;&lt;(bit<span class="hljs-number">-1</span>));<br>fft(a,<span class="hljs-number">1</span>);fft(b,<span class="hljs-number">1</span>);inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)a[i]=a[i]*b[i]%inf;<br>fft(a,<span class="hljs-number">-1</span>);inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)a[i]=a[i]*invn%inf;<br>inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)b[i]=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">return</span> m+p;<br>    &#125;<br>&#125;fft;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();m=read();<br>    inc(i,<span class="hljs-number">0</span>,n)a[i]=read();<br>    inc(i,<span class="hljs-number">0</span>,m)b[i]=read();<br>    n=fft.plu(a,b,n,m);<br>    inc(i,<span class="hljs-number">0</span>,n)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld "</span>,a[i]);<span class="hljs-built_in">putchar</span>(<span class="hljs-string">'\n'</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><br></p><p><br></p><h3 id="另附常用NTT模数"><a href="#另附常用NTT模数" class="headerlink" title="另附常用NTT模数"></a>另附常用NTT模数</h3><p><strong>说明：</strong> $n=r2^k+1$ ，$g$ 为 $n$ 的原根</p><div class="table-container"><table><thead><tr><th>n</th><th>r</th><th>k</th><th>g</th></tr></thead><tbody><tr><td>3</td><td>1</td><td>1</td><td>2</td></tr><tr><td>5</td><td>1</td><td>2</td><td>2</td></tr><tr><td>17</td><td>1</td><td>4</td><td>3</td></tr><tr><td>97</td><td>3</td><td>5</td><td>5</td></tr><tr><td>193</td><td>3</td><td>6</td><td>5</td></tr><tr><td>257</td><td>1</td><td>8</td><td>3</td></tr><tr><td>7681</td><td>15</td><td>9</td><td>17</td></tr><tr><td>12289</td><td>3</td><td>12</td><td>11</td></tr><tr><td>40961</td><td>5</td><td>13</td><td>3</td></tr><tr><td>65537</td><td>1</td><td>16</td><td>3</td></tr><tr><td>786433</td><td>3</td><td>18</td><td>10</td></tr><tr><td>5767169</td><td>11</td><td>19</td><td>3</td></tr><tr><td>7340033</td><td>7</td><td>20</td><td>3</td></tr><tr><td>23068673</td><td>11</td><td>21</td><td>3</td></tr><tr><td>104857601</td><td>25</td><td>22</td><td>3</td></tr><tr><td>167772161</td><td>5</td><td>25</td><td>3</td></tr><tr><td>469762049</td><td>7</td><td>26</td><td>3</td></tr><tr><td>1004535809</td><td>479</td><td>21</td><td>3</td></tr><tr><td>2013265921</td><td>15</td><td>27</td><td>31</td></tr><tr><td>2281701377</td><td>17</td><td>27</td><td>3</td></tr><tr><td>3221225473</td><td>3</td><td>30</td><td>5</td></tr><tr><td>75161927681</td><td>35</td><td>31</td><td>3</td></tr><tr><td>77309411329</td><td>9</td><td>33</td><td>7</td></tr><tr><td>206158430209</td><td>3</td><td>36</td><td>22</td></tr><tr><td>2061584302081</td><td>15</td><td>37</td><td>7</td></tr><tr><td>2748779069441</td><td>5</td><td>39</td><td>3</td></tr><tr><td>6597069766657</td><td>3</td><td>41</td><td>5</td></tr><tr><td>39582418599937</td><td>9</td><td>42</td><td>5</td></tr><tr><td>79164837199873</td><td>9</td><td>43</td><td>5</td></tr><tr><td>263882790666241</td><td>15</td><td>44</td><td>7</td></tr><tr><td>1231453023109121</td><td>35</td><td>45</td><td>3</td></tr><tr><td>1337006139375617</td><td>19</td><td>46</td><td>3</td></tr><tr><td>3799912185593857</td><td>27</td><td>47</td><td>5</td></tr><tr><td>4222124650659841</td><td>15</td><td>48</td><td>19</td></tr><tr><td>7881299347898369</td><td>7</td><td>50</td><td>6</td></tr><tr><td>31525197391593473</td><td>7</td><td>52</td><td>3</td></tr><tr><td>180143985094819841</td><td>5</td><td>55</td><td>6</td></tr><tr><td>1945555039024054273</td><td>27</td><td>56</td><td>5</td></tr><tr><td>4179340454199820289</td><td>29</td><td>57</td><td>3</td></tr></tbody></table></div>]]></content>
      
      
      
        <tags>
            
            <tag> FFT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cf650D(动态DP)</title>
      <link href="/cf650D/"/>
      <url>/cf650D/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://codeforces.com/contest/650/problem/D" target="_blank" rel="noopener">https://codeforces.com/contest/650/problem/D</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定长度为 $n$ 的序列，然后有 $m$ 次修改，降 $x$ 位置修改成 $y$，每次修改询问修改后的 $LIS$ ，修改之间是独立的，即询问后序列会复原</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>这个题咋看不太好做，而其实单点修改对 $LIS$ 的影响无非就加 $1$ 或减 $1$ ，那么分类讨论一下就可以了</p><p>如果 $LIS$ 包含 $y$ ，那么在做 $LIS$ 的时候把 $y$ 拿去转移一下就能得到接在 $y$ 前面的长度，而后面的长度反过来做一遍就行了</p><p>如果 $LIS$ 不包含 $y$ ，那么求相当于去掉 $x$ 后的 $LIS$ ，只需判断会不会减 $1$ 即可。这个时候要考虑每个点是不是作为所有 $LIS$ 的必经之点，如果你构成 $LIS$ 的所有的点中，有多个点是在 $LIS$ 的同一位置，那么显然这些点为非关键点；反过来如果 $LIS$ 中有一个位置只能由一个点构成，那么这个点就必为关键点。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y)/2</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 400005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 105</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pi 3.1415926535897931</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">P</span>&#123;</span><br>    <span class="hljs-keyword">int</span> x,y,i;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-keyword">const</span> P&amp;o)<span class="hljs-keyword">const</span>&#123;<span class="hljs-keyword">return</span> x&lt;o.x||(x==o.x&amp;&amp;y&lt;o.y);&#125;<br>&#125;p[NM];<br><span class="hljs-keyword">int</span> n,m,a[NM],cnt,d[NM],len,c[NM],ans[NM],v[NM],b[NM],f[NM];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//freopen("data.in","r",stdin);</span><br>    n=read();m=read();<br>    inc(i,<span class="hljs-number">1</span>,n)a[i]=read();<br>    inc(i,<span class="hljs-number">1</span>,m)b[i]=p[i].x=read(),p[i].y=read(),p[i].i=i,ans[i]=<span class="hljs-number">1</span>;<br>    sort(p+<span class="hljs-number">1</span>,p+<span class="hljs-number">1</span>+m);<br>    d[len=<span class="hljs-number">1</span>]=a[<span class="hljs-number">1</span>];f[<span class="hljs-number">1</span>]=c[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(cnt=<span class="hljs-number">1</span>;p[cnt].x==<span class="hljs-number">1</span>;cnt++);<br>    inc(i,<span class="hljs-number">2</span>,n)&#123;<br><span class="hljs-keyword">for</span>(;p[cnt].x==i;cnt++)ans[p[cnt].i]+=lower_bound(d+<span class="hljs-number">1</span>,d+<span class="hljs-number">1</span>+len,p[cnt].y)-d<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">if</span>(d[len]&lt;a[i])d[c[i]=++len]=a[i];<br><span class="hljs-keyword">else</span> d[c[i]=(lower_bound(d+<span class="hljs-number">1</span>,d+<span class="hljs-number">1</span>+len,a[i])-d)]=a[i];<br>f[i]=c[i];<br>    &#125;<br>    mem(d);d[len=<span class="hljs-number">1</span>]=-a[n];c[n]++;<br>    <span class="hljs-keyword">for</span>(cnt=m;p[cnt].x==n;cnt--);<br>    dec(i,n<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">for</span>(;p[cnt].x==i;cnt--)ans[p[cnt].i]+=lower_bound(d+<span class="hljs-number">1</span>,d+<span class="hljs-number">1</span>+len,-p[cnt].y)-d<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">int</span> t;<br><span class="hljs-keyword">if</span>(d[len]&lt;-a[i])d[t=++len]=-a[i];<br><span class="hljs-keyword">else</span> d[t=lower_bound(d+<span class="hljs-number">1</span>,d+<span class="hljs-number">1</span>+len,-a[i])-d]=-a[i];<br>c[i]+=t;<br>    &#125;<br>    inc(i,<span class="hljs-number">1</span>,n)<span class="hljs-keyword">if</span>(c[i]==len+<span class="hljs-number">1</span>)v[f[i]]++;<br>    <span class="hljs-comment">//inc(i,1,n)printf("%d ",c[i]);putchar('\n');</span><br>    <span class="hljs-comment">//inc(i,1,n)printf("%d ",f[i]);putchar('\n');</span><br>    <span class="hljs-comment">//inc(i,1,m)printf("%d ",ans[i]);putchar('\n');</span><br>    inc(i,<span class="hljs-number">1</span>,m)<span class="hljs-keyword">if</span>(c[b[i]]==len+<span class="hljs-number">1</span>&amp;&amp;v[f[b[i]]]==<span class="hljs-number">1</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,max(ans[i],len<span class="hljs-number">-1</span>));<span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,max(ans[i],len));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cf1139E(二分图)</title>
      <link href="/cf1139E/"/>
      <url>/cf1139E/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://codeforces.com/contest/1139/problem/E" target="_blank" rel="noopener">https://codeforces.com/contest/1139/problem/E</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定 $n$ 个人，$m$ 个俱乐部，每个人有一个权值，分别属于一个俱乐部，先依次删除 $d$ 个人，每次删除之后要从每个俱乐部里面选一个人，使得这些人的值 $mex$ 最大，并输出最大值（数据范围均在 $5e4$ 以内）</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>如果不考虑删边就是裸的二分图匹配，删边操作可以倒过来变成加边操作，这样每次加边看一个 $mex$ 是否变大即可</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y)/2</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 5005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 5005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pi 3.1415926535897931</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span>&#123;</span><span class="hljs-keyword">int</span> t;edge*next;&#125;e[nm],*h[NM],*o=e;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;o-&gt;t=y;o-&gt;next=h[x];h[x]=o++;&#125;<br><span class="hljs-keyword">int</span> n,m,a[NM],b[NM],c[NM],ans[NM],v[NM],s,_x,p,match[NM];<br><span class="hljs-keyword">bool</span> _v[NM];<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br>    link(x)<span class="hljs-keyword">if</span>(v[j-&gt;t]!=_x)&#123;<br>v[j-&gt;t]=_x;<br><span class="hljs-keyword">if</span>(!match[j-&gt;t]||dfs(match[j-&gt;t]))&#123;match[j-&gt;t]=x;<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;&#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();m=read();<br>    inc(i,<span class="hljs-number">1</span>,n)a[i]=read();<br>    inc(i,<span class="hljs-number">1</span>,n)b[i]=read();<br>    p=read();<br>    inc(i,<span class="hljs-number">1</span>,p)c[i]=read(),_v[c[i]]++;<br>    inc(i,<span class="hljs-number">1</span>,n)<span class="hljs-keyword">if</span>(!_v[i])add(a[i]+<span class="hljs-number">1</span>,b[i]);<br>    <span class="hljs-keyword">while</span>(dfs(_x=s+<span class="hljs-number">1</span>))s++,_x++;<br>    dec(i,p,<span class="hljs-number">1</span>)&#123;<br>ans[i]=s;<br>add(a[c[i]]+<span class="hljs-number">1</span>,b[c[i]]);<br>_x++;<br><span class="hljs-keyword">while</span>(dfs(s+<span class="hljs-number">1</span>))s++,_x++;<br>    &#125;<br>    inc(i,<span class="hljs-number">1</span>,p)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,ans[i]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 二分图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cf1139D(概率DP+莫比乌斯函数)</title>
      <link href="/cf1139D/"/>
      <url>/cf1139D/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://codeforces.com/contest/1139/problem/D" target="_blank" rel="noopener">https://codeforces.com/contest/1139/problem/D</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>每定 $m(m\le1e5)$ ，每次从$1\sim m$ 中等概率取一个数，直到所有数的 $gcd$ 等于 $1$ 为止，问取的数的个数的期望 </p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>设 $f[i]​$ 为当前 $gcd​$ 为 $i​$ 到结束的期望步数</p><script type="math/tex; mode=display">f[i]=\sum_{j=1}^mf[(i,j)]+1</script><p>那么答案为 $\frac{1}{m}\sum_{i=1}^m f[i]$ </p><p>然后考虑降复杂度，主要将 $n​$ 个数按 $gcd​$ 分类</p><script type="math/tex; mode=display">(1-\frac{\lfloor\frac{m}{i}\rfloor}{m})f[i]=\sum_{j=1\&(i,j)<i}f[(i,j)]+1</script><p>那么</p><script type="math/tex; mode=display">\begin{equation}\begin{aligned}f[i]&=\frac{m}{m-\lfloor\frac{m}{i}\rfloor}(1+\sum_{d|i}^{d<i}f[d]\sum_{j=1}^{m}[(i,j)=d])\\&=\frac{m}{m-\lfloor\frac{m}{i}\rfloor}(1+\sum_{d|i}^{d<i}f[d]\sum_{j=1}^m[(\frac{i}{d},\frac{j}{d})=1])\\&=\frac{m}{m-\lfloor\frac{m}{i}\rfloor}(1+\sum_{d|i}^{d<i}f[d]\sum_{j=1}^{\lfloor\frac{m}{d}\rfloor}[(j,\frac{i}{d})=1])\\&=\frac{m}{m-\lfloor\frac{m}{i}\rfloor}(1+\sum_{d|i}^{d<i}f[d]\sum_{k|\frac{i}{d}}\mu[k]\lfloor\frac{m}{dk} \rfloor)\\&=\frac{m}{m-\lfloor\frac{m}{i}\rfloor}(1+\sum_{k|i}\lfloor\frac{m}{k} \rfloor\sum_{d|k}^{d<i}f[d]\mu[\frac{k}{d}])\end{aligned}\end{equation}</script><p>令</p><script type="math/tex; mode=display">g[n]=\sum_{d|n}f[d]\mu[\frac{n}{d}]</script><p>那么</p><script type="math/tex; mode=display">f[i]=\frac{m}{m-\lfloor\frac{m}{i}\rfloor}(1+\sum_{k|i}\lfloor\frac{m}{k} \rfloor g[k])</script><p>然后边维护 $f$ 边维护 $g$ 就可以了</p><p>当然对于 $d=1$ 的情况需要特判，然而在算出 $f$ 之前，$g$ 里面的 $d[i]$ 是为 $0$ 的，所以直接代入算是可以了，只要最后记得把 $d[i]$ 加回来就可以了。。 </p><p>复杂度 $O(n\sqrt n)$</p><p>如果直接用埃筛先预处理出每个数的因子，那么复杂度可降为 $O(nlogn)$ </p><p>然而只快了一半(雾)。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>$O(n\sqrt n)​$</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y)/2</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 200005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 105</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pi 3.1415926535897931</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><br><br><br><br><br><span class="hljs-keyword">int</span> n,mu[NM],tot,prime[NM];<br><span class="hljs-keyword">bool</span> v[NM];<br>ll d[NM],f[NM],inv,ans;<br><span class="hljs-function">ll <span class="hljs-title">qpow</span><span class="hljs-params">(ll x,ll t)</span></span>&#123;<span class="hljs-keyword">return</span> t?qpow(sqr(x)%inf,t&gt;&gt;<span class="hljs-number">1</span>)*(t&amp;<span class="hljs-number">1</span>?x:<span class="hljs-number">1l</span>l)%inf:<span class="hljs-number">1l</span>l;&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123;<br>    n=<span class="hljs-number">1e5</span>;mu[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    inc(i,<span class="hljs-number">2</span>,n)&#123;<br><span class="hljs-keyword">if</span>(!v[i])prime[++tot]=i,mu[i]=<span class="hljs-number">-1</span>;<br>inc(j,<span class="hljs-number">1</span>,tot)&#123;<br>    <span class="hljs-keyword">if</span>(i*prime[j]&gt;n)<span class="hljs-keyword">break</span>;<br>    v[i*prime[j]]++;<br>    <span class="hljs-keyword">if</span>(i%prime[j]==<span class="hljs-number">0</span>)&#123;mu[i*prime[j]]=<span class="hljs-number">0</span>;<span class="hljs-keyword">break</span>;&#125;<br>    mu[i*prime[j]]=-mu[i];<br>&#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    init();<br>    n=read();inv=qpow(n,inf<span class="hljs-number">-2</span>);<br>    inc(i,<span class="hljs-number">2</span>,n)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j*j&lt;=i;j++)<span class="hljs-keyword">if</span>(i%j==<span class="hljs-number">0</span>)&#123;<br>    f[i]+=d[j]*mu[i/j]+inf;f[i]%=inf;<br>    <span class="hljs-keyword">if</span>(j*j&lt;i)f[i]+=d[i/j]*mu[j]+inf,f[i]%=inf;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j*j&lt;=i;j++)<span class="hljs-keyword">if</span>(i%j==<span class="hljs-number">0</span>)&#123;<br>    d[i]+=f[j]*(n/j);d[i]%=inf;<br>    <span class="hljs-keyword">if</span>(j*j&lt;i)d[i]+=f[i/j]*(n/(i/j)),d[i]%=inf;<br>&#125;<br>d[i]*=inv;d[i]++;d[i]%=inf;<br>d[i]=d[i]*n%inf*qpow(n-n/i,inf<span class="hljs-number">-2</span>)%inf;<br>f[i]+=d[i];f[i]%=inf;<br>    &#125;<br>    <span class="hljs-comment">//inc(i,1,n)printf("%lld ",f[i]);putchar('\n');</span><br>    <span class="hljs-comment">//inc(i,1,n)printf("%lld ",d[i]);putchar('\n');</span><br>    inc(i,<span class="hljs-number">1</span>,n)ans+=d[i],ans%=inf;<br>    ans*=inv;ans++;ans%=inf;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>*<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br>&#125;<br></code></pre></td></tr></table></figure><p>$O(nlogn)$</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y)/2</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 200005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 105</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pi 3.1415926535897931</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><br><br><br><br><br><span class="hljs-keyword">int</span> n,mu[NM],tot,prime[NM];<br><span class="hljs-keyword">bool</span> v[NM];<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;a[NM];<br>ll d[NM],f[NM],inv,ans;<br><span class="hljs-function">ll <span class="hljs-title">qpow</span><span class="hljs-params">(ll x,ll t)</span></span>&#123;<span class="hljs-keyword">return</span> t?qpow(sqr(x)%inf,t&gt;&gt;<span class="hljs-number">1</span>)*(t&amp;<span class="hljs-number">1</span>?x:<span class="hljs-number">1l</span>l)%inf:<span class="hljs-number">1l</span>l;&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123;<br>    n=<span class="hljs-number">1e5</span>;mu[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    inc(i,<span class="hljs-number">2</span>,n)&#123;<br><span class="hljs-keyword">if</span>(!v[i])prime[++tot]=i,mu[i]=<span class="hljs-number">-1</span>;<br>inc(j,<span class="hljs-number">1</span>,tot)&#123;<br>    <span class="hljs-keyword">if</span>(i*prime[j]&gt;n)<span class="hljs-keyword">break</span>;<br>    v[i*prime[j]]++;<br>    <span class="hljs-keyword">if</span>(i%prime[j]==<span class="hljs-number">0</span>)&#123;mu[i*prime[j]]=<span class="hljs-number">0</span>;<span class="hljs-keyword">break</span>;&#125;<br>    mu[i*prime[j]]=-mu[i];<br>&#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    init();<br>    n=read();inv=qpow(n,inf<span class="hljs-number">-2</span>);<br>    inc(i,<span class="hljs-number">1</span>,n)<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=i;j&lt;=n;j+=i)a[j].push_back(i);<br>    inc(i,<span class="hljs-number">2</span>,n)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span>&amp;j:a[i])f[i]+=d[j]*mu[i/j]+inf,f[i]%=inf;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span>&amp;j:a[i])d[i]+=f[j]*(n/j),d[i]%=inf;<br>d[i]*=inv;d[i]++;d[i]%=inf;<br>d[i]=d[i]*n%inf*qpow(n-n/i,inf<span class="hljs-number">-2</span>)%inf;<br>f[i]+=d[i];f[i]%=inf;<br>    &#125;<br>    <span class="hljs-comment">//inc(i,1,n)printf("%lld ",f[i]);putchar('\n');</span><br>    <span class="hljs-comment">//inc(i,1,n)printf("%lld ",d[i]);putchar('\n');</span><br>    inc(i,<span class="hljs-number">1</span>,n)ans+=d[i],ans%=inf;<br>    ans*=inv;ans++;ans%=inf;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>*<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PNCR-I(贪心+斜率优化)</title>
      <link href="/gym101982I/"/>
      <url>/gym101982I/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://codeforces.com/gym/101982/" target="_blank" rel="noopener">https://codeforces.com/gym/101982/</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定一段长度为 $n (n\le2e5)$ 的序列，其中有一些数还没填，你要把数列填完，使得逆序对数最大，输出逆序对数。每个数的范围为 $1\sim m(m\le100)$</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>不造如何描述题目来源= =</p><p>这个题目还是比较经典的，值得做做。。</p><p>首先感觉填进去的序列应该是大致递减的，那么如果有增的情况会如何？</p><p>设 $i&lt;j​$ 且 $a[i]&lt;a[j]​$ ，那么如果交换 $a[i]​$ 、$a[j]​$ ，显然逆序对会增加，所以可以确定填进去的序列是非递增的</p><p>那么可以先预处理第 $i​$ 个数填 $j​$ 产生的价值，设为 $a[i][j]​$ ，并求前缀和</p><p>就可以做$DP​$ 了，设 $d[i][j]​$ 为 第 $i​$ 个空填 $j​$ 的最大逆序对数，那么</p><script type="math/tex; mode=display">d[i][j]=max\{d[k][j+1]+(i-k)k+a[i][j]-a[k][j] \}</script><p>这个显然可以斜率优化，然后复杂度就可以降到 $O(nm)​$</p><p>注意这个式子对 $j=m$ 并不成立 TAT ，WA了半天</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y)/2</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 200005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 105</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pi 3.1415926535897931</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">1e18</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><br><span class="hljs-keyword">int</span> n,m,q[NM],qh,qt,tot,_x,a[NM][nm],c[NM][nm];<br>ll d[NM],g[NM],ans,b[NM],s;<br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">slope</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-number">1.0</span>*(g[x]-b[x]-g[y]+b[y])/(y-x)+x+y;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//freopen("data.in","r",stdin);</span><br>    n=read();m=read();<br>    <span class="hljs-keyword">while</span>(n--)&#123;<br>_x=read();<br><span class="hljs-keyword">if</span>(_x)&#123;<br>    ans+=b[_x];<br>    dec(i,_x<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>)b[i]++;<br>    c[tot][_x+<span class="hljs-number">1</span>]++;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    tot++;<br>    inc(i,<span class="hljs-number">1</span>,m)a[tot][i]=b[i];<br>&#125;<br>    &#125;<br>    n=tot;<br>    dec(i,n,<span class="hljs-number">1</span>)&#123;<br>inc(j,<span class="hljs-number">1</span>,m)c[i][j]+=c[i][j<span class="hljs-number">-1</span>];<br>inc(j,<span class="hljs-number">1</span>,m)c[i][j]+=c[i+<span class="hljs-number">1</span>][j],a[i][j]+=c[i][j];<br>    &#125;<br>    inc(i,<span class="hljs-number">1</span>,n)g[i]=a[i][m]+g[i<span class="hljs-number">-1</span>];<br>    dec(j,m<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>)&#123;<br>q[qh=qt=<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br>inc(i,<span class="hljs-number">1</span>,n)b[i]=b[i<span class="hljs-number">-1</span>]+a[i][j];<br>inc(i,<span class="hljs-number">1</span>,n)&#123;<br>    <span class="hljs-keyword">while</span>(qh&lt;qt&amp;&amp;slope(q[qh],q[qh+<span class="hljs-number">1</span>])&lt;i)qh++;<br>    d[i]=g[q[qh]]+<span class="hljs-number">1l</span>l*(i-q[qh])*q[qh]+b[i]-b[q[qh]];<br>    <span class="hljs-keyword">while</span>(qh&lt;qt&amp;&amp;slope(q[qt<span class="hljs-number">-1</span>],q[qt])&gt;slope(q[qt],i))qt--;<br>    q[++qt]=i;<br>&#125;<br>inc(i,<span class="hljs-number">1</span>,n)g[i]=max(g[i],d[i]),s=max(s,g[i]);<br><span class="hljs-comment">//inc(i,1,n)printf("%lld ",g[i]);putchar('\n');</span><br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,s+ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bzoj5210(动态DP)</title>
      <link href="/bzoj5210/"/>
      <url>/bzoj5210/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=5210" target="_blank" rel="noopener">https://www.lydsy.com/JudgeOnline/problem.php?id=5210</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>依旧先树链剖分</p><p>设 $dp[i][0]$ 为取 $i$ 的最大联通块，$dp[i][1]$ 为 $i$ 为子树的最大联通块</p><p>$dp[i][0]=a[i]+\sum max{0,dp[son][0] }$</p><p>$dp[i][1]=max_j {dp[j][0] }$</p><p>设 $g$ 为不考虑重链的情况，那么</p><script type="math/tex; mode=display">\left[ \begin{matrix} g[i][0]&-\infty&g[i][0]\\g[i][0]&0&g[i][1]\\-\infty&-\infty&0\end{matrix}\right]\times\left[ \begin{matrix} d[son][0]\\d[son][1]\\0\end{matrix}\right]=\left[ \begin{matrix} d[i][0]\\d[i][1]\\0\end{matrix}\right]</script><p>然后直接查询直接求矩阵乘积</p><p>那么修改需要考虑自身作为轻儿子的影响，而 $g[i][1]$ 是直接取 $max$ 的，所以可以直接在每个节点开 $set$ 维护轻儿子，然后复杂度依旧是 $O(nlogn)​$，然后发现跑得贼慢。。原因是矩阵乘法太费时了。。可以换成普通的转移做。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y)/2</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 200005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 400005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pi 3.1415926535897931</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">1e18</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span>&#123;</span><span class="hljs-keyword">int</span> t;edge*next;&#125;e[nm],*h[NM],*o=e;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;o-&gt;t=y;o-&gt;next=h[x];h[x]=o++;&#125;<br><span class="hljs-keyword">int</span> n,m,_x,_y;<br>ll g[NM][<span class="hljs-number">2</span>],d[NM][<span class="hljs-number">2</span>],a[NM];<br><span class="hljs-keyword">int</span> son[NM],c[NM],id[NM],tot,top[NM],TOP,f[NM],end[NM],size[NM];<br><span class="hljs-keyword">char</span> _s[<span class="hljs-number">5</span>];<br><span class="hljs-built_in">multiset</span>&lt;ll&gt;p[NM];<br><span class="hljs-built_in">multiset</span>&lt;ll&gt;::iterator it;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br>    d[x][<span class="hljs-number">0</span>]=a[x];<br>    link(x)<span class="hljs-keyword">if</span>(j-&gt;t!=f[x])&#123;<br>f[j-&gt;t]=x;<br>dfs1(j-&gt;t);<br><span class="hljs-keyword">if</span>(size[j-&gt;t]&gt;size[son[x]])son[x]=j-&gt;t;<br>size[x]+=size[j-&gt;t];<br>d[x][<span class="hljs-number">0</span>]+=max(d[j-&gt;t][<span class="hljs-number">0</span>],<span class="hljs-number">0l</span>l);<br>d[x][<span class="hljs-number">1</span>]=max(d[x][<span class="hljs-number">1</span>],d[j-&gt;t][<span class="hljs-number">1</span>]);<br>    &#125;<br>    size[x]++;d[x][<span class="hljs-number">1</span>]=max(d[x][<span class="hljs-number">1</span>],d[x][<span class="hljs-number">0</span>]);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br>    top[x]=TOP;id[x]=++tot;c[tot]=x;g[x][<span class="hljs-number">0</span>]=a[x];end[x]=x;<br>    <span class="hljs-keyword">if</span>(son[x])dfs2(son[x]),end[x]=end[son[x]];<br>    link(x)<span class="hljs-keyword">if</span>(!top[j-&gt;t])&#123;<br>dfs2(TOP=j-&gt;t);<br>g[x][<span class="hljs-number">0</span>]+=max(d[j-&gt;t][<span class="hljs-number">0</span>],<span class="hljs-number">0l</span>l);<br>p[x].insert(d[j-&gt;t][<span class="hljs-number">1</span>]);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(p[x].empty())&#123;g[x][<span class="hljs-number">1</span>]=g[x][<span class="hljs-number">0</span>];<span class="hljs-keyword">return</span>;&#125;<br>    it=p[x].end();it--;<br>    g[x][<span class="hljs-number">1</span>]=max(*it,g[x][<span class="hljs-number">0</span>]);<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mat</span>&#123;</span><span class="hljs-keyword">int</span> n,m;ll a[<span class="hljs-number">3</span>][<span class="hljs-number">3</span>];&#125;one;<br>mat <span class="hljs-keyword">operator</span>*(<span class="hljs-keyword">const</span> mat&amp;x,<span class="hljs-keyword">const</span> mat&amp;y)&#123;<br>    mat s;s.n=x.n;s.m=y.m;inc(i,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)inc(j,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)s.a[i][j]=-inf;<br>    inc(i,<span class="hljs-number">0</span>,s.n)inc(k,<span class="hljs-number">0</span>,x.m)<span class="hljs-keyword">if</span>(x.a[i][k]&gt;-inf)inc(j,<span class="hljs-number">0</span>,s.m)<span class="hljs-keyword">if</span>(y.a[k][j]&gt;-inf)s.a[i][j]=max(s.a[i][j],x.a[i][k]+y.a[k][j]);<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span>&#123;</span><br>    node*l,*r;<br>    <span class="hljs-keyword">int</span> x,y;<br>    mat s;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">upd</span><span class="hljs-params">()</span></span>&#123;s=l-&gt;s*r-&gt;s;&#125;<br>    node(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y,node*l=<span class="hljs-number">0</span>,node*r=<span class="hljs-number">0</span>):x(x),y(y),l(l),r(r)&#123;<br><span class="hljs-keyword">if</span>(x==y)&#123;<br>    mem(s.a);s.n=s.m=<span class="hljs-number">2</span>;<br>    s.a[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]=s.a[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>]=s.a[<span class="hljs-number">2</span>][<span class="hljs-number">1</span>]=-inf;<br>    s.a[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=s.a[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>]=s.a[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]=g[c[x]][<span class="hljs-number">0</span>];s.a[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>]=g[c[x]][<span class="hljs-number">1</span>];<br>&#125;<span class="hljs-keyword">else</span> upd();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">mod</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">if</span>(x==y)&#123;<br>    s.a[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=s.a[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>]=s.a[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]=g[c[x]][<span class="hljs-number">0</span>];s.a[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>]=g[c[x]][<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(_x&lt;=mid)l-&gt;mod();<span class="hljs-keyword">else</span> r-&gt;mod();upd();<br>    &#125;<br>    <span class="hljs-function">mat <span class="hljs-title">sum</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">if</span>(_x&lt;=x&amp;&amp;y&lt;=_y)<span class="hljs-keyword">return</span> s;<br><span class="hljs-keyword">if</span>(_x&gt;mid)<span class="hljs-keyword">return</span> r-&gt;sum();<br><span class="hljs-keyword">if</span>(_y&lt;=mid)<span class="hljs-keyword">return</span> l-&gt;sum();<br><span class="hljs-keyword">return</span> l-&gt;sum()*r-&gt;sum();<br>    &#125;<br>&#125;*root;<br><span class="hljs-function">node*<span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<span class="hljs-keyword">return</span> x==y?<span class="hljs-keyword">new</span> node(x,y):<span class="hljs-keyword">new</span> node(x,y,build(x,mid),build(mid+<span class="hljs-number">1</span>,y));&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ch</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br>    g[x][<span class="hljs-number">0</span>]+=_y-a[x];a[x]=_y;<br>    <span class="hljs-keyword">if</span>(!p[x].empty())&#123;<br>it=p[x].end();it--;<br>g[x][<span class="hljs-number">1</span>]=max(*it,g[x][<span class="hljs-number">0</span>]);<br>    &#125;<span class="hljs-keyword">else</span> g[x][<span class="hljs-number">1</span>]=g[x][<span class="hljs-number">0</span>];<br>    _x=id[x];root-&gt;mod();<br>    <span class="hljs-keyword">while</span>(top[x]&gt;<span class="hljs-number">1</span>)&#123;<br>x=top[x];<br>_x=id[x];_y=id[end[x]];mat t=root-&gt;sum()*one;<br>g[f[x]][<span class="hljs-number">0</span>]-=max(d[x][<span class="hljs-number">0</span>],<span class="hljs-number">0l</span>l)-max(t.a[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>],<span class="hljs-number">0l</span>l);<br>p[f[x]].erase(p[f[x]].lower_bound(d[x][<span class="hljs-number">1</span>]));p[f[x]].insert(d[x][<span class="hljs-number">1</span>]=t.a[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]);<br>it=p[f[x]].end();it--;<br>g[f[x]][<span class="hljs-number">1</span>]=max(*it,g[f[x]][<span class="hljs-number">0</span>]);<br>d[x][<span class="hljs-number">0</span>]=max(t.a[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>],<span class="hljs-number">0l</span>l);<br>x=f[x];_x=id[x];root-&gt;mod();<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    freopen(<span class="hljs-string">"data.in"</span>,<span class="hljs-string">"r"</span>,<span class="hljs-built_in">stdin</span>);<br>    n=read();m=read();<br>    inc(i,<span class="hljs-number">1</span>,n)a[i]=read();<br>    inc(i,<span class="hljs-number">2</span>,n)&#123;_x=read();_y=read();add(_x,_y);add(_y,_x);&#125;<br>    dfs1(f[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>);dfs2(TOP=<span class="hljs-number">1</span>);<br>    <span class="hljs-comment">//inc(i,1,n)printf("%d ",top[i]);putchar('\n');</span><br>    <span class="hljs-comment">//inc(i,1,n)printf("%d ",end[i]);putchar('\n');</span><br>    root=build(<span class="hljs-number">1</span>,n);<br>    one.n=<span class="hljs-number">2</span>;one.m=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(m--)&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>,_s);_x=read();<br><span class="hljs-keyword">if</span>(_s[<span class="hljs-number">0</span>]==<span class="hljs-string">'M'</span>)&#123;<br>    _y=read();ch(_x);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    _y=id[end[_x]];_x=id[_x];<br>    mat ans=root-&gt;sum()*one;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans.a[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]);<br>&#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 树链剖分 </tag>
            
            <tag> STL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>luogu4719(动态dp)</title>
      <link href="/luogu4719/"/>
      <url>/luogu4719/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.org/problemnew/show/P4719" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P4719</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p><a href="https://www.luogu.org/blog/gkxx-is-here/what-the-hell-is-ddp" target="_blank" rel="noopener">教程链接</a></p><p>动态 $DP$ 是在普通 $DP$ 的基础上加了修改操作，使得题目变得非常不可做。。经常需要用到数据结构维护，常见的如：用线段树维护最大子段和以及维护 $LIS$ 等</p><p>然后连模板题都这么难么。。</p><p>考虑树上独立集的求法，设 $d[i][0/1]$ 为取/不取 $i$ 的最大独立集</p><script type="math/tex; mode=display">d[i][1]=\sum d[son][0]\\d[i][0]=\sum max\{d[son][0],d[son][1] \}+a[i]</script><p>数据结构只能维护序列上的情况，因此可以用树连剖分之后考虑链上的情况，如果要转化成链上问题得先把轻儿子处理好，那么设 $g[i][0/1]$ 为不考虑重儿子的最大独立集</p><p>加入重儿子的时候，可以用广义矩阵乘法(定义乘法为加法，加法为取 $max$ )做如下转移：</p><script type="math/tex; mode=display">\left[\begin{matrix}g[i][0]&g[i][0] \\g[i][0] & -\infty\end{matrix}\right]\times\left[\begin{matrix}d[son][0]\\ d[son][1]\end{matrix}\right]=\left[\begin{matrix}d[x][0]\\ d[x][1]\end{matrix}\right]</script><p>那么修改的时候只考虑这个节点作为轻儿子所产生的影响即可</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y)/2</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 100005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 200005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pi 3.1415926535897931</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span>&#123;</span><span class="hljs-keyword">int</span> t;edge*next;&#125;e[nm],*h[NM],*o=e;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;o-&gt;t=y;o-&gt;next=h[x];h[x]=o++;&#125;<br><span class="hljs-keyword">int</span> d[NM],top[NM],son[NM],end[NM],TOP,tot,id[NM],f[NM],size[NM],c[NM];<br><span class="hljs-keyword">int</span> dp[NM][<span class="hljs-number">2</span>],g[NM][<span class="hljs-number">2</span>],n,m,a[NM],_x,_y;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br>    size[x]=<span class="hljs-number">1</span>;dp[x][<span class="hljs-number">1</span>]=a[x];dp[x][<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br>    link(x)<span class="hljs-keyword">if</span>(j-&gt;t!=f[x])&#123;<br>f[j-&gt;t]=x;d[j-&gt;t]=d[x]+<span class="hljs-number">1</span>;<br>dfs1(j-&gt;t);<br>dp[x][<span class="hljs-number">1</span>]+=dp[j-&gt;t][<span class="hljs-number">0</span>];<br>dp[x][<span class="hljs-number">0</span>]+=max(dp[j-&gt;t][<span class="hljs-number">1</span>],dp[j-&gt;t][<span class="hljs-number">0</span>]);<br><span class="hljs-keyword">if</span>(size[j-&gt;t]&gt;size[son[x]])son[x]=j-&gt;t;<br>size[x]+=size[j-&gt;t];<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dfs2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br>    top[x]=TOP;id[x]=++tot;end[x]=x;c[tot]=x;<br>    <span class="hljs-keyword">if</span>(son[x])end[x]=dfs2(son[x]);<br>    g[x][<span class="hljs-number">1</span>]=a[x];g[x][<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br>    link(x)<span class="hljs-keyword">if</span>(!top[j-&gt;t])&#123;<br>dfs2(TOP=j-&gt;t);<br>g[x][<span class="hljs-number">1</span>]+=dp[j-&gt;t][<span class="hljs-number">0</span>];<br>g[x][<span class="hljs-number">0</span>]+=max(dp[j-&gt;t][<span class="hljs-number">1</span>],dp[j-&gt;t][<span class="hljs-number">0</span>]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> end[x];<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mat</span>&#123;</span><span class="hljs-keyword">int</span> n,m,a[<span class="hljs-number">2</span>][<span class="hljs-number">2</span>];&#125;one;<br>mat <span class="hljs-keyword">operator</span>*(<span class="hljs-keyword">const</span> mat&amp;x,<span class="hljs-keyword">const</span> mat&amp;y)&#123;<br>    mat s;s.n=x.n;s.m=y.m;mem(s.a);<br>    inc(i,<span class="hljs-number">0</span>,x.n)inc(k,<span class="hljs-number">0</span>,x.m)inc(j,<span class="hljs-number">0</span>,s.m)s.a[i][j]=max(s.a[i][j],x.a[i][k]+y.a[k][j]);<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span>&#123;</span><br>    node*l,*r;<br>    <span class="hljs-keyword">int</span> x,y;<br>    mat s;<br>    node(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y,node*l=<span class="hljs-number">0</span>,node*r=<span class="hljs-number">0</span>):x(x),y(y),l(l),r(r)&#123;<br><span class="hljs-keyword">if</span>(x==y)&#123;<br>    s.n=s.m=<span class="hljs-number">1</span>;s.a[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=s.a[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]=g[c[x]][<span class="hljs-number">0</span>];s.a[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]=g[c[x]][<span class="hljs-number">1</span>];s.a[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]=-inf;<br>&#125;<span class="hljs-keyword">else</span> upd();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">upd</span><span class="hljs-params">()</span></span>&#123;s=l-&gt;s*r-&gt;s;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">mod</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">if</span>(x==y)&#123;<br>    s.a[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=s.a[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]=g[c[x]][<span class="hljs-number">0</span>];s.a[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]=g[c[x]][<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(_x&lt;=mid)l-&gt;mod();<span class="hljs-keyword">else</span> r-&gt;mod();<br>upd();<br>    &#125;<br>    <span class="hljs-function">mat <span class="hljs-title">sum</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">if</span>(_x&lt;=x&amp;&amp;y&lt;=_y)<span class="hljs-keyword">return</span> s;<br><span class="hljs-keyword">if</span>(_x&gt;mid)<span class="hljs-keyword">return</span> r-&gt;sum();<br><span class="hljs-keyword">if</span>(_y&lt;=mid)<span class="hljs-keyword">return</span> l-&gt;sum();<br><span class="hljs-keyword">return</span> l-&gt;sum()*r-&gt;sum();<br>    &#125;<br>&#125;*root;<br><span class="hljs-function">node*<span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<span class="hljs-keyword">return</span> x==y?<span class="hljs-keyword">new</span> node(x,y):<span class="hljs-keyword">new</span> node(x,y,build(x,mid),build(mid+<span class="hljs-number">1</span>,y));&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ch</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br>    g[x][<span class="hljs-number">1</span>]+=_y-a[x];a[x]=_y;<br>    _x=id[x];root-&gt;mod();<br>    <span class="hljs-keyword">while</span>(top[x]&gt;<span class="hljs-number">1</span>)&#123;<br>x=top[x];<br>_x=id[x];_y=id[end[x]];mat t=root-&gt;sum()*one;<br>g[f[x]][<span class="hljs-number">1</span>]+=t.a[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]-dp[x][<span class="hljs-number">0</span>];<br>g[f[x]][<span class="hljs-number">0</span>]+=max(t.a[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>],t.a[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>])-max(dp[x][<span class="hljs-number">0</span>],dp[x][<span class="hljs-number">1</span>]);<br>dp[x][<span class="hljs-number">1</span>]=t.a[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>];dp[x][<span class="hljs-number">0</span>]=t.a[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>];<br>x=f[top[x]];_x=id[x];root-&gt;mod();<br>    &#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//freopen("data.in","r",stdin);</span><br>    n=read();m=read();<br>    inc(i,<span class="hljs-number">1</span>,n)a[i]=read();<br>    inc(i,<span class="hljs-number">2</span>,n)&#123;_x=read();_y=read();add(_x,_y);add(_y,_x);&#125;<br>    dfs1(f[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>);dfs2(TOP=<span class="hljs-number">1</span>);<br>    <span class="hljs-comment">//inc(i,1,n)printf("%d ",top[i]);putchar('\n');</span><br>    <span class="hljs-comment">//inc(i,1,n)printf("%d ",end[i]);putchar('\n');</span><br>    root=build(<span class="hljs-number">1</span>,n);<br>    one.n=<span class="hljs-number">1</span>;one.m=<span class="hljs-number">0</span>;<br>    _x=<span class="hljs-number">1</span>;_y=id[end[<span class="hljs-number">1</span>]];mat ans=root-&gt;sum()*one;<br>    <span class="hljs-comment">//printf("%d\n",max(ans.a[0][0],ans.a[1][0]));</span><br>    <span class="hljs-keyword">while</span>(m--)&#123;<br>_x=read();_y=read();ch(_x);<br>_x=<span class="hljs-number">1</span>;_y=id[end[<span class="hljs-number">1</span>]];mat ans=root-&gt;sum()*one;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,max(ans.a[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>],ans.a[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]));<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 树链剖分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bzoj1492(dp+CDQ分治)</title>
      <link href="/bzoj1492/"/>
      <url>/bzoj1492/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>这个题以前发现要用平衡树维护就跑路了，看到能用 $CDQ$ 分治就过来学一下。。</p><p>设 $d[i]​$ 为卖出的最大获益，$g[i]​$ 为买进的最优结果，那么有<br>$g[i]&lt;-max{d[j]}​$</p><p>$d[i]=max{g[j].a\times a[i]+g[j].b\times b[i] }$</p><p>主要解决 $d[i]​$ 的求解，发现这是一个点积表达式，所以最优决策点必定是在凸包上，那么只要维护凸包就行，然而坐标不具有单调性，所以不能用单调队列维护了。。</p><p>很容易想到可以用平衡树去维护，从两侧依次把点踢出凸包，然后在凸包上二分决策点即可(然而好麻烦啊)</p><p>另一种做法是 $CDQ$ 分治，还是同样的先左区间再归并再右区间就可以了。。然而需要在 $logn$ 个凸包上二分，所以复杂度是 $O(nlog^2n)$</p><p>其实可以先对斜率排序，然后划分区间使得左区间一定能转移到右区间，同时也可以保证斜率单调，这个时候就可以直接双指针找最优决策点，把复杂度降到 $O(nlogn)$</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3> <figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 100005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 100005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pi 3.1415926535897931</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">9</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">P</span>&#123;</span><br>    <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">double</span> a,b,k,x,y,slope;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-keyword">const</span> P&amp;o)<span class="hljs-keyword">const</span>&#123;<span class="hljs-keyword">return</span> slope&gt;o.slope;&#125;<br>&#125;a[NM],tmp[NM],s[NM];<br><span class="hljs-keyword">double</span> d[NM];<br><span class="hljs-keyword">int</span> n,top;<br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">slope</span><span class="hljs-params">(P a,P b)</span></span>&#123;<span class="hljs-keyword">if</span>(<span class="hljs-built_in">fabs</span>(a.x-b.x)&lt;eps)<span class="hljs-keyword">return</span> -inf;<span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> (a.y-b.y)/(a.x-b.x);&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">cdq</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(l==r)&#123;<br>d[l]=max(d[l<span class="hljs-number">-1</span>],d[l]);<br>a[l].y=d[l]/(a[l].a*a[l].k+a[l].b);a[l].x=a[l].y*a[l].k;<br><span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">int</span> mid=l+r&gt;&gt;<span class="hljs-number">1</span>,cnt=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=l,x=l,y=mid+<span class="hljs-number">1</span>;i&lt;=r;i++)<span class="hljs-keyword">if</span>(a[i].id&lt;=mid)tmp[x++]=a[i];<span class="hljs-keyword">else</span> tmp[y++]=a[i];<br>    inc(i,l,r)a[i]=tmp[i];<br>    cdq(l,mid);<br>    top=<span class="hljs-number">0</span>;<br>    inc(i,l,mid)&#123;<br><span class="hljs-keyword">while</span>(top&gt;<span class="hljs-number">1</span>&amp;&amp;slope(s[top<span class="hljs-number">-1</span>],s[top])&lt;slope(s[top],a[i]))top--;<br>s[++top]=a[i];<br>    &#125;<br>    inc(i,mid+<span class="hljs-number">1</span>,r)&#123;<br><span class="hljs-keyword">while</span>(cnt&lt;top&amp;&amp;slope(s[cnt],s[cnt+<span class="hljs-number">1</span>])&gt;a[i].slope)cnt++;<br>d[a[i].id]=max(d[a[i].id],s[cnt].x*a[i].a+s[cnt].y*a[i].b);<br>    &#125;<br>    cdq(mid+<span class="hljs-number">1</span>,r);cnt=l;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> x=l,y=mid+<span class="hljs-number">1</span>;x&lt;=mid||y&lt;=r;)<span class="hljs-keyword">if</span>(x&lt;=mid&amp;&amp;(y&gt;r||a[x].x&lt;a[y].x))tmp[cnt++]=a[x++];<span class="hljs-keyword">else</span> tmp[cnt++]=a[y++];<br>    inc(i,l,r)a[i]=tmp[i];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();d[<span class="hljs-number">0</span>]=read();<br>    inc(i,<span class="hljs-number">1</span>,n)&#123;<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%lf%lf%lf"</span>,&amp;a[i].a,&amp;a[i].b,&amp;a[i].k);a[i].id=i;a[i].slope=-a[i].a/a[i].b;&#125;<br>    sort(a+<span class="hljs-number">1</span>,a+<span class="hljs-number">1</span>+n);<br>    cdq(<span class="hljs-number">1</span>,n);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%.3lf\n"</span>,d[n]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 分治 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bzoj4675(点分治)</title>
      <link href="/bzoj4675/"/>
      <url>/bzoj4675/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=4675" target="_blank" rel="noopener">https://www.lydsy.com/JudgeOnline/problem.php?id=4675</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>首先显然这三个人的期望是相互独立的，然后对每个能得分的点对来说(假设他能选 $k$ 个点)，他产生的贡献是</p><script type="math/tex; mode=display">\frac{\binom{n-2}{k-2}}{\binom{n}{k}}</script><p>那么只要统计一下能得分的点数就可以了，这个直接点分就行。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-6</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 50005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 100005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pi 3.1415926535897931</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">1e9</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span>&#123;</span><span class="hljs-keyword">int</span> t;edge*next;&#125;e[nm],*h[NM],*o=e;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;o-&gt;t=y;o-&gt;next=h[x];h[x]=o++;&#125;<br><span class="hljs-keyword">int</span> n,m,_x,_y,cnt[NM],size[NM],a[<span class="hljs-number">11</span>];<br><span class="hljs-keyword">int</span> smin,root,tot;<br><span class="hljs-keyword">bool</span> v[NM];<br>ll ans;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> f)</span></span>&#123;size[x]=<span class="hljs-number">1</span>;link(x)<span class="hljs-keyword">if</span>(!v[j-&gt;t]&amp;&amp;j-&gt;t!=f)dfs2(j-&gt;t,x),size[x]+=size[j-&gt;t];&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getroot</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> f)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> s=tot-size[x];<br>    link(x)<span class="hljs-keyword">if</span>(!v[j-&gt;t]&amp;&amp;j-&gt;t!=f)getroot(j-&gt;t,x),s=max(s,size[j-&gt;t]);<br>    <span class="hljs-keyword">if</span>(s&lt;smin)smin=s,root=x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> f,<span class="hljs-keyword">int</span> t)</span></span>&#123;<br>    inc(i,<span class="hljs-number">1</span>,m)<span class="hljs-keyword">if</span>(t&lt;=a[i])ans+=cnt[a[i]-t];<br>    link(x)<span class="hljs-keyword">if</span>(!v[j-&gt;t]&amp;&amp;j-&gt;t!=f)dfs(j-&gt;t,x,t+<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> f,<span class="hljs-keyword">int</span> t)</span></span>&#123;<br>    cnt[t]++;link(x)<span class="hljs-keyword">if</span>(!v[j-&gt;t]&amp;&amp;j-&gt;t!=f)dfs1(j-&gt;t,x,t+<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br>    dfs2(x,<span class="hljs-number">0</span>);<br>    tot=size[x];smin=inf;<br>    getroot(x,<span class="hljs-number">0</span>);<br>    v[root]++;cnt[<span class="hljs-number">0</span>]++;<br>    link(root)<span class="hljs-keyword">if</span>(!v[j-&gt;t])&#123;<br>dfs(j-&gt;t,root,<span class="hljs-number">1</span>);<br>dfs1(j-&gt;t,root,<span class="hljs-number">1</span>);<br>    &#125;<br>    inc(i,<span class="hljs-number">0</span>,tot)cnt[i]=<span class="hljs-number">0</span>;<br>    link(root)<span class="hljs-keyword">if</span>(!v[j-&gt;t])solve(j-&gt;t);<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();m=read();<br>    inc(i,<span class="hljs-number">1</span>,m)a[i]=read();<br>    inc(i,<span class="hljs-number">2</span>,n)&#123;_x=read();_y=read();add(_x,_y);add(_y,_x);&#125;<br>    solve(<span class="hljs-number">1</span>);<br>    inc(i,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>)&#123;<span class="hljs-keyword">int</span> t=(n-i+<span class="hljs-number">3</span>)/<span class="hljs-number">3</span>;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%.2lf\n"</span>,<span class="hljs-number">1.0</span>*t*(t<span class="hljs-number">-1</span>)*ans/n/(n<span class="hljs-number">-1</span>));&#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 分治 </tag>
            
            <tag> 组合数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bzoj2253(DP+CDQ分治)</title>
      <link href="/bzoj2253/"/>
      <url>/bzoj2253/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=2253" target="_blank" rel="noopener">https://www.lydsy.com/JudgeOnline/problem.php?id=2253</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>看错题意坑了好久。。</p><p>朴素的 $DP$ 只能做到 $O(n^2)$ 的，要能够快速确定那个点是小于当前点。。</p><p>这个可以用 $CDQ$ 分治，由于在维护当前点时必须把前面的点都维护好，所以在分治的时候得先分治左区间，再整体转移影响，再分治右区间。。（感觉好麻烦</p><p>然后有个坑点是题目要求严格小于，所以在取 $mid$ 的时候得保证 $mid$ 两侧的 $x$ 是不同的。。 </p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-6</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 50005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 5000005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pi 3.1415926535897931</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">1e9</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><br><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">P</span>&#123;</span><br>    <span class="hljs-keyword">int</span> x,y,z,id;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-keyword">const</span> P&amp;o)<span class="hljs-keyword">const</span>&#123;<span class="hljs-keyword">return</span> x&lt;o.x||(x==o.x&amp;&amp;(y&lt;o.y||(y==o.y&amp;&amp;z&lt;o.z)));&#125;<br>&#125;a[NM];<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(P a,P b)</span></span>&#123;<span class="hljs-keyword">return</span> a.y&lt;b.y||(a.y==b.y&amp;&amp;a.x&lt;b.x);&#125;<br><span class="hljs-keyword">int</span> n,ans,d[NM],c[NM],b[NM],tot;<br>ll <span class="hljs-keyword">_t</span>,_x,_y;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">pro</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-keyword">return</span> (<span class="hljs-keyword">_t</span>*=_x)%=_y;&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> t)</span></span>&#123;<span class="hljs-keyword">for</span>(;x&lt;=n;x+=lowbit(x))c[x]=max(c[x],t);&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> s=<span class="hljs-number">0</span>)</span></span>&#123;<span class="hljs-keyword">for</span>(;x;x-=lowbit(x))s=max(s,c[x]);<span class="hljs-keyword">return</span> s;&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">clr</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<span class="hljs-keyword">for</span>(;x&lt;=n&amp;&amp;c[x];x+=lowbit(x))c[x]=<span class="hljs-number">0</span>;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">cdq</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(l==r)<span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">int</span> mid=<span class="hljs-number">-1</span>,cnt=l;<br>    inc(i,l,r<span class="hljs-number">-1</span>)<span class="hljs-keyword">if</span>(a[i].x&lt;a[i+<span class="hljs-number">1</span>].x&amp;&amp;<span class="hljs-built_in">abs</span>(i-(l+r)/<span class="hljs-number">2</span>)&lt;<span class="hljs-built_in">abs</span>(mid-(l+r)/<span class="hljs-number">2</span>))mid=i;<br>    <span class="hljs-keyword">if</span>(mid==<span class="hljs-number">-1</span>)<span class="hljs-keyword">return</span>;<br>    cdq(l,mid);<br>    sort(a+l,a+mid+<span class="hljs-number">1</span>,cmp);sort(a+mid+<span class="hljs-number">1</span>,a+r+<span class="hljs-number">1</span>,cmp);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> x=l,y=mid+<span class="hljs-number">1</span>;x&lt;=mid||y&lt;=r;)<span class="hljs-keyword">if</span>(x&lt;=mid&amp;&amp;(y&gt;r||(a[x].y&lt;a[y].y)))&#123;<br>add(a[x].z,d[a[x].id]);x++;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>d[a[y].id]=max(d[a[y].id],sum(a[y].z<span class="hljs-number">-1</span>)+<span class="hljs-number">1</span>);y++;<br>    &#125;<br>    inc(i,l,mid)clr(a[i].z);<br>    sort(a+mid+<span class="hljs-number">1</span>,a+r+<span class="hljs-number">1</span>);<br>    cdq(mid+<span class="hljs-number">1</span>,r);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    _x=read();_y=read();n=read();<span class="hljs-keyword">_t</span>=<span class="hljs-number">1</span>;_x%=_y;<br>    inc(i,<span class="hljs-number">1</span>,n)&#123;<br>a[i].x=pro(),a[i].y=pro(),a[i].z=pro();<br><span class="hljs-keyword">if</span>(a[i].x&gt;a[i].y)swap(a[i].x,a[i].y);<br><span class="hljs-keyword">if</span>(a[i].x&gt;a[i].z)swap(a[i].x,a[i].z);<br><span class="hljs-keyword">if</span>(a[i].y&gt;a[i].z)swap(a[i].y,a[i].z);<br>b[++tot]=a[i].z;<br>    &#125;<br>    sort(b+<span class="hljs-number">1</span>,b+<span class="hljs-number">1</span>+tot);tot=unique(b+<span class="hljs-number">1</span>,b+<span class="hljs-number">1</span>+tot)-b<span class="hljs-number">-1</span>;<br>    inc(i,<span class="hljs-number">1</span>,n)a[i].z=lower_bound(b+<span class="hljs-number">1</span>,b+<span class="hljs-number">1</span>+tot,a[i].z)-b;<br>    inc(i,<span class="hljs-number">1</span>,n)d[i]=<span class="hljs-number">1</span>;<br>    sort(a+<span class="hljs-number">1</span>,a+<span class="hljs-number">1</span>+n);<br>    inc(i,<span class="hljs-number">1</span>,n)a[i].id=i;<br>    <span class="hljs-comment">//inc(i,1,n)printf("%d %d %d\n",a[i].x,a[i].y,a[i].z);</span><br>    cdq(<span class="hljs-number">1</span>,n);<br>    <span class="hljs-comment">//inc(i,1,n)printf("%d ",d[i]);putchar('\n');</span><br>    inc(i,<span class="hljs-number">1</span>,n)ans=max(ans,d[i]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 分治 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bzoj3295(cdq分治)</title>
      <link href="/bzoj3295/"/>
      <url>/bzoj3295/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=3295" target="_blank" rel="noopener">https://www.lydsy.com/JudgeOnline/problem.php?id=3295</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>说是动态逆序对其实也没那么动态。。如果是删数不如先考虑加数要怎么整。。</p><p>加数的话可以把时间作为一维然后就变成了三维偏序问题，这里要统计两个偏序，一个是位置在前的一个是位置在后的，然后直接 $CDQ$ 分治即可</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-6</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 100005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 800005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pi 3.1415926535897931</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">1e18</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">P</span>&#123;</span><br>    <span class="hljs-keyword">int</span> id,x,y;ll v;<br>&#125;a[NM],tmp[NM];<br><span class="hljs-keyword">int</span> n,m,tot,c[NM];<br>ll b[NM];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<span class="hljs-keyword">for</span>(;x&lt;=n;x+=lowbit(x))c[x]++;&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> s=<span class="hljs-number">0</span>)</span></span>&#123;<span class="hljs-keyword">for</span>(;x;x-=lowbit(x))s+=c[x];<span class="hljs-keyword">return</span> s;&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">clr</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<span class="hljs-keyword">for</span>(;x&lt;=n&amp;&amp;c[x];x+=lowbit(x))c[x]=<span class="hljs-number">0</span>;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(P a,P b)</span></span>&#123;<span class="hljs-keyword">return</span> a.id&gt;b.id;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">cdq</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(l==r)<span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">int</span> mid=l+r&gt;&gt;<span class="hljs-number">1</span>,cnt=l;<br>    cdq(l,mid);cdq(mid+<span class="hljs-number">1</span>,r);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> x=mid,y=r;x&gt;=l||y&gt;mid;)<span class="hljs-keyword">if</span>(x&gt;=l&amp;&amp;(y&lt;=mid||a[x].x&gt;a[y].x))&#123;<br>add(a[x].y);x--;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>a[y].v+=sum(a[y].y);y--;<br>    &#125;<br>    inc(i,l,mid)clr(a[i].y);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> x=l,y=mid+<span class="hljs-number">1</span>;x&lt;=mid||y&lt;=r;)<span class="hljs-keyword">if</span>(x&lt;=mid&amp;&amp;(y&gt;r||a[x].x&lt;a[y].x))&#123;<br>add(a[x].y);<br>tmp[cnt++]=a[x++];<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>a[y].v+=x-l-sum(a[y].y);<br>tmp[cnt++]=a[y++];<br>    &#125;<br>    inc(i,l,mid)clr(a[i].y);<br>    inc(i,l,r)a[i]=tmp[i];<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();m=read();<br>    inc(i,<span class="hljs-number">1</span>,n)b[read()]=i;<br>    dec(i,m,<span class="hljs-number">1</span>)&#123;<br>a[++tot].id=i;a[tot].y=read();a[tot].x=b[a[tot].y];b[a[tot].y]=<span class="hljs-number">0</span>;<br>    &#125;<br>    inc(i,<span class="hljs-number">1</span>,n)<span class="hljs-keyword">if</span>(b[i])a[++tot]=P&#123;<span class="hljs-number">0</span>,b[i],i&#125;,b[i]=<span class="hljs-number">0</span>;<br>    reverse(a+<span class="hljs-number">1</span>,a+<span class="hljs-number">1</span>+tot);<br>    cdq(<span class="hljs-number">1</span>,tot);<br>    sort(a+<span class="hljs-number">1</span>,a+<span class="hljs-number">1</span>+tot,cmp);<br>    dec(i,tot,<span class="hljs-number">1</span>)b[i]=b[i+<span class="hljs-number">1</span>]+a[i].v;<br>    inc(i,<span class="hljs-number">1</span>,m)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,b[i]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 分治 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bzoj3262(三维偏序)</title>
      <link href="/bzoj3262/"/>
      <url>/bzoj3262/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=3262" target="_blank" rel="noopener">https://www.lydsy.com/JudgeOnline/problem.php?id=3262</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>在定好二维偏序的基础上要统计第三维小于自身的点的个数，这个可以用 $BIT$ 实现，变成左半区间修改，右半区间查询</p><p>然后得先去重后统计，$CDQ$ 分治好像并不是很资磁重点。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-6</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 100005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 6805</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pi 3.1415926535897931</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">1e18</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">P</span>&#123;</span><br>    <span class="hljs-keyword">int</span> x,y,z,v,ans;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-keyword">const</span> P&amp;o)<span class="hljs-keyword">const</span>&#123;<span class="hljs-keyword">return</span> y&lt;=o.y;&#125;<br>&#125;a[NM],tmp[NM];<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(P a,P b)</span></span>&#123;<span class="hljs-keyword">return</span> a.x&lt;b.x||(a.x==b.x&amp;&amp;(a.y&lt;b.y||(a.y==b.y&amp;&amp;a.z&lt;b.z)));&#125;<br><span class="hljs-keyword">int</span> n,m,ans[NM],b[NM],c[NM*<span class="hljs-number">2</span>],tot;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> t)</span></span>&#123;<span class="hljs-keyword">for</span>(;x&lt;=m;x+=lowbit(x))c[x]+=t;&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> s=<span class="hljs-number">0</span>)</span></span>&#123;<span class="hljs-keyword">for</span>(;x;x-=lowbit(x))s+=c[x];<span class="hljs-keyword">return</span> s;&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">clr</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<span class="hljs-keyword">for</span>(;x&lt;=m&amp;&amp;c[x];x+=lowbit(x))c[x]=<span class="hljs-number">0</span>;&#125;<br><br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">cdq</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(l==r)<span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">int</span> mid=l+r&gt;&gt;<span class="hljs-number">1</span>,cnt=l;<br>    cdq(l,mid);cdq(mid+<span class="hljs-number">1</span>,r);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> x=l,y=mid+<span class="hljs-number">1</span>;x&lt;=mid||y&lt;=r;)<span class="hljs-keyword">if</span>(x&lt;=mid&amp;&amp;(y&gt;r||a[x]&lt;a[y]))&#123;<br>add(a[x].z,a[x].v);tmp[cnt++]=a[x++];<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>a[y].ans+=sum(a[y].z);tmp[cnt++]=a[y++];<br>    &#125;<br>    inc(i,l,mid)clr(a[i].z);<br>    inc(i,l,r)a[i]=tmp[i];<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();m=read();<br>    inc(i,<span class="hljs-number">1</span>,n)a[i].x=read(),a[i].y=read(),a[i].z=read();<br>    sort(a+<span class="hljs-number">1</span>,a+<span class="hljs-number">1</span>+n,cmp);<br>    inc(i,<span class="hljs-number">1</span>,n)<span class="hljs-keyword">if</span>(a[i].x==a[tot].x&amp;&amp;a[i].y==a[tot].y&amp;&amp;a[i].z==a[tot].z)a[tot].v++;<br>    <span class="hljs-keyword">else</span> a[++tot]=a[i],a[tot].v=<span class="hljs-number">1</span>;<br>    cdq(<span class="hljs-number">1</span>,tot);<br>    inc(i,<span class="hljs-number">1</span>,tot)b[a[i].ans+a[i].v<span class="hljs-number">-1</span>]+=a[i].v;<br>    inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,b[i]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> BIT </tag>
            
            <tag> 分治 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cf1132E(背包dp)</title>
      <link href="/cf1132E/"/>
      <url>/cf1132E/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://codeforces.com/contest/1132/problem/E" target="_blank" rel="noopener">https://codeforces.com/contest/1132/problem/E</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定体积为  $1…8$ 的物品 $a[1]…a[8]$ 个$(a[i]\le1e16)$ 和容量为 $W(W\le1e18)$ 的背包，要求最大的体积</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>思路比较清奇，值得借鉴。。</p><p>发现 $1-8$ 的 $lcm$  可以各自凑成，那么就对余下的物品做个背包就可以了</p><p>设 $d[i][j]$ 为到 $i$ 种物品余下体积为 $j$ 的最多的 $lcm$ 的个数</p><p>对第 $i$  种物品来说，他余下的物品只能有 $i,2i,…,lcm-i$ (到 $lcm$ 是没有意义的)，然后直接用这些做一下背包，发现第二维可能到达 $8lcm$ ，所以复杂度为 $O(8^2lcmloglcm)$</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-6</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 500005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 6805</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pi 3.1415926535897931</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">1e18</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><br><br><br><br><br><span class="hljs-keyword">int</span> n,tot;<br><span class="hljs-keyword">bool</span> v[<span class="hljs-number">10</span>][nm];<br>ll m,a[<span class="hljs-number">10</span>],d[<span class="hljs-number">10</span>][nm],ans;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=<span class="hljs-number">8</span>;m=read();inc(i,<span class="hljs-number">1</span>,n)a[i]=read();<br>    v[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]++;<br>    inc(i,<span class="hljs-number">1</span>,n)&#123;<br>tot+=<span class="hljs-number">840</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;k&lt;=a[i]&amp;&amp;k*i&lt;<span class="hljs-number">840</span>;k++)&#123;<br>    ll t=(a[i]-k)/(<span class="hljs-number">840</span>/i);<span class="hljs-keyword">int</span> cnt=k*i;<br>    dec(j,min(tot,tot+cnt<span class="hljs-number">-840</span>),cnt)<span class="hljs-keyword">if</span>(v[i<span class="hljs-number">-1</span>][j-cnt])d[i][j]=max(d[i][j],d[i<span class="hljs-number">-1</span>][j-cnt]+t),v[i][j]++;<br>&#125;<br>    &#125;<br>    inc(i,<span class="hljs-number">0</span>,tot)<span class="hljs-keyword">if</span>(v[n][i]&amp;&amp;i&lt;=m)d[n][i]=min(d[n][i],(m-i)/<span class="hljs-number">840</span>),ans=max(ans,d[n][i]*<span class="hljs-number">840</span>+i);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>*<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>luogu3374(cdq分治)</title>
      <link href="/luogu3374/"/>
      <url>/luogu3374/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.org/problemnew/show/P3374" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P3374</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>学了波 $CDQ$ 分治，主要思想来自于归并排序(感谢初中老师教了一手归并排序求逆序对orz)</p><p>这题也可以用 $CDQ$ 分治做，思路是把操作变成点(操作时间，操作位置)，然后对每个询问(差分后)，能影响他的就只有时间和位置同时小于他的，这即是二维偏序问题，那么只要在统计偏序对的时候把对询问的影响添加一下就可以了。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-6</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 1500005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 250005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pi 3.1415926535897931</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><br><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">P</span>&#123;</span><br>    <span class="hljs-keyword">int</span> id,x,v;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-keyword">const</span> P&amp;o)<span class="hljs-keyword">const</span>&#123;<span class="hljs-keyword">return</span> x&lt;o.x||(x==o.x&amp;&amp;id&lt;o.id);&#125;<br>&#125;a[NM],tmp[NM];<br><span class="hljs-keyword">int</span> n,m,tot,num,ans[NM];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">cdq</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(l==r)<span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">int</span> mid=l+r&gt;&gt;<span class="hljs-number">1</span>,cnt=l;<span class="hljs-keyword">int</span> s=<span class="hljs-number">0</span>;<br>    cdq(l,mid);cdq(mid+<span class="hljs-number">1</span>,r);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> x=l,y=mid+<span class="hljs-number">1</span>;x&lt;=mid||y&lt;=r;)<br><span class="hljs-keyword">if</span>(x&lt;=mid&amp;&amp;(y&gt;r||a[x]&lt;a[y]))&#123;<br>    <span class="hljs-keyword">if</span>(a[x].id==<span class="hljs-number">1</span>)s+=a[x].v;<br>    tmp[cnt++]=a[x++];<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">if</span>(a[y].id==<span class="hljs-number">2</span>)ans[a[y].v]-=s;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[y].id==<span class="hljs-number">3</span>)ans[a[y].v]+=s;<br>    tmp[cnt++]=a[y++];<br>&#125;<br>    inc(i,l,r)a[i]=tmp[i];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();m=read();<br>    inc(i,<span class="hljs-number">1</span>,n)a[++tot]=P&#123;<span class="hljs-number">1</span>,i,read()&#125;;<br>    <span class="hljs-keyword">while</span>(m--)&#123;<br>a[++tot].id=read();<br><span class="hljs-keyword">if</span>(a[tot].id==<span class="hljs-number">1</span>)a[tot].x=read(),a[tot].v=read();<br><span class="hljs-keyword">else</span>&#123;<br>    a[tot].x=read()<span class="hljs-number">-1</span>;a[tot].v=++num;<br>    a[++tot]=P&#123;<span class="hljs-number">3</span>,read(),num&#125;;<br>&#125;<br>    &#125;<br>    cdq(<span class="hljs-number">1</span>,tot);<br>    inc(i,<span class="hljs-number">1</span>,num)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,ans[i]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 分治 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hdu6184(三元环)</title>
      <link href="/hdu6184/"/>
      <url>/hdu6184/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6184" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=6184</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>统计子图 $G={(A,B,C,D),(AB,BC,CD,DA,AC)}$ 的个数</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>这就是两个有公共边的三元环，那么只要对公共边统计贡献就可以了，如果公共边被 $t$ 个三元环包含，那么其产生的贡献为 $\frac{t(t-1)}{2}​$ ，所以在统计三元环的时候直接对边权进行标记即可</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-6</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y)/2</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 100005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 200005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pi 3.1415926535897931</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span>&#123;</span><span class="hljs-keyword">int</span> x,t;edge*next;&#125;e[nm],*h[NM];<br><span class="hljs-keyword">int</span> n,m,b[NM],v[NM],ans[nm],_v[NM];<br>ll s;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d"</span>,&amp;n,&amp;m))&#123;<br>inc(i,<span class="hljs-number">1</span>,n)h[i]=<span class="hljs-number">0</span>,b[i]=<span class="hljs-number">0</span>,v[i]=<span class="hljs-number">0</span>;s=<span class="hljs-number">0</span>;<br>inc(i,<span class="hljs-number">1</span>,m)e[i].x=read(),e[i].t=read(),b[e[i].x]++,b[e[i].t]++,ans[i]=<span class="hljs-number">0</span>;<br>inc(i,<span class="hljs-number">1</span>,m)&#123;<br>    <span class="hljs-keyword">if</span>(b[e[i].t]&gt;b[e[i].x]||(b[e[i].x]==b[e[i].t]&amp;&amp;e[i].x&gt;e[i].t))swap(e[i].x,e[i].t);<br>    e[i].next=h[e[i].x];h[e[i].x]=e+i;<br>&#125;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _link(x) for(edge *k=h[x];k;k=k-&gt;next)</span><br>inc(i,<span class="hljs-number">1</span>,n)&#123;<br>    link(i)v[j-&gt;t]=i,_v[j-&gt;t]=j-e;<br>    link(i)&#123;<br>_link(j-&gt;t)<span class="hljs-keyword">if</span>(v[k-&gt;t]==i)ans[j-e]++,ans[k-e]++,ans[_v[k-&gt;t]]++;<br>    &#125;<br>&#125;<br>inc(i,<span class="hljs-number">1</span>,m)s+=<span class="hljs-number">1l</span>l*ans[i]*(ans[i]<span class="hljs-number">-1</span>)/<span class="hljs-number">2</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,s);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xdoj1187(三元环计数)</title>
      <link href="/xdoj1187/"/>
      <url>/xdoj1187/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://acm.xidian.edu.cn/problem.php?id=1187" target="_blank" rel="noopener">http://acm.xidian.edu.cn/problem.php?id=1187</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>裸三元环计数</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>三元环计数的方法是将无向图变成有向图，对每条边，从度小的点连向度大的点，如果度相同则按编号的大小连边，这样保证了这个图是个 $DAG$ ，此时三元环就被表示成类似于 $G={(A,B,C),(AB,AC,BC)}$ 这样的玩意</p><p>然后枚举点 $u$，标记 $u$ 的出点。枚举 $u$ 的出边，再枚举出点 $v$ 的出边，然后如果 $v$ 的出点被标记，那么就必定形成一个三元环</p><p>这个算法的复杂度是 $O(m^{1.5})$ ,证明如下：</p><p>首先这个图中每个点的出度都不大于 $\sqrt{m}$ 。假设存在大于 $\sqrt{m}$ 的点，那么其出边也必然大于 $\sqrt{m}$ ，这样边数就大于 $m$ 了，矛盾。</p><p>那么这样暴力的复杂度就是 $O(m^{1.5})$</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-6</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y)/2</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 100005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 200005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pi 3.1415926535897931</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span>&#123;</span><span class="hljs-keyword">int</span> x,t;edge*next;&#125;e[nm],*h[NM];<br><span class="hljs-keyword">int</span> n,m,s,b[NM],v[NM];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> _=read();<span class="hljs-keyword">while</span>(_--)&#123;<br>inc(i,<span class="hljs-number">1</span>,n)v[i]=<span class="hljs-number">0</span>,h[i]=<span class="hljs-number">0</span>,b[i]=<span class="hljs-number">0</span>;<br>s=<span class="hljs-number">0</span>;<br>n=read();m=read();<br>inc(i,<span class="hljs-number">1</span>,m)e[i].x=read(),e[i].t=read(),b[e[i].x]++,b[e[i].t]++;<br>inc(i,<span class="hljs-number">1</span>,m)&#123;<br>    <span class="hljs-keyword">if</span>(b[e[i].x]&gt;b[e[i].t]||(b[e[i].x]==b[e[i].t]&amp;&amp;e[i].x&gt;e[i].t))swap(e[i].x,e[i].t);<br>    e[i].next=h[e[i].x];h[e[i].x]=e+i;<br>&#125;<br>inc(i,<span class="hljs-number">1</span>,n)&#123;<br>    link(i)v[j-&gt;t]=i;<br>    link(i)<span class="hljs-keyword">for</span>(edge*k=h[j-&gt;t];k;k=k-&gt;next)<span class="hljs-keyword">if</span>(v[k-&gt;t]==i)s++;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,s);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bzoj4609(最短路+贪心+wqs二分+决策单调性)</title>
      <link href="/bzoj4609/"/>
      <url>/bzoj4609/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=4609" target="_blank" rel="noopener">https://www.lydsy.com/JudgeOnline/problem.php?id=4609</a></p><p><a href="https://codeforces.com/gym/101242/problem/B" target="_blank" rel="noopener">https://codeforces.com/gym/101242/problem/B</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>$bzoj$ 题面有误，推荐原题面</p><p>给定 $n$ 个点和 $r$ 条边的<strong>有向图</strong>。若将 $i$ 点信息传输到 $j$ 点，那么要从 $i$ 走向 $b+1$ 再走向 $j$ 。现把前 $b$ 个点分成 $s$ 个组，每一个组两两之间要传递一次信息，问距离总和的最小值。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>这个题意感觉比较沙雕。。显然只有这 $b$ 个点的事情，那么先对 $b+1$ 正反跑一遍最短路，然后发现每个点的贡献等于 (所在组的大小-1)*正反距离和</p><p>然后将 $b$个点分成 $s$ 个组实在是很头疼，然而如果每个组的大小固定，我们必定是将距离和大的放在比较小的组里面，所以可以发现分组的时候总是可以优先考虑距离和大的点，那么可以根据距离和排序之后，转化成对序列的分割</p><p>然后就可以 $DP$ 了，而且可以用 $wqs$ 二分优化</p><p>然后设 $dp[i]$ 为到 $i$ 的最小距离，$d[i]$ 为距离和的前缀和，有<br>$ dp[i]=max { dp[j]+(i-j-1)(d[i]-d[j])+t }$<br>发现后面的 $cost$ 是个凸函数，可以用决策单调性优化</p><p>复杂度为 $O(blogblogC)​$</p><p>卡进 $#1$ 真开心_(:3 」∠)_</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-6</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 5005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 100005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pi 3.1415926535897931</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span>&#123;</span><span class="hljs-keyword">int</span> t,v;edge*next;&#125;e[nm],*h[NM],*o=e,*_h[NM];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y,<span class="hljs-keyword">int</span> v)</span></span>&#123;o-&gt;t=y;o-&gt;v=v;o-&gt;next=h[x];h[x]=o++;&#125;<br><span class="hljs-keyword">void</span> _add(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y,<span class="hljs-keyword">int</span> v)&#123;o-&gt;t=y;o-&gt;v=v;o-&gt;next=_h[x];_h[x]=o++;&#125;<br><span class="hljs-keyword">int</span> n,m,_p,_x,_y,qh,qt,q[NM],<span class="hljs-keyword">_t</span>,v[NM],_n,_d[NM],__d[NM];<br>ll d[NM],dp[NM],ans;<br><span class="hljs-keyword">int</span> p[NM];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tmp</span>&#123;</span><br>    <span class="hljs-keyword">int</span> x;ll d;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-keyword">const</span> tmp&amp;o)<span class="hljs-keyword">const</span>&#123;<span class="hljs-keyword">return</span> d&gt;o.d;&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dij</span><span class="hljs-params">()</span></span>&#123;<br>    priority_queue&lt;tmp&gt;q;<br>    inc(i,<span class="hljs-number">1</span>,n)__d[i]=<span class="hljs-number">1e9</span>;<br>    q.push(tmp&#123;_n+<span class="hljs-number">1</span>,__d[_n+<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>&#125;);<br>    <span class="hljs-keyword">while</span>(!q.empty())&#123;<br><span class="hljs-keyword">int</span> t=q.top().x,cnt=q.top().d;q.pop();<br><span class="hljs-keyword">if</span>(cnt!=__d[t])<span class="hljs-keyword">continue</span>;<br>link(t)<span class="hljs-keyword">if</span>(__d[j-&gt;t]&gt;__d[t]+j-&gt;v)q.push(tmp&#123;j-&gt;t,__d[j-&gt;t]=__d[t]+j-&gt;v&#125;);<br>    &#125;<br>&#125;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _link(x) for(edge *j=_h[x];j;j=j-&gt;next)</span><br><span class="hljs-keyword">void</span> _dij()&#123;<br>    priority_queue&lt;tmp&gt;q;<br>    inc(i,<span class="hljs-number">1</span>,n)_d[i]=<span class="hljs-number">1e9</span>;<br>    q.push(tmp&#123;_n+<span class="hljs-number">1</span>,_d[_n+<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>&#125;);<br>    <span class="hljs-keyword">while</span>(!q.empty())&#123;<br><span class="hljs-keyword">int</span> t=q.top().x,cnt=q.top().d;q.pop();<br><span class="hljs-keyword">if</span>(cnt!=_d[t])<span class="hljs-keyword">continue</span>;<br>_link(t)<span class="hljs-keyword">if</span>(_d[j-&gt;t]&gt;_d[t]+j-&gt;v)q.push(tmp&#123;j-&gt;t,_d[j-&gt;t]=_d[t]+j-&gt;v&#125;);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(ll t)</span></span>&#123;<br>    q[qh=qt=<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;v[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br>    inc(i,<span class="hljs-number">1</span>,n)&#123;<br><span class="hljs-keyword">while</span>(qh&lt;qt&amp;&amp;v[q[qh+<span class="hljs-number">1</span>]]&lt;=i)qh++;<br>v[q[qh]]=max(v[q[qh]],i+<span class="hljs-number">1</span>);<br>dp[i]=dp[q[qh]]+(i-q[qh]<span class="hljs-number">-1</span>)*(d[i]-d[q[qh]])+t;<br>p[i]=p[q[qh]]+<span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span>(qh&lt;=qt&amp;&amp;dp[q[qt]]+(v[q[qt]]-q[qt]<span class="hljs-number">-1</span>)*(d[v[q[qt]]]-d[q[qt]])&gt;=dp[i]+(v[q[qt]]-i<span class="hljs-number">-1</span>)*(d[v[q[qt]]]-d[i]))qt--;<br><span class="hljs-keyword">int</span> s=i;<br><span class="hljs-keyword">if</span>(qh&lt;=qt)&#123;<br>    s=n+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> x=v[q[qt]]+<span class="hljs-number">1</span>,y=n;x&lt;=y;)&#123;<br><span class="hljs-keyword">int</span> mid=x+y&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(dp[q[qt]]+(mid-q[qt]<span class="hljs-number">-1</span>)*(d[mid]-d[q[qt]])&gt;=dp[i]+(mid-i<span class="hljs-number">-1</span>)*(d[mid]-d[i]))<br>    s=mid,y=mid<span class="hljs-number">-1</span>;<span class="hljs-keyword">else</span> x=mid+<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">if</span>(s&lt;=n)v[i]=s,q[++qt]=i;<br>    &#125;<br>    <span class="hljs-comment">//printf("%lld %lld %d\n",t,dp[n],p[n]);</span><br>    <span class="hljs-keyword">return</span> p[n]&lt;m;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();_n=read();m=read();_p=read();<br>    <span class="hljs-keyword">while</span>(_p--)&#123;_x=read();_y=read();<span class="hljs-keyword">_t</span>=read();add(_x,_y,<span class="hljs-keyword">_t</span>);_add(_y,_x,<span class="hljs-keyword">_t</span>);&#125;<br>    dij();_dij();<br>    <span class="hljs-comment">//inc(i,1,n)printf("%d ",_d[i]);putchar('\n');</span><br>    n=_n;<br>    inc(i,<span class="hljs-number">1</span>,n)d[i]+=__d[i]+_d[i];<br>    sort(d+<span class="hljs-number">1</span>,d+<span class="hljs-number">1</span>+n);reverse(d+<span class="hljs-number">1</span>,d+<span class="hljs-number">1</span>+n);<br>    inc(i,<span class="hljs-number">1</span>,n)d[i]+=d[i<span class="hljs-number">-1</span>];<br>    <span class="hljs-keyword">for</span>(ll x=<span class="hljs-number">0</span>,y=d[n]*n;x&lt;=y;)&#123;<br>ll mid=x+y&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(check(mid))y=mid<span class="hljs-number">-1</span>;<span class="hljs-keyword">else</span> ans=dp[n]-mid*m,x=mid+<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>loj2478/bzoj5252(dp凸优化/wqs二分)</title>
      <link href="/loj2478/"/>
      <url>/loj2478/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://loj.ac/problem/2478" target="_blank" rel="noopener">https://loj.ac/problem/2478</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定 $n$ 个点的树 $(n\le3e5)$ ，去掉 $k$ 条边，再用 $k$ 条边权为 $0$ 的边将几个联通块连成树，求这个树的直径的最大值。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>这个问题等价于选 $k+1$ 个联通块的直径和的最大值，等价于选 $k+1$ 个不相交的链</p><p>那么设 $d[i][j]$ 为到 $i$ 点选 $j$ 条链的最大值，然后就是普通的树背包，可以用树背包优化成 $O(n^2)$</p><p>然后状态数过大需要优化。。</p><p>发现若固定 $i​$ ，则 $f(j)=d[i][j]​$ 是个凸函数，因为链选太少会阻碍我们选取更多边的权值，而链选太多我们就要把一些边给割去，因此由于这两个因素的作用，随着 $j​$ 的增大 $f(j)​$ 的趋势大概是先增大后减小(证明并不严格)</p><p>然后就可以凸优化了，凸优化的资料参见<a href="https://www.cnblogs.com/nietzsche-oier/p/9073444.html" target="_blank" rel="noopener">这里</a></p><p>凸优化基于 $f(j)$ 是凸函数这一性质。</p><p>设 $g[i]=\max\limits_{j} {d[i][j]}$</p><p>若对 $i=n$ ， $f(j)$ 的最值 $f_{max}$ 在 $m$ 处取得(假设我们最终要求得 $f[n][m]$)，那么直接对 $g[i]$ 进行 $DP$ 即可求解</p><p>然而 $f_{max}$ 并不一定在 $m$ 处取得，那么我们就要想办法让极值点往 $m$ 偏移，用的方法就是构造 $h(i)=g[i]-it$ ，使用适合的 $t$ 就可以让极值点偏移到 $m$ ，为了选出适合的 $t$ ，我们就要对 $t$ 进行二分，这就是所谓的 <strong>$wqs$ 二分</strong> 。</p><p>然后复杂度就降成 $O(nlogC)$</p><p><br></p><p>一个细节就是二分的边界，会存在 $t=c$ ，极值点 $\lt m$ ； $t=c+1$ 极值点 $&gt;m$ 之类的情况，这个时候对所有极值点 $\lt m$(或 $\gt m$) 的情况，我们依旧认为他可以代表等于 $m$ 的情况，通过构造一个空集加进原来的方案，在此基础上求最值就可以了，所以可以 $wqs$ 二分可以使用更快的整数二分</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-6</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y)/2</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 300005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 600005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pi 3.1415926535897931</span><br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">3e11</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span>&#123;</span><span class="hljs-keyword">int</span> t,v;edge*next;&#125;e[nm],*h[NM],*o=e;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y,<span class="hljs-keyword">int</span> v)</span></span>&#123;o-&gt;v=v;o-&gt;t=y;o-&gt;next=h[x];h[x]=o++;&#125;<br><span class="hljs-keyword">int</span> n,k,_x,_y;<br>ll <span class="hljs-keyword">_t</span>,s;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tmp</span>&#123;</span><br>    ll x;<span class="hljs-keyword">int</span> y;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-keyword">const</span> tmp&amp;o)<span class="hljs-keyword">const</span>&#123;<span class="hljs-keyword">return</span> x&lt;o.x||(x==o.x&amp;&amp;y&gt;o.y);&#125;<br>    tmp <span class="hljs-keyword">operator</span>+(<span class="hljs-keyword">const</span> tmp&amp;o)<span class="hljs-keyword">const</span>&#123;<span class="hljs-keyword">return</span> tmp&#123;x+o.x,y+o.y&#125;;&#125;<br>    <span class="hljs-keyword">void</span> <span class="hljs-keyword">operator</span>+=(<span class="hljs-keyword">const</span> tmp&amp;o)&#123;x+=o.x;y+=o.y;&#125;<br>&#125;d[NM][<span class="hljs-number">3</span>],ans;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> f)</span></span>&#123;<br>    d[x][<span class="hljs-number">0</span>]=tmp&#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;;d[x][<span class="hljs-number">1</span>]=d[x][<span class="hljs-number">2</span>]=tmp&#123;<span class="hljs-keyword">_t</span>,<span class="hljs-number">1</span>&#125;;<br>    link(x)<span class="hljs-keyword">if</span>(j-&gt;t!=f)&#123;<br>dfs(j-&gt;t,x);<br>d[x][<span class="hljs-number">2</span>]+=max(d[j-&gt;t][<span class="hljs-number">0</span>],max(d[j-&gt;t][<span class="hljs-number">1</span>],d[j-&gt;t][<span class="hljs-number">2</span>]));<br>d[x][<span class="hljs-number">2</span>]=max(d[x][<span class="hljs-number">2</span>],d[x][<span class="hljs-number">1</span>]+d[j-&gt;t][<span class="hljs-number">1</span>]+tmp&#123;j-&gt;v-<span class="hljs-keyword">_t</span>,<span class="hljs-number">-1</span>&#125;);<br>d[x][<span class="hljs-number">2</span>]=max(d[x][<span class="hljs-number">2</span>],d[x][<span class="hljs-number">1</span>]+d[j-&gt;t][<span class="hljs-number">0</span>]+tmp&#123;j-&gt;v,<span class="hljs-number">0</span>&#125;);<br>d[x][<span class="hljs-number">1</span>]+=max(d[j-&gt;t][<span class="hljs-number">0</span>],max(d[j-&gt;t][<span class="hljs-number">1</span>],d[j-&gt;t][<span class="hljs-number">2</span>]));<br>d[x][<span class="hljs-number">1</span>]=max(d[x][<span class="hljs-number">1</span>],d[x][<span class="hljs-number">0</span>]+d[j-&gt;t][<span class="hljs-number">1</span>]+tmp&#123;j-&gt;v,<span class="hljs-number">0</span>&#125;);<br>d[x][<span class="hljs-number">1</span>]=max(d[x][<span class="hljs-number">1</span>],d[x][<span class="hljs-number">0</span>]+d[j-&gt;t][<span class="hljs-number">0</span>]+tmp&#123;j-&gt;v+<span class="hljs-keyword">_t</span>,<span class="hljs-number">1</span>&#125;);<br>d[x][<span class="hljs-number">0</span>]+=max(d[j-&gt;t][<span class="hljs-number">0</span>],max(d[j-&gt;t][<span class="hljs-number">1</span>],d[j-&gt;t][<span class="hljs-number">2</span>]));<br>    &#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//freopen("data.in","r",stdin);</span><br>    n=read();k=read()+<span class="hljs-number">1</span>;<br>    inc(i,<span class="hljs-number">2</span>,n)&#123;_x=read();_y=read();<span class="hljs-keyword">_t</span>=read();add(_x,_y,<span class="hljs-keyword">_t</span>);add(_y,_x,<span class="hljs-keyword">_t</span>);&#125;<br>    <span class="hljs-keyword">for</span>(ll x=-inf,y=inf;x&lt;=y;)&#123;<br><span class="hljs-keyword">_t</span>=x+y&gt;&gt;<span class="hljs-number">1</span>;<br>dfs(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br>ans=max(d[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>],max(d[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>],d[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>]));<br><span class="hljs-comment">//printf("%d %lld\n",ans.y,_t);</span><br><span class="hljs-keyword">if</span>(ans.y&lt;=k)x=<span class="hljs-keyword">_t</span>+<span class="hljs-number">1</span>,s=ans.x-<span class="hljs-keyword">_t</span>*k;<br><span class="hljs-keyword">else</span> y=<span class="hljs-keyword">_t</span><span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-comment">//printf("%lld %d\n",ans.x,ans.y);</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,s);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cf1117D(dp+矩阵快速幂)</title>
      <link href="/cf1117D/"/>
      <url>/cf1117D/</url>
      
        <content type="html"><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定魔法珠子和普通珠子，一个魔法珠子能分裂成 $m$ 个普通珠子，普通珠子不能再分裂，你要设计一个珠子的序列，选择其中的一些魔法珠子分裂，问能够分裂成 $n$ 个珠子的方案数。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>打的时候直接推出了组合数式子，然后对着式子自闭了半天。。</p><p>如果只考虑最后一个珠子的情况，那么可以设 $d[n]$ 为形成 $n$ 个珠子的方案数，那么就有</p><script type="math/tex; mode=display">d[n]=d[n-1]+d[n-m]</script><p>这个直接矩阵快速幂加速就可以了。。</p><p>题目不难，就是想歪了。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3> <figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-6</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y)/2</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 105</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 170005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pi 3.1415926535897931</span><br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><br>ll n,m;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mat</span>&#123;</span><span class="hljs-keyword">int</span> n,m;ll a[NM][NM];&#125;null,ans,t;<br>mat <span class="hljs-keyword">operator</span>*(<span class="hljs-keyword">const</span> mat&amp;x,<span class="hljs-keyword">const</span> mat&amp;y)&#123;<br>    mat s;s.n=x.n;s.m=y.m;mem(s.a);<br>    inc(i,<span class="hljs-number">1</span>,s.n)inc(j,<span class="hljs-number">1</span>,s.m)inc(k,<span class="hljs-number">1</span>,x.m)(s.a[i][j]+=x.a[i][k]*y.a[k][j]%inf)%=inf;<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br><span class="hljs-function">mat <span class="hljs-title">qpow</span><span class="hljs-params">(mat x,ll t)</span></span>&#123;<span class="hljs-keyword">return</span> t?qpow(sqr(x),t&gt;&gt;<span class="hljs-number">1</span>)*(t&amp;<span class="hljs-number">1</span>?x:null):null;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();m=read();<br>    ans.n=m;ans.m=<span class="hljs-number">1</span>;<br>    inc(i,<span class="hljs-number">1</span>,m)ans.a[i][<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    t.n=t.m=m;<br>    inc(i,<span class="hljs-number">1</span>,m<span class="hljs-number">-1</span>)t.a[i][i+<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    t.a[m][<span class="hljs-number">1</span>]=t.a[m][m]=<span class="hljs-number">1</span>;<br>    null.n=null.m=m;<br>    inc(i,<span class="hljs-number">1</span>,m)null.a[i][i]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(n&gt;=m)ans=qpow(t,n-m+<span class="hljs-number">1</span>)*ans;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans.a[m][<span class="hljs-number">1</span>]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mw Winter Camp Day4 DivB E(bfs+卡常)</title>
      <link href="/mswcE4b/"/>
      <url>/mswcE4b/</url>
      
        <content type="html"><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定 $n$ 个点 $m$ 条边的图 $(n\le900,m\le150000)$ ，问去掉每条边 $<x,y>$ 之后，$x$ 到 $y$ 最短路，边权均为 $1$</x,y></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>考虑 $u$ 的最短路径树，去掉边 $<u,v>$ 之后只影响被边 $<u,v>$ 支配的点，初步确定是 $v$ 的子树，此时到 $v$ 的最短距离无非是从其他子树转移过来，所以可以对 $v$ 的子树反向做 $bfs$ ，然后枚举从其他子树过渡到该子树的边就可以了。。复杂度为 $O(nm)$</u,v></u,v></p><p>复杂度还是比较危险的，事实上也 $T$ 了，需要卡卡常。。</p><ul><li>答案为 $2$ 可以直接 $break$ (对稠密图非常有效)</li><li>加读入优化和 $inline$</li><li>要通过各种姿势把 $bfs$ 的次数卡在 $2$ 次以内</li><li>打标记避免重复入队(即使只有 $2$ 次。。)</li></ul><p>其他的优化方法也不太记得了，这个代码估计也是在 $TLE$ 的边缘大鹏展翅，去了 $inline$ 就 $T$ 的那种。。</p><p>少有的卡常体验，一直卡常一直爽～～</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-6</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y)/2</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 905</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 170005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pi 3.1415926535897931</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><br><br><br><span class="hljs-keyword">int</span> d[NM],_d[NM],v[NM],n,m,_x,_y;<br><span class="hljs-keyword">bool</span> _v[NM];<br><span class="hljs-keyword">int</span> ans[nm];<br><span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt;q;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span>&#123;</span><span class="hljs-keyword">int</span> t,v;edge*next;&#125;e[<span class="hljs-number">2</span>*nm],*h[NM],*o=e,*_h[NM];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y,<span class="hljs-keyword">int</span> v)</span></span>&#123;o-&gt;v=v;o-&gt;t=y;o-&gt;next=h[x];h[x]=o++;&#125;<br><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> _add(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)&#123;o-&gt;t=y;o-&gt;next=_h[x];_h[x]=o++;&#125;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _link(x) for(edge*j=_h[x];j;j=j-&gt;next)</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> ans=inf;<br>    q.push(u);_d[u]=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(!q.empty())&#123;<br><span class="hljs-keyword">int</span> t=q.front();q.pop();<br>_link(t)<span class="hljs-keyword">if</span>(v[j-&gt;t]==u)&#123;<br>    <span class="hljs-keyword">if</span>(_d[j-&gt;t]==inf)_d[j-&gt;t]=_d[t]+<span class="hljs-number">1</span>,q.push(j-&gt;t);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(d[j-&gt;t])&#123;ans=min(ans,d[j-&gt;t]+_d[t]+<span class="hljs-number">1</span>);<span class="hljs-keyword">if</span>(ans==<span class="hljs-number">2</span>)<span class="hljs-keyword">break</span>;&#125;<br><span class="hljs-keyword">if</span>(ans==<span class="hljs-number">2</span>)<span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(!q.empty())q.pop();<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//freopen("data.in","r",stdin);</span><br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d"</span>,&amp;n,&amp;m)&amp;&amp;n&amp;&amp;m)&#123;<br>    inc(i,<span class="hljs-number">1</span>,n)_h[i]=h[i]=<span class="hljs-number">0</span>;o=e;<br>    inc(i,<span class="hljs-number">1</span>,m)&#123;_x=read();_y=read();add(_x,_y,i);_add(_y,_x);&#125;<br>    inc(i,<span class="hljs-number">1</span>,n)&#123;<br>inc(j,<span class="hljs-number">1</span>,n)d[j]=_d[j]=inf,v[j]=<span class="hljs-number">0</span>;<br>link(i)q.push(j-&gt;t),d[j-&gt;t]=<span class="hljs-number">1</span>,v[j-&gt;t]=j-&gt;t,_v[j-&gt;t]++;<br>d[i]=<span class="hljs-number">0</span>;v[i]=<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">while</span>(!q.empty())&#123;<br>    <span class="hljs-keyword">int</span> t=q.front();q.pop();_v[t]=<span class="hljs-literal">false</span>;<br>    link(t)<span class="hljs-keyword">if</span>(!v[j-&gt;t])v[j-&gt;t]=v[t],d[j-&gt;t]=d[t]+<span class="hljs-number">1</span>,q.push(j-&gt;t),_v[j-&gt;t]++;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(v[j-&gt;t]&gt;<span class="hljs-number">0</span>&amp;&amp;v[j-&gt;t]!=v[t]&amp;&amp;d[j-&gt;t]==d[t]+<span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">if</span>(!_v[j-&gt;t])q.push(j-&gt;t);<br>v[j-&gt;t]=<span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;<br>link(i)ans[j-&gt;v]=bfs(j-&gt;t);<br>    &#125;<br>    inc(i,<span class="hljs-number">1</span>,m)<span class="hljs-keyword">if</span>(ans[i]&lt;inf)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d "</span>,ans[i]);<span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">"0 "</span>);<span class="hljs-built_in">putchar</span>(<span class="hljs-string">'\n'</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 最短路 </tag>
            
            <tag> BFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mw Winter Camp Day1 K(分数规划/维护凸包+二分)</title>
      <link href="/mswcK1/"/>
      <url>/mswcK1/</url>
      
        <content type="html"><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定 $n\times n$ $(n\le300)$ 的矩阵，求子矩阵，使得 $\frac{子矩阵和}{周长}$ 最大</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>这个形式显然可以分数规划，二分答案 $t$ ，变成求 子矩阵和$-t$周长 的最大值，压成一维后，宽固定，长的代价可以均匀分到每个元素上，就变成最大子段和了，复杂度 $O(n^3logC)$ </p><p>然而浮点数二分次数较多，被出题人卡常了。。</p><p>然后 $JSZX11556$ 说压成一行之后会变成</p><script type="math/tex; mode=display">\frac{1}{2}max\{\frac{sum[r]-sum[l]}{h+r-l}\}</script><p>相当于求点 $(h+r,sum[r])$ 与 $(l,sum[l])$ 的斜率的最大值，由于 $x$ 和 $y$ 都是递增的所以可以转化为维护下凸包，然后二分斜率求斜率最大值，复杂度 $O(n^3logn)$ ，而且由于是整数运算速度优秀得一批</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-6</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y)/2</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 305</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 32768</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pi 3.1415926535897931</span><br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">1e16</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><br><br><br><span class="hljs-keyword">int</span> n,_x,_y,__x,__y,q[NM],qh,qt,ca;<br>ll b[NM][NM],a[NM];<br><span class="hljs-keyword">double</span> ans;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;n)&amp;&amp;n)&#123;<br>ans=-inf;<br>inc(i,<span class="hljs-number">1</span>,n)inc(j,<span class="hljs-number">1</span>,n)b[i][j]=read()+b[i<span class="hljs-number">-1</span>][j];<br>inc(l,<span class="hljs-number">1</span>,n)inc(r,l,n)&#123;<br>    inc(j,<span class="hljs-number">1</span>,n)a[j]=b[r][j]-b[l<span class="hljs-number">-1</span>][j]+a[j<span class="hljs-number">-1</span>];<br>    q[qh=qt=<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br>    inc(i,<span class="hljs-number">1</span>,n)&#123;<br><span class="hljs-keyword">int</span> s=qh<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> x=qh,y=qt<span class="hljs-number">-1</span>;x&lt;=y;)<br>    <span class="hljs-keyword">if</span>((a[q[mid+<span class="hljs-number">1</span>]]-a[q[mid]])*(r-l+<span class="hljs-number">1</span>+i-q[mid+<span class="hljs-number">1</span>])&lt;=(a[i]-a[q[mid+<span class="hljs-number">1</span>]])*(q[mid+<span class="hljs-number">1</span>]-q[mid]))<br>s=mid,x=mid+<span class="hljs-number">1</span>;<span class="hljs-keyword">else</span> y=mid<span class="hljs-number">-1</span>;<br>s++;<br><span class="hljs-keyword">if</span>(<span class="hljs-number">0.5</span>*(a[i]-a[q[s]])/(r-l+<span class="hljs-number">1</span>+i-q[s])&gt;ans)&#123;<br>    ans=<span class="hljs-number">0.5</span>*(a[i]-a[q[s]])/(r-l+<span class="hljs-number">1</span>+i-q[s]);<br>    _y=l;__y=r;_x=q[s]+<span class="hljs-number">1</span>;__x=i;<br>&#125;<br><span class="hljs-keyword">while</span>(qh&lt;qt&amp;&amp;(a[q[qt<span class="hljs-number">-1</span>]]-a[q[qt]])*(q[qt]-i)&gt;(a[q[qt]]-a[i])*(q[qt<span class="hljs-number">-1</span>]-q[qt]))qt--;<br>q[++qt]=i;<br>    &#125;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"Case #%d: The maximal value is %.7lf, rectangle corners are (%d, %d) and (%d, %d).\n"</span>,++ca,ans,_x,_y,__x,__y);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 分数规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mw Winter Camp Day1 F(树背包DP+前缀和)</title>
      <link href="/mswcF1/"/>
      <url>/mswcF1/</url>
      
        <content type="html"><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定 $n$ 个点的树 $(n\le10000)$ ，求点集个数，使得点集里的点两两之间的距离超过 $c$  $(c\le500)$</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>题意比较吓人，所以也想复杂了</p><p>直接用树背包统计就可以了</p><p>设 $d[i][j]$ 为 $i$ 为根的子树中符合题意的点集个数的方案数，其中点集与 $i$ 最近的距离为 $j$</p><p>那么取空集的时候令 $j$ 等于 $c$ ，然后考虑 $i$ 和 $i$ 的子树的 $j$ 的最小值转移就可以了</p><p>复杂度为 $O(nc^2)$ ，借用树背包的优化方法可以将复杂度降很多(但窝不会算)，莽一发就过了。。</p><p>正解是对2个背包求前缀和，求出 $\geq j$ 的方案数再容斥一下（感觉自己好蠢</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge*j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 10005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 505</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">1e6</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> x*f;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span>&#123;</span><span class="hljs-keyword">int</span> t;edge*next;&#125;e[<span class="hljs-number">2</span>*NM],*h[NM],*o=e;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;o-&gt;t=y;o-&gt;next=h[x];h[x]=o++;&#125;<br><span class="hljs-keyword">int</span> n,c,_x,_y,dep[NM],ca;<br>ll d[NM][nm],ans,g[NM][nm];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> f)</span></span>&#123;<br>    dep[x]=<span class="hljs-number">0</span>;<br>    inc(i,<span class="hljs-number">0</span>,c<span class="hljs-number">-1</span>)d[x][i]=<span class="hljs-number">0</span>;<br>    d[x][c]=<span class="hljs-number">1</span>;<br>    link(x)<span class="hljs-keyword">if</span>(j-&gt;t!=f)&#123;<br>dfs(j-&gt;t,x);<br>inc(k,<span class="hljs-number">1</span>,min(c<span class="hljs-number">-1</span>,dep[x]))&#123;<br>    inc(v,max(<span class="hljs-number">0</span>,c<span class="hljs-number">-1</span>-k),min(c<span class="hljs-number">-1</span>,dep[j-&gt;t]))<br>(g[x][min(k,v+<span class="hljs-number">1</span>)]+=d[x][k]*d[j-&gt;t][v]%inf)%=inf;<br>    (g[x][min(k,c)]+=d[x][k]*d[j-&gt;t][c]%inf)%=inf;<br>&#125;<br>inc(v,<span class="hljs-number">0</span>,min(c<span class="hljs-number">-1</span>,dep[j-&gt;t]))(g[x][min(c,v+<span class="hljs-number">1</span>)]+=d[x][c]*d[j-&gt;t][v]%inf)%=inf;<br>(g[x][c]+=d[x][c]*d[j-&gt;t][c]%inf)%=inf;<br><br>inc(k,<span class="hljs-number">0</span>,c)d[x][k]=g[x][k],g[x][k]=<span class="hljs-number">0</span>;<br>dep[x]=max(dep[x],dep[j-&gt;t]+<span class="hljs-number">1</span>);<br>    &#125;<br>    d[x][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    link(x)<span class="hljs-keyword">if</span>(j-&gt;t!=f)&#123;<br>d[x][<span class="hljs-number">0</span>]*=(d[j-&gt;t][c]+d[j-&gt;t][c<span class="hljs-number">-1</span>]);d[x][<span class="hljs-number">0</span>]%=inf;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d"</span>,&amp;n,&amp;c)&amp;&amp;n&amp;&amp;c)&#123;<br>o=e;ans=<span class="hljs-number">0</span>;<br>inc(i,<span class="hljs-number">1</span>,n)h[i]=<span class="hljs-number">0</span>;<br>inc(i,<span class="hljs-number">1</span>,n<span class="hljs-number">-1</span>)&#123;_x=read();_y=read();add(_x,_y);add(_y,_x);&#125;<br>dfs(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br>inc(i,<span class="hljs-number">0</span>,c)ans+=d[<span class="hljs-number">1</span>][i],ans%=inf;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"Case #%d: %lld\n"</span>,++ca,ans);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mw Winter Camp Day1 D(DP+后缀数组)</title>
      <link href="/mswcD1/"/>
      <url>/mswcD1/</url>
      
        <content type="html"><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定字符串 $S$ $(|S|\le3000)$ ，求将 $S$ 分裂成几个递增的子串的方案数</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>令 $d[i][j]$ 为到第 $j$ 个字符，最后一段取 $S[i:j]​$ 的方案数</p><p>那么 $d[i][j]=\sum d[k][i-1]\,\,(S[k:i-1]&lt;S[i:j])$</p><p>利用后缀数组做子串比较，复杂度为 $O(n^3)$</p><p>而这种做法并没有充分利用好后缀数组的优势，故直接考虑枚举 $i$ 和 $k$ ，那么可以求 $i$ 和 $k$ 的 $LCP$ ，如果 $LCP$ 的下一位是递增的，那么对这个位置以后的 $j$ 都能产生贡献，否则无法产生贡献。</p><p>然后还有一个 $trick$ 是 $LCP$ 长度大于 $|S[k:i-1]|$ ，这个时候对该长度以后的位置都能产生贡献</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>后缀数组板子由 $wang9897$  提供%%%</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge*j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">9</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> x*f;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAXN=<span class="hljs-number">3005</span>;<br><br><span class="hljs-keyword">int</span> n,ca;<br><span class="hljs-keyword">char</span> _s[MAXN];<br>ll d[MAXN][MAXN],ans;<br><span class="hljs-keyword">int</span> sa[MAXN],txt[MAXN],t1[MAXN],t2[MAXN],rank1[MAXN],rank2[MAXN],td[MAXN];<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(<span class="hljs-keyword">int</span> f[],<span class="hljs-keyword">int</span> tt,<span class="hljs-keyword">int</span> ttt,<span class="hljs-keyword">int</span> k)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> f[tt]==f[ttt]&amp;&amp;f[tt+k]==f[ttt+k];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Sa</span><span class="hljs-params">(<span class="hljs-keyword">char</span> str[])</span></span>&#123;<br>    <span class="hljs-keyword">int</span> m=<span class="hljs-number">250</span>;<span class="hljs-keyword">int</span> len=<span class="hljs-built_in">strlen</span>(str);<br>    <span class="hljs-keyword">int</span> *td=t1;<span class="hljs-keyword">int</span> *rank1=t2;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)txt[i]=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)txt[str[i]]++,rank1[i]=str[i];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;m;i++)txt[i]+=txt[i<span class="hljs-number">-1</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=len<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)sa[--txt[str[i]]]=i;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">1</span>;k&lt;=len;k=k*<span class="hljs-number">2</span>)&#123;<br><span class="hljs-keyword">int</span> p=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=len-k;i&lt;len;i++)td[p++]=i;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)<span class="hljs-keyword">if</span>(sa[i]&gt;=k)td[p++]=sa[i]-k;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)txt[i]=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)txt[rank1[i]]++;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;m;i++)txt[i]+=txt[i<span class="hljs-number">-1</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=len<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)sa[--txt[rank1[td[i]]]]=td[i];<br>p=<span class="hljs-number">1</span>;<br>swap(rank1,td);<br>rank1[sa[<span class="hljs-number">0</span>]]=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;len;i++)rank1[sa[i]]=cmp(td,sa[i],sa[i<span class="hljs-number">-1</span>],k)?p<span class="hljs-number">-1</span>:p++;<br><span class="hljs-keyword">if</span>(p&gt;=len)<span class="hljs-keyword">return</span> ;<br>m=p;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">int</span> h[MAXN],H[MAXN];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">HH</span><span class="hljs-params">(<span class="hljs-keyword">char</span> str[])</span></span>&#123;<br>    <span class="hljs-keyword">int</span> len=<span class="hljs-built_in">strlen</span>(str);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)rank2[sa[i]]=i;<br>    <span class="hljs-built_in">memset</span>(H,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(H));<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)&#123;<br><span class="hljs-keyword">if</span>(rank2[i]==<span class="hljs-number">0</span>)<span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">int</span> t=sa[rank2[i]<span class="hljs-number">-1</span>];<span class="hljs-keyword">int</span> w=i;<span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span>(i==<span class="hljs-number">0</span>||H[i<span class="hljs-number">-1</span>]&lt;=<span class="hljs-number">1</span>)k=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">else</span> k=H[i<span class="hljs-number">-1</span>]<span class="hljs-number">-1</span>,t+=k,w+=k;<br><span class="hljs-keyword">while</span>(t&lt;len&amp;&amp;w&lt;len)&#123;<br>    <span class="hljs-keyword">if</span>(str[t]==str[w])k++;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<br>    t++;w++;<br>&#125;<br>H[i]=k;h[rank2[i]]=k;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">int</span> dp[MAXN][<span class="hljs-number">16</span>],ma[MAXN];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">St</span><span class="hljs-params">(<span class="hljs-keyword">char</span> str[])</span></span>&#123;<br>    <span class="hljs-keyword">int</span> len=<span class="hljs-built_in">strlen</span>(str);<br>    inc(i,<span class="hljs-number">2</span>,len)ma[i]=ma[i/<span class="hljs-number">2</span>]+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;len;i++)dp[i][<span class="hljs-number">0</span>]=h[i];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=<span class="hljs-number">15</span>;j++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i+(<span class="hljs-number">1</span>&lt;&lt;j)&lt;=len;i++)&#123;<br>    dp[i][j]=min(dp[i][j<span class="hljs-number">-1</span>],dp[i+(<span class="hljs-number">1</span>&lt;&lt;(j<span class="hljs-number">-1</span>))][j<span class="hljs-number">-1</span>]);<br>&#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Lcp</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(l&gt;r)swap(l,r);<br>    l++;<br>    <span class="hljs-keyword">int</span> k=ma[r-l+<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">return</span> min(dp[l][k],dp[r-(<span class="hljs-number">1</span>&lt;&lt;k)+<span class="hljs-number">1</span>][k]);<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>,_s))&#123;<br><span class="hljs-keyword">if</span>(_s[<span class="hljs-number">0</span>]==<span class="hljs-string">'-'</span>)<span class="hljs-keyword">break</span>;<br>n=<span class="hljs-built_in">strlen</span>(_s);ans=<span class="hljs-number">0</span>;<br>_s[n]=<span class="hljs-string">'$'</span>;_s[n+<span class="hljs-number">1</span>]=<span class="hljs-string">'\0'</span>;<br>Sa(_s);HH(_s);St(_s);<br>inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)inc(j,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)d[i][j]=<span class="hljs-number">0</span>;<br>inc(j,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)d[<span class="hljs-number">0</span>][j]=<span class="hljs-number">1</span>;<br>inc(i,<span class="hljs-number">1</span>,n<span class="hljs-number">-1</span>)&#123;<br>    inc(j,<span class="hljs-number">0</span>,i<span class="hljs-number">-1</span>)&#123;<br><span class="hljs-keyword">int</span> t=Lcp(rank2[i],rank2[j]);<br><span class="hljs-keyword">if</span>(t+j&gt;=i&amp;&amp;i+i-j&lt;n)&#123;<br>    (d[i][i+(i-j)]+=d[j][i<span class="hljs-number">-1</span>])%=inf;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">if</span>(rank2[i]&gt;rank2[j]&amp;&amp;i+t&lt;n)<br>    (d[i][i+t]+=d[j][i<span class="hljs-number">-1</span>])%=inf;<br>&#125;<br>    &#125;<br>    inc(j,i+<span class="hljs-number">1</span>,n<span class="hljs-number">-1</span>)(d[i][j]+=d[i][j<span class="hljs-number">-1</span>])%=inf;<br>&#125;<br><span class="hljs-comment">//inc(i,0,n-1)&#123;inc(j,0,n-1)printf("%lld ",d[i][j]);putchar('\n');&#125;</span><br>inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)ans+=d[i][n<span class="hljs-number">-1</span>],ans%=inf;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"Case #%d: There are %lld ways.\n"</span>,++ca,ans);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 后缀数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cf979E(DP套DP)</title>
      <link href="/cf979E/"/>
      <url>/cf979E/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://codeforces.com/contest/979/problem/E" target="_blank" rel="noopener">https://codeforces.com/contest/979/problem/E</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定一个 $n\,(n\le50)$ 个点的图，点有白有黑有待染色，只能从编号小的点向编号大的点连边，现对这个图染色连边，问有多少种方案，使得该图有偶/奇数条黑白相间的路径。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>先考虑子 $DP$ ，若给定图，那么黑白相间的路径数可以用一个简单 $DP$ 来解决</p><p>$dp[i]=\sum_{j=1}^{n-1} dp[j]​$  ( $j​$ 与 $i​$ 异色)</p><p>由于只要判定奇偶性，又可写为</p><p>$dp[i]=xor_{j=1}^{i-1} dp[j]$</p><p>那么只有 $dp$ 值为 $1$ 的点的个数的奇偶性即可确定 $dp[i]$</p><p>设第 $i$ 个点为黑点，如果确定了 $dp=1$ 的白点数 $a$ ，那么 $dp[i]=1/0$ 的方案数均为 $2^{a-1}2^{i-1-a}=2^{i-2}$ </p><p>但是如果 $a=0$ ，$dp[i]$ 只能等于 $1$ ，需要特判</p><p>因此在做外层 $DP$ 的时候，需要确定有无 $dp=1$ 的黑/白点，那么设 $d[i][j][k][v]$ 为到第 $i$ 个点，答案为 $j$ 的方案数( $k$ 和 $v$ 分别代表有无 $dp=1$ 的黑/白点)</p><p>然后分类讨论转移就可以了。。复杂度 $O(n)$</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3> <figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 55</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 32768</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pi 3.1415926535897931</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><span class="hljs-keyword">int</span> n,_p,a[NM];<br>ll p[NM],d[NM][<span class="hljs-number">2</span>][<span class="hljs-number">2</span>][<span class="hljs-number">2</span>],ans;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();_p=read();<br>    inc(i,<span class="hljs-number">1</span>,n)a[i]=read();<br>    p[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;inc(i,<span class="hljs-number">1</span>,n)p[i]=p[i<span class="hljs-number">-1</span>]*<span class="hljs-number">2</span>%inf;<br>    <span class="hljs-keyword">if</span>(a[<span class="hljs-number">1</span>])d[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>][<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(a[<span class="hljs-number">1</span>]&lt;=<span class="hljs-number">0</span>)d[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>][<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    inc(i,<span class="hljs-number">2</span>,n)inc(j,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)inc(k,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)inc(v,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)<span class="hljs-keyword">if</span>(d[i<span class="hljs-number">-1</span>][j][k][v])&#123;<br><span class="hljs-keyword">if</span>(a[i])&#123;<br>    <span class="hljs-keyword">if</span>(v)&#123;<br>(d[i][j][k][v]+=d[i<span class="hljs-number">-1</span>][j][k][v]*p[i<span class="hljs-number">-2</span>]%inf)%=inf;<br>(d[i][j^<span class="hljs-number">1</span>][<span class="hljs-number">1</span>][v]+=d[i<span class="hljs-number">-1</span>][j][k][v]*p[i<span class="hljs-number">-2</span>]%inf)%=inf;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>(d[i][j^<span class="hljs-number">1</span>][<span class="hljs-number">1</span>][v]+=d[i<span class="hljs-number">-1</span>][j][k][v]*p[i<span class="hljs-number">-1</span>]%inf)%=inf;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">if</span>(a[i]&lt;=<span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-keyword">if</span>(k)&#123;<br>(d[i][j][k][v]+=d[i<span class="hljs-number">-1</span>][j][k][v]*p[i<span class="hljs-number">-2</span>]%inf)%=inf;<br>(d[i][j^<span class="hljs-number">1</span>][k][<span class="hljs-number">1</span>]+=d[i<span class="hljs-number">-1</span>][j][k][v]*p[i<span class="hljs-number">-2</span>]%inf)%=inf;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>(d[i][j^<span class="hljs-number">1</span>][k][<span class="hljs-number">1</span>]+=d[i<span class="hljs-number">-1</span>][j][k][v]*p[i<span class="hljs-number">-1</span>]%inf)%=inf;<br>    &#125;<br>&#125;<br>    &#125;<br>    inc(j,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)inc(k,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)ans+=d[n][_p][j][k];<br>    ans%=inf;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>*<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bzoj3864(DP套DP)</title>
      <link href="/bzoj3864/"/>
      <url>/bzoj3864/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=3864" target="_blank" rel="noopener">https://www.lydsy.com/JudgeOnline/problem.php?id=3864</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定一个字符串 $S\, (|S|\le15)$ 和 $m\,(m\le 1000)$ ，字符串均只包含 $A、G、C、T$ 。构造长度为 $m$ 的字符串 $T$ ，输出使得 $LCS(S,T)=i$ 的方案数。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>先说一下 $DP$ 套 $DP$ 的含义</p><blockquote><p>通过一个外层的 $ DP$ 来计算使得另一个 $DP$ 方程(子 $DP $)<strong>最终结果为特定值</strong>的<strong>输入数</strong>。</p></blockquote><p>其实算是一个思想。。</p><p><br></p><p>这题的子 $DP$ 为 $dp[i][j]=LCS(T[1:i],S[1:j])$  ，一位一位的填的话，这个子 $DP$ 的状态数可以达到 $|S|!$ ，显然不能接受，而考虑到 $dp[i]$ 的单调性，且 $dp[i,j]$ 和 $dp[i,j-1]$ 只能相差 $0$ 或 $1$ ，所以可以差分后再进行状压，状态数降至 $2^{|S|}$ </p><p>然后对外层 $DP$ ，设 $d(i,j)$ 为到 $T$ 的第 $i$  位，状态为 $j$ 的方案数，然后直接做状压 $DP$ 就可以了。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 1005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 32768</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pi 3.1415926535897931</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br> <br> <br><br><br><br><span class="hljs-keyword">int</span> n,m,len[nm],d[NM][nm],g[nm][<span class="hljs-number">4</span>],cnt[<span class="hljs-number">16</span>],tot,ans[<span class="hljs-number">16</span>],a[<span class="hljs-number">16</span>],dp[<span class="hljs-number">16</span>];<br><span class="hljs-keyword">char</span> _s[<span class="hljs-number">16</span>];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">id</span><span class="hljs-params">(<span class="hljs-keyword">char</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(x==<span class="hljs-string">'A'</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(x==<span class="hljs-string">'G'</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(x==<span class="hljs-string">'C'</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">3</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123;<br>    tot=succ(n)<span class="hljs-number">-1</span>;<br>    inc(k,<span class="hljs-number">0</span>,tot)&#123;<br>inc(i,<span class="hljs-number">1</span>,n)cnt[i]=cnt[i<span class="hljs-number">-1</span>]+(k&gt;&gt;(i<span class="hljs-number">-1</span>)&amp;<span class="hljs-number">1</span>);<br>len[k]=cnt[n];<br>inc(v,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>)&#123;<br>    inc(i,<span class="hljs-number">1</span>,n)&#123;<br>dp[i]=max(cnt[i],dp[i<span class="hljs-number">-1</span>]);<br><span class="hljs-keyword">if</span>(v==a[i])dp[i]=max(dp[i],cnt[i<span class="hljs-number">-1</span>]+<span class="hljs-number">1</span>);<br>    &#125;<br>    dec(i,n,<span class="hljs-number">1</span>)g[k][v]=g[k][v]&lt;&lt;<span class="hljs-number">1</span>|(dp[i]-dp[i<span class="hljs-number">-1</span>]);<br>&#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> _=read();<span class="hljs-keyword">while</span>(_--)&#123;<br>mem(g);mem(d);mem(ans);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>,_s+<span class="hljs-number">1</span>);n=<span class="hljs-built_in">strlen</span>(_s+<span class="hljs-number">1</span>);<br>inc(i,<span class="hljs-number">1</span>,n)a[i]=id(_s[i]);<br>m=read();<br>init();<br>d[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>inc(i,<span class="hljs-number">0</span>,m<span class="hljs-number">-1</span>)inc(j,<span class="hljs-number">0</span>,tot)<span class="hljs-keyword">if</span>(d[i][j])<br>    inc(k,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>)(d[i+<span class="hljs-number">1</span>][g[j][k]]+=d[i][j])%=inf;<br>inc(j,<span class="hljs-number">0</span>,tot)(ans[len[j]]+=d[m][j])%=inf;<br>inc(i,<span class="hljs-number">0</span>,n)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,ans[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cf1111D(可逆背包)</title>
      <link href="/cf1111D/"/>
      <url>/cf1111D/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://codeforces.com/problemset/problem/1111/D" target="_blank" rel="noopener">http://codeforces.com/problemset/problem/1111/D</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定一个长度为偶数的的字符串(仅包含字母)，可以随意交换任意两个字符，先要将字符串分成左右两半部分，给定 $q$ 个询问，每个询问包含 $x$ 和 $y$ ，要求满足下述要求的排列方案数：</p><ol><li>同一种字符不同时出现在字符串左右两半</li><li>$x$ 、 $y$ 代表的字符应出现在同一侧</li></ol><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>事实上只要考虑哪些字符出现在左半部分就可以了然后再对这些字符分别进行排列，而排列方案数总是固定的，为 $\frac{\frac{n}{2}!\frac{n}{2}!}{\prod a_i!}$ (其中$a_i$为i字符出现的个数)。</p><p>然后就转化成一个01计数背包了，由于这个背包是可逆的，所以我们把物品装进去之后再去撤销。直接插销复杂度是 $O(qn)$ 不能接受，仔细分析询问种类最多只有 $52*52$ 种，那么直接预处理这些情况就可以了，复杂度为 $O(52^2n)$ 。实际上复杂度没有那么高，因为我们只要求背包里某一个特定的值，而撤销背包的表达式比较简单，所以可以手动算出要求的那一项，这样撤销的复杂度可以降成 $O(n/v)$ ，为了避免极限数据的出现可以排序去重，然后复杂度可以降至 $O(52nlogn)$ 。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 100005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 200005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pi 3.1415926535897931</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br> <br> <br><br><br><br><br>ll ans,p[NM],inv[NM],invp[NM];<br><span class="hljs-keyword">char</span> s[NM];<br><span class="hljs-keyword">int</span> n,m,a[<span class="hljs-number">53</span>],_x,_y,d[<span class="hljs-number">53</span>][<span class="hljs-number">53</span>];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tmp</span>&#123;</span><br>    <span class="hljs-keyword">int</span> d[NM];<br>    <span class="hljs-keyword">void</span> <span class="hljs-keyword">operator</span>*=(<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span>&amp;t)&#123;dec(i,n,t)d[i]+=d[i-t],d[i]%=inf;&#125;<br>    <span class="hljs-keyword">void</span> <span class="hljs-keyword">operator</span>/=(<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span>&amp;t)&#123;inc(i,t,n)d[i]-=d[i-t],d[i]%=inf;&#125;<br>&#125;cnt[<span class="hljs-number">53</span>];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">fun</span><span class="hljs-params">(<span class="hljs-keyword">char</span> t)</span></span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-string">'a'</span>&lt;=t&amp;&amp;t&lt;=<span class="hljs-string">'z'</span>?t-<span class="hljs-string">'a'</span>+<span class="hljs-number">1</span>:t-<span class="hljs-string">'A'</span>+<span class="hljs-number">27</span>;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>,s+<span class="hljs-number">1</span>);n=<span class="hljs-built_in">strlen</span>(s+<span class="hljs-number">1</span>);<br>    p[<span class="hljs-number">0</span>]=invp[<span class="hljs-number">0</span>]=inv[<span class="hljs-number">1</span>]=invp[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    inc(i,<span class="hljs-number">1</span>,n)p[i]=p[i<span class="hljs-number">-1</span>]*i%inf;<br>    inc(i,<span class="hljs-number">2</span>,n)inv[i]=inv[inf%i]*(inf-inf/i)%inf,invp[i]=invp[i<span class="hljs-number">-1</span>]*inv[i]%inf;<br>    inc(i,<span class="hljs-number">1</span>,n)a[fun(s[i])]++;<br>    n&gt;&gt;=<span class="hljs-number">1</span>;<br>    ans=p[n]*p[n]%inf;<br>    inc(i,<span class="hljs-number">1</span>,<span class="hljs-number">52</span>)ans*=invp[a[i]],ans%=inf;<br>    ans&lt;&lt;=<span class="hljs-number">1</span>;ans%=inf;<br>    cnt[<span class="hljs-number">0</span>].d[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    inc(i,<span class="hljs-number">1</span>,<span class="hljs-number">52</span>)<span class="hljs-keyword">if</span>(a[i])cnt[<span class="hljs-number">0</span>]*=a[i];<br>    inc(i,<span class="hljs-number">1</span>,<span class="hljs-number">52</span>)<span class="hljs-keyword">if</span>(a[i])cnt[i]=cnt[<span class="hljs-number">0</span>],cnt[i]/=a[i];<br>    inc(i,<span class="hljs-number">1</span>,<span class="hljs-number">52</span>)<span class="hljs-keyword">if</span>(a[i])inc(j,i+<span class="hljs-number">1</span>,<span class="hljs-number">52</span>)<span class="hljs-keyword">if</span>(a[j])&#123;<br><span class="hljs-keyword">int</span> t=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=n;k&gt;=<span class="hljs-number">0</span>;k-=a[j],t=-t)<br>    d[i][j]+=t*cnt[i].d[k],d[i][j]%=inf;<br>    &#125;<br>    inc(i,<span class="hljs-number">1</span>,<span class="hljs-number">52</span>)inc(j,<span class="hljs-number">1</span>,i<span class="hljs-number">-1</span>)d[i][j]=d[j][i];<br>    m=read();<span class="hljs-keyword">while</span>(m--)&#123;<br>_x=read();_y=read();<br><span class="hljs-keyword">if</span>(s[_x]==s[_y])<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,(cnt[fun(s[_x])].d[n]+inf)*ans%inf);<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,(d[fun(s[_x])][fun(s[_y])]+inf)*ans%inf);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 组合数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo瞎猴日记二</title>
      <link href="/hexo2/"/>
      <url>/hexo2/</url>
      
        <content type="html"><![CDATA[<h3 id="latex支持"><a href="#latex支持" class="headerlink" title="latex支持"></a>latex支持</h3><p>这个要个CDN(然而窝又不造是什么)，随便百度上拉来一个能用就行，不过貌似效果略差？</p><p>代码如下：</p><figure class="hljs highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">mathjax:</span><br><span class="hljs-attr">  enable:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">  global:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">  cdn:</span> <span class="hljs-attr">https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-MML-AM_CHTML</span><br></code></pre></td></tr></table></figure><p><br></p><h3 id="背景图-留坑"><a href="#背景图-留坑" class="headerlink" title="背景图(留坑)"></a>背景图(留坑)</h3><p>背景图的设置可以从$themes$文件夹下的$source/css/custom.styl$下去设置(前提是主题的作者很好心地给泥设置了这个选项)，然后仿照下面的代码去把背景设置一下就可以</p><figure class="hljs highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">body&#123;<br>    background-image:url(/images/background.jpg);<br>    background-attachment:fixed;<br>    background-repeat:repeat;<br>    background-size:contain;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是这个方案其实比较差，由于填充得比较暴力，所以对图片的要求比较刁钻。另外这个主题下中间的背景是被挡住的，所以对背景的要求也就变得更高了些。</p><p>目前想这找一些风景图来填充就可以，以后碰上就试一下就不刻意找了。</p><p><br></p><h3 id="About-me"><a href="#About-me" class="headerlink" title="About me"></a>About me</h3><p>有个语法之前忘了说<code>hexo new page pagename</code>意思是新建一个名为$pagename$的功能页</p><p>然后$About\,me$页面和$Tag$页面和$404$页面都可以用这种方法去实现</p><p>其中404页面要部署在$Github\,Pages$上才能用</p><p><br></p><h3 id="代码复制"><a href="#代码复制" class="headerlink" title="代码复制"></a>代码复制</h3><p>参考链接：<a href="https://www.jianshu.com/p/3e9d614c1e77" target="_blank" rel="noopener">https://www.jianshu.com/p/3e9d614c1e77</a></p><p>跟着照做就行，完全无难度</p><p><br></p><h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><p>窝写题解的时候格式还算是比较固定的？所以可以弄个模板上去，按照<a href="https://hexo.io/zh-cn/docs/writing#%E6%A8%A1%E7%89%88%EF%BC%88Scaffold%EF%BC%89" target="_blank" rel="noopener">官方文档</a>，在$scafflods$下建立一个$name.md$文件，然后用命令<code>hexo new name newpost</code>就可以了</p><p><br></p><h3 id="突然还想要一个会动的小人-留坑"><a href="#突然还想要一个会动的小人-留坑" class="headerlink" title="突然还想要一个会动的小人(留坑)"></a>突然还想要一个会动的小人(留坑)</h3><p>先给几个学习链接：</p><ol><li><p><a href="https://github.com/EYHN/hexo-helper-live2d" target="_blank" rel="noopener">https://github.com/EYHN/hexo-helper-live2d</a></p></li><li><p><a href="https://haremu.com/p/205" target="_blank" rel="noopener">https://haremu.com/p/205</a></p></li><li><a href="https://imjad.cn/archives/lab/add-dynamic-poster-girl-with-live2d-to-your-blog-02" target="_blank" rel="noopener">https://imjad.cn/archives/lab/add-dynamic-poster-girl-with-live2d-to-your-blog-02</a></li></ol><p>然后了解到有$live2d$这种技术，看了半天发现这技术过于硬核，所以打算拉一份代码就好了。。现有的模型其实也很少，所以没得挑。。</p><p>然后就直接链接到别人的$github$上把他的$live2d$拉了下来，这个要参考第一个链接，把 $hexo-helper-live2d$ 下载完后，文档给出了自定义的模型的使用方法，直接套上去就可以。</p><p>小人说话的问题第二个链接貌似有给出解决方案可是窝一直鼓捣不出来。。</p><p>$live2d$好像自带半透明色像幽灵一样好恐怖5555</p><p><br></p><h3 id="关于域名"><a href="#关于域名" class="headerlink" title="关于域名"></a>关于域名</h3><p>方法大概了解过了，大概就是交钱交钱验证验证。。</p><p>然后还发现以前自己已经把$blog$挂在$Github\, Pages$上了，这就已经足够，便不用其他的域名了。</p><p><br></p><p>鼓捣$hexo$的历程可能到这就告一段落，有问题以后慢慢解决吧_(:3 」∠)_</p><p><br></p><p>$2019.03.16\,\,\, UPD $</p><h3 id="Latex-与-MarkDown-的冲突-未完全解决"><a href="#Latex-与-MarkDown-的冲突-未完全解决" class="headerlink" title="$Latex$ 与 $MarkDown$ 的冲突(未完全解决)"></a>$Latex$ 与 $MarkDown$ 的冲突(未完全解决)</h3><p>这个问题产生于窝想打一个公式类似于： $max{}$</p><p>在 $typora$ 下编辑是没有任何问题的，然而会被 $hexo$ 渲染的时候会丢了大括号，查了下那个公式的 $latex$ 原码，发现 <code>\</code> 消失了，故大括号也跟着消失，然后发现 $Markdown$ 渲染的时候 <code>\</code> 是个特殊符号，会发现转义，要打出 <code>\</code> 只需打出 <code>\\</code> 即可，故改成 <code>max\\{\\}</code> 就可以了。。</p><p>然而好丑，而且如果遇到复杂公式可能问题会更大，必须找更好的方案来和 $typora$ 同步</p><p>方案是直接修改 $hexo-render-marked$ 的原码，在修改 <code>./node_modules/marked/lib/marked.js</code> ，将里面的</p><figure class="hljs highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">escape</span>: <span class="hljs-regexp">/^\\([\\`*&#123;&#125;\[\]()# +\-.!_&gt;])/</span>,<br></code></pre></td></tr></table></figure><p>修改成</p><figure class="hljs highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">escape</span>: <span class="hljs-regexp">/^\\([`*\[\]()# +\-.!_&gt;])/</span>,<br></code></pre></td></tr></table></figure><p>这是取消了对 <code>\\</code>、<code>\{</code>、<code>\}</code> 的转义，这样上述问题就可以得到解决。。</p><p>$2019/5/1$   $UPD$</p><p>上述解法实在是治标不治本，所以当遇到不得不用 $*$ 或者 $_$ 的时候就很尴尬了</p><p>另外找了一些解决方法，优秀的毅哥给了个方案是更换渲染引擎，然后去学习了一下有关渲染引擎的一些知识。。</p><p>以前用的默认渲染引擎是 <code>hexo-renderer-marked</code> ，这个引擎在很多意义上十分不方便，除了语义冲突，还有加载速度过慢的问题</p><p>这里改用 <code>hexo-renderer-kramed</code> (整半天 <code>hexo-renderer-markdown-it</code> 整不过来qaq)，然后发现使用 <code>hexo g</code> 命令一直报错，弄了半天发现是这个渲染引擎在对两个连续的花括号进行渲染的时候会直接报错，所以以后写文章的时候得把两个花括号空着格写，这个问题其实不大。。</p><p>然后渲染速度就变得十分优秀了，<del>公式问题就此完美解决</del></p><p>发现在 $Markdown$ 表格里面还是有语义冲突，而且表格一直都贼难用，从此和表格再也无缘啦8888888</p><h3 id="RSS订阅-留坑"><a href="#RSS订阅-留坑" class="headerlink" title="RSS订阅(留坑)"></a>RSS订阅(留坑)</h3><p>这个东西之前一直不知道是干嘛的。。在 $ThunderBird$ 等软件上使用 $Feeds$ 服务，将 $RSS$ 链接复制进去就可以订阅相关内容了，其实大概的内容也可以在 <code>atom.xml</code> 里看见。。</p><p>要使博客有这个订阅功能，首先得安装插件  <code>hexo-generator-feed</code> ，然后根据他的<a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="noopener">文档</a> 配置 <code>_config.yml</code> 就可以了。。</p><p>然后没有对文章长度进行限制，理由和摘要一样。。</p><p>相应的推送文章的篇数应该减少，这里只选取了最新的 $5$ 篇文章。。</p><p>显示的效果是推送没有经过 $Mathjax$ 的渲染，效果非常难看。。这里还是留坑把。。</p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo瞎猴日记一</title>
      <link href="/hexo1/"/>
      <url>/hexo1/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这个blog其实大一就做了一下，弄到hello world和学习了一下markdown之后就没再弄过了，至于为什么要重新来弄这个是因为这个CSDN真的是emmmmm</p><p>于是这里顺便发一下前任博客的链接<a href="https://blog.csdn.net/qkoqhh" target="_blank" rel="noopener">https://blog.csdn.net/qkoqhh</a></p><p>当时搭这博客的细节也忘得差不多了，流程大概是按照<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">官方文档</a>来的，记得是装某个东西的时候有点问题？</p><p><br></p><h3 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h3><p>主题选的是<a href="https://github.com/AlynxZhou/hexo-theme-aria/" target="_blank" rel="noopener">Aria</a>，实用性很强，界面也非常舒服，而且，文档写得超详细！真是用心了，感谢作者<a href="http://aria.ismyonly.one/" target="_blank" rel="noopener">AlynxZhou</a>。</p><p>跟着文档把自己能够看懂的部分稍微设置了一下，然后根据自己的需求做了点修改。</p><p><br></p><h3 id="号"><a href="#号" class="headerlink" title="#号"></a>#号</h3><p>第一个是标题前面的#，这个的作用其实已经和文章目录有点重复了，反而可能会有点比较突兀，所以就想去掉</p><p>直接查看#的元素，发现他的类是headerlink，于是用grep在模板里面找到包含headerlink的文件，发现只有aria/source/css/post.styl有，于是删掉如下代码段就可以去掉了：</p><figure class="hljs highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs css">  .post-main &#123;<br>    a.headerlink &#123;<br>      border: none;<br>      &amp;:hover &#123;<br>        border: none;<br>      &#125;<br>      &amp;:active &#123;<br>        top: 0;<br>      &#125;<br>      &amp;::before &#123;<br>        content: "#";<br>        margin-right: 0.3em;<br>      &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当然其实应该可以做得更好，比如用好看一点的图片来代替#可能效果会更加不错，以后有时间可以来改改</p><p>(话说这个hexo没有css的高亮么。。明明在typora下有的说)</p><p><br></p><h3 id="Tag页面"><a href="#Tag页面" class="headerlink" title="Tag页面"></a>Tag页面</h3><p>另一个比较大的问题是hexo自身的问题（这个问题差点让窝弃了hexo），关于分类的，由于hexo不支持同级分类，所以今后窝如果要写一些类别有交叉的文章可能就会比较尴尬。</p><p>由于这是hexo自身的特性根本就没有办法改变，所以分类功能只能弃用。代替他的是标签，用标签的话就可以不用拘泥于严格的类别次序，但是这些标签是不能确定主次或者包含关系的，这个缺点比分类的好接受多了，毕竟大部分博客也是都这样的。</p><p>主题默认使用的tag-cloud窝认为是比较华而不实的，散乱的排列，仅靠大小来判定该分类的大小实在是emmmm</p><p>所以还是想弄成传统的标签，然而缺少知识的窝并不造怎么弄。决定去学一手<a href="http://tokitsukaze.live" target="_blank" rel="noopener">tokitsukaze的博客</a>，发现可以用tag-list（这个在手册上的辅助函数里有可窝当时并没有看懂？），而通过grep命令很容易知道tag-cloud是在/themes/aria/layout/tags.njk​里面生成的，然后仿照原来的tag-cloud的格式生成了tag-list。然后发现标签和数目并在一起相当难看，所以又去学了一首调节字体颜色大小，等调节完发现只能改数字，不能改标签，因为标签是个链接？！之后试了很多方法都没用。。只能妥协。。最后仿造了分类的配色方案将数字的颜色调了一下。。这个问题其实还是没有完全解决qaq</p><p>然后标签的顺序问题默认是按name​排序，如果想按文章数量排序要把​orderby设置成length，其他的就按手册上写就行。。</p><p>代码如下：</p><figure class="hljs highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html">     <span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"5"</span> <span class="hljs-attr">face</span>=<span class="hljs-string">"Verdana"</span> <span class="hljs-attr">color</span>=<span class="hljs-string">"black"</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"tag-list"</span>&gt;</span><br>&#123;&#123;list_tags(&#123;orderby:"length",order:-1,show_count:true,class:tag,amount:0,style:"list"&#125;) &#125;&#125;<br>     <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span><br></code></pre></td></tr></table></figure><p><br></p><h3 id="生成摘要"><a href="#生成摘要" class="headerlink" title="生成摘要"></a>生成摘要</h3><p>另外有个小问题就是，文章摘要貌似只能按字数来算，然后不巧有篇文章开头就是图片，再加上图片大小的调整窝现在也没解决，所以那篇文章的前100字数已经占据了一页。。仔细一想其实窝好像从来就没有看过或者写过摘要（标题党），所以摘要对窝来说确实无关紧要（而且以后的文章中摘要说不定是题意= =），所以直接把摘要去了，把theme里面的_config.yml的auto_excerpt改成如下：</p><figure class="hljs highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">auto_excerpt:</span><br><span class="hljs-attr">    enable:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">    length:</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p><br></p><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>还有一个小问题就是图片的引用问题，有2种姿势：</p><ol><li><p>绝对路径，将图片统一放在source/images中，通过<code>![](/images/image.jpg)</code>访问他们</p></li><li><p>相对路径，通过将_config.yml的post_asset_folder选项修改为true后，以后执行<code>hexo new post_name</code>，还会额外生成post_name同名文件夹，然后可以直接引用文件夹。例如<code>![](image.jpg)</code></p></li></ol><p>一开始是想用相对路径的，然而发现每次建文件夹都没用就很难受，所以就把post_asset_older关了，然而之前的图片引用也一并失效了囧～～</p><p>所以考虑自己没多少图片的情况下就选择用绝对路径了</p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test and note of markdown</title>
      <link href="/test/"/>
      <url>/test/</url>
      
        <content type="html"><![CDATA[<h1 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h1><h3 id="Test-1"><a href="#Test-1" class="headerlink" title="Test"></a>Test</h3><script type="math/tex; mode=display">a*b</script><p>qkoqhh is so juruo that he used more than two days to build this blog.It’s so lucky that the odd error disappeared without doing nothing.In conclusion,RP is very significant,especially to the problem of XuanXue.  </p><p>试试中文资不资辞蛙？<br>看来是资辞的。<br>下面学习试试引用</p><blockquote><p>苟利国家生死以，岂因祸福避趋之。<br>                                                —最初的网红</p></blockquote><p>引用中的引用？？</p><blockquote><blockquote><p>0.0</p><p>=w=</p></blockquote></blockquote><p>还有引用中的标题？</p><blockquote><h2 id="他改变了中国"><a href="#他改变了中国" class="headerlink" title="他改变了中国"></a>他改变了中国</h2><p>emmmm此处省略一万字。。</p></blockquote><p><strong>试试粗鄙</strong></p><p>有序列表 +号可以用*或-代替。。</p><ul><li>red<br>sad</li><li>green</li><li>blue</li></ul><p>还有空个行会有一种奇怪的现象</p><ul><li><p>red</p></li><li><p>green</p></li><li>blue</li></ul><p>无序列表 好像不管.前面的数字耶。。</p><ol><li><strong>123</strong></li><li>233</li><li>432</li></ol><ul><li>喵喵喵喵？<blockquote><p>   项目中的引用？？<br>这样？？</p></blockquote></li></ul><p>贴代码：<br><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br></code></pre></td></tr></table></figure></p><p>试试分割线</p><hr><hr><hr><hr><p>好像这个”***”分割线能引用的说。。。</p><hr><p>试试行内式链接？？<br>对方给你扔了一个<a href="http://www.bilibili.com" title="duangduangduang" target="_blank" rel="noopener">链接</a><br><del>好像还能用相对路径？算了感觉这个没什么用。。</del></p><p>接下来是参考式链接。。。<br>对方又给你扔了一个<a href="http://www.baidu.com" title="duang" target="_blank" rel="noopener">链接</a><br>引号的内容貌似可以在attach的时候显示粗来。。<br>定义参考式链接的时候好像还可以用&lt;&gt;,什么都没有不就好了嘛。。干嘛弄得这么麻烦。。</p><p>再次运行了一下，获得以下结论：</p><ol><li>链接的http不能省。。</li><li>好像我的preview和实际效果还有点差距？</li><li>编辑时直接刷新页面就可以看到效果了。。</li><li>preview硬换行好像只有一个缩进的效果，要换行必须用软换行。。而hexo好像软硬通吃。。所以preview少用吧。。</li></ol><p>顺势学学绝对路径插入图片<br><img src="https://dn-Myg6wSTV.qbox.me/14868d18eabae4a6fbb5.jpg" alt=""><br>emmmm好像不能设置图片大小呀。。以后再找解决方案吧。。。<br>自己的本地文件要上传到github再获取链接才行。。。这里还顺便再图片上弄了个链接<br><a href="http://blog.csdn.net/qkoqhh" target="_blank" rel="noopener"><img src="https://raw.githubusercontent.com/qkoqhh/picture/master/resource/0bc564cb0a46f21f44e52200f1246b600d33aea4.jpg" alt=""> </a></p><p>（然后emmmm图片来源其实早都没了</p><p>文字强调？？<br><em>qkoqhh</em><br><em>qkoqhh</em><br><strong>qkoqhh</strong><br><strong>qkoqhh</strong><br>emmmm2个*或_就是粗体。。1个就话就是斜体。。</p><p>标记一小段代码？？用 ‘return 0;’ 就好了耶0v0</p>]]></content>
      
      
      
        <tags>
            
            <tag> test </tag>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/hello-world/"/>
      <url>/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">"My New Post"</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>404 Not Found</title>
      <link href="//404.html"/>
      <url>//404.html</url>
      
        <content type="html"><![CDATA[<p><strong><div class="alert-red"><font size="6">这里真的什么都没有啦QAQ</font></div></strong></p><p><div align="center"><img src="/images/404.jpg" alt=""></div></p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<p><strong><div class="alert-green"><font size="6">欢迎您访问此博客</font></div></strong></p><h1 id="qkoqhh"><a href="#qkoqhh" class="headerlink" title="qkoqhh"></a>qkoqhh</h1><ul><li><p><del>现役</del> 退役  <del>ACM</del> JB 选手，特长是端茶送水。</p><p>队伍 $1$ ：<strong>生鱼忧患死鱼安乐</strong>  ( <a href="http://www.cnblogs.com/greenty1208/" target="_blank" rel="noopener">$Grennty\_Q$</a> 、 <a href="http://www.cnblogs.com/wang9897/" target="_blank" rel="noopener">$wang9897$</a> )， $2$ 银 $2$ 铜 $1$ 铁<br>队伍 $2$ ：<strong>几何旋律</strong>  ( <a href="http://101.132.170.22/" target="_blank" rel="noopener">$fffasttime$</a> 、 <a href="http://www.cnblogs.com/wang9897/" target="_blank" rel="noopener">$wang9897$</a> )，$5$ 金 $2$ 银 $1$ 铁</p><p>CF Rating: <a href="https://codeforces.com/profile/qkoqhh" target="_blank" rel="noopener">2183</a></p></li><li><p>$XDU$ 本科生 ，专业：网络空间安全</p></li><li><p>$qkoqhh$ 这个名字是高考账号原始密码 _(:3 」∠)_</p></li><li><p>伪车万厨，喜欢 $STG$ 然而停飞多时，目前只有 $11N3H3EX$ 。喜欢看番，最喜欢的番剧是魔法少女小圆和 $Steins\,Gate$ 。</p></li></ul><p><br></p><h1 id="联系方式"><a href="#联系方式" class="headerlink" title="联系方式"></a>联系方式</h1><p>$QQ:1374363741$</p><p>$Email:$ <a href="mailto:qkoqhh@163.com" target="_blank" rel="noopener">$qkoqhh@163.com$</a></p><p><br></p><h1 id="关于这个博客"><a href="#关于这个博客" class="headerlink" title="关于这个博客"></a>关于这个博客</h1><p>以前在 <a href="https://blog.csdn.net/qkoqhh" target="_blank" rel="noopener">$CSDN$</a> ，渐渐对 $CSDN$ 各种不适故迁到此地。。</p><p>缺少前端知识所以还有各种缺点，一些坑先了留着。欢迎提出博客出现的种种问题 _(:3 」∠)_</p><p>搭然后这个博客主要是来写写一些题解什么的，退役后可能就拿来写一些学习笔记。</p><p>写文章会尽量按照 <a href="https://loj.ac/article/6" target="_blank" rel="noopener">$LOJ$ 的排版格式</a></p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>QAQ</title>
      <link href="/guo/index.html"/>
      <url>/guo/index.html</url>
      
        <content type="html"><![CDATA[<h2 id="Hexo-里的一些-BUG"><a href="#Hexo-里的一些-BUG" class="headerlink" title="Hexo 里的一些 BUG"></a>Hexo 里的一些 BUG</h2><p>行内多个 $latex$ 引用引发语义冲突问题(TODO：尝试使用frank聚聚提出的方案)，出现这个问题的有比如：<a href="/loj2478">loj2478</a> </p><p>(UPD：靠，about页面都出现了，丢人)</p><p>这个博客好像还有很多BUG，记不起来了。。</p><p><br></p><p><br></p><h2 id="弃坑了"><a href="#弃坑了" class="headerlink" title="弃坑了"></a>弃坑了</h2><hr><p><del><a href="https://www.luogu.org/problem/P4495" target="_blank" rel="noopener">https://www.luogu.org/problem/P4495</a></del></p><h4 id="9-20"><a href="#9-20" class="headerlink" title="9.20"></a>9.20</h4><p>cf1221G</p><h4 id="9-7"><a href="#9-7" class="headerlink" title="9.7"></a>9.7</h4><p><del><a href="https://codeforces.com/gym/102059" target="_blank" rel="noopener">https://codeforces.com/gym/102059</a></del></p><h4 id="9-2"><a href="#9-2" class="headerlink" title="9.2"></a>9.2</h4><p><del>线性递推</del>        BM(目前只有板子)</p><p><del>整理博客和板子</del></p><p>二分图(反链，hall定理)</p><p>容斥(能开多少开多少orz)</p><p>【备选】多项式多点插值、MTT</p><h4 id="8-28"><a href="#8-28" class="headerlink" title="8.28"></a>8.28</h4><p><del>SOSDP</del></p><p><a href="https://codeforces.com/blog/entry/45223" target="_blank" rel="noopener">https://codeforces.com/blog/entry/45223</a></p><h4 id="多校大坑汇总-对不起窝真的补不动了orz"><a href="#多校大坑汇总-对不起窝真的补不动了orz" class="headerlink" title="多校大坑汇总(对不起窝真的补不动了orz)"></a>多校大坑汇总(对不起窝真的补不动了orz)</h4><h5 id="hdu"><a href="#hdu" class="headerlink" title="hdu"></a>hdu</h5><ol><li>C 背包    J 区间DP</li><li>无</li><li>无</li><li>D k进制FWT</li><li>A 数论</li><li>无</li><li>E 不造是个什么题</li><li>无</li><li>I 斜率优化    K 分形</li><li>A 多项式    F 树型DP</li></ol><h5 id="nowcoder"><a href="#nowcoder" class="headerlink" title="nowcoder"></a>nowcoder</h5><ol><li>无</li><li>无</li><li>无</li><li>G 树形DP</li><li>无</li><li>F 容斥</li><li>I 组合数学    K min25</li><li>无</li><li>F DP    G DP</li><li>无</li></ol><h4 id="8-25"><a href="#8-25" class="headerlink" title="8.25"></a>8.25</h4><p>动态LIS(二分)</p><p>bzoj5161</p><h4 id="8-19"><a href="#8-19" class="headerlink" title="8.19"></a>8.19</h4><p><del>SPOJ DIVCNTK</del></p><p>loj572</p><p>hdu6413</p><p><del>luogu5307</del></p><h4 id="8-10"><a href="#8-10" class="headerlink" title="8.10"></a>8.10</h4><p>cf438E</p><h4 id="7-30"><a href="#7-30" class="headerlink" title="7.30"></a>7.30</h4><p>bzoj3451</p><h4 id="7-16"><a href="#7-16" class="headerlink" title="7.16"></a>7.16</h4><p>cf1187 F、G</p><p>bzoj1150</p><h4 id="7-19"><a href="#7-19" class="headerlink" title="7.19"></a>7.19</h4><p><del>牛客多校 D(FWT)</del></p><p><a href="https://codeforces.com/gym/102220/problem/A" target="_blank" rel="noopener">东北省赛 A</a>(hall定理)</p><p><a href="https://codeforces.com/gym/102220/problem/I" target="_blank" rel="noopener">东北省赛 I</a>(NTT)[留坑]</p><p><del>hdu6566(背包)</del></p><p><del><a href="http://blog.leanote.com/post/rockdu/TX20" target="_blank" rel="noopener">http://blog.leanote.com/post/rockdu/TX20</a></del></p><p><del>CCPC湘潭</del></p><p>西安邀请赛</p><p><del><a href="https://codeforces.com/group/Us3rfLfgWv/contest/102174/problem/I" target="_blank" rel="noopener">BIT I</a></del></p><p><a href="https://codeforces.com/group/Us3rfLfgWv/contest/243809" target="_blank" rel="noopener">BAPC E</a></p><p>comet oj</p><p>bzoj4036</p><p><a href="https://codeforces.com/blog/entry/63070" target="_blank" rel="noopener">https://codeforces.com/blog/entry/63070</a></p><p><a href="https://codeforces.com/blog/entry/64625" target="_blank" rel="noopener">https://codeforces.com/blog/entry/64625</a></p><p><a href="https://www.zhihu.com/question/266958886/answer/317982906" target="_blank" rel="noopener">https://www.zhihu.com/question/266958886/answer/317982906</a></p><p><a href="https://www.jisuanke.com/contest/1406?view=challenges" target="_blank" rel="noopener">https://www.jisuanke.com/contest/1406?view=challenges</a></p><p><a href="https://www.jisuanke.com/contest/1227" target="_blank" rel="noopener">https://www.jisuanke.com/contest/1227</a></p><p><del>动态DP(cf650)</del></p><p><del>广义矩阵乘法</del></p><p><a href="https://www.luogu.org/problemnew/show/P4245" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P4245</a></p><p>bzoj3451</p><p>bzoj5089</p><p>cf756D</p><p>bzoj3672</p><p>NEERC2015 Distance on Triangle</p><p><del>三元环</del></p><p><a href="https://www.cnblogs.com/mlystdcall/p/6219421.html" target="_blank" rel="noopener">CDQ分治</a></p><p>生成函数/特殊的数</p><p>luogu5393</p><p>luogu5383</p><p>bzoj4671</p><p>cf947E</p><p>cf715E</p><p><a href="https://lx-2003.blog.luogu.org/generating-function-advanced" target="_blank" rel="noopener">https://lx-2003.blog.luogu.org/generating-function-advanced</a></p><p><a href="https://www.cnblogs.com/y2823774827y/p/10704018.html" target="_blank" rel="noopener">https://www.cnblogs.com/y2823774827y/p/10704018.html</a></p><p>$prufer$ 序列(算是完了？)</p><p>矩阵树定理</p><p>$hall$ 定理</p><p>反链</p><p>二次剩余</p><p><a href="http://blog.miskcoo.com/2014/08/quadratic-residue" target="_blank" rel="noopener">http://blog.miskcoo.com/2014/08/quadratic-residue</a></p><p>多重集的排列数、多重集的组合数</p><p>min-max容斥</p><p>特殊的数</p><p>$FFT/NTT/FWT$ </p><p>拉格朗日反演</p><p>拓展拉格朗日反演</p><p>常系数齐次线性递推</p><p><em>多项式三角函数/反三角函数</em></p><p><del>多项式多点求值</del></p><p>多项式快速插值(拉格朗日插值)</p><p>MTT</p><p>BlueStein算法</p><p>母函数/生成函数</p><p>群论</p><p><a href="https://blog.csdn.net/zhouyuheng2003/column/info/36072" target="_blank" rel="noopener">容斥</a></p><p>反演</p><p><a href="http://blog.miskcoo.com/2015/12/inversion-magic-binomial-inversion" target="_blank" rel="noopener">http://blog.miskcoo.com/2015/12/inversion-magic-binomial-inversion</a></p><p><a href="http://vfleaking.blog.uoj.ac/blog/87" target="_blank" rel="noopener">http://vfleaking.blog.uoj.ac/blog/87</a></p><p>二项式反演</p><p>广义容斥</p><p>类欧几里得</p><p>高斯消元</p><p>多项式</p><p><a href="https://blog.csdn.net/zhangche0526/article/details/71879985" target="_blank" rel="noopener">仙人掌/圆方树</a></p><p>hdu5803</p><p>camp的题解就等结束后再补：</p><p>day1:D F K</p><p>day2:A C E F</p><p>day3:D E G K L+模板题</p><p>day4:模板题</p><p>day5:B(待定) G I J</p><p><del><a href="http://codeforces.com/gym/101741/problem/J" target="_blank" rel="noopener">http://codeforces.com/gym/101741/problem/J</a></del></p><p><a href="http://codeforces.com/gym/101741" target="_blank" rel="noopener">http://codeforces.com/gym/101741</a></p><p><del>hdu5528</del></p><p>hdu5545</p><p>cf294E</p><p><del>2015北京c</del></p><p>2015西安h</p><p><del>zoj3541</del></p><p><del>zoj3548</del></p><p>hdu5921</p><p>poj2054</p><p>bzoj3219</p><p><del>hdu6323</del></p><p>无源汇最小费用流</p><p>无源汇上下界最小费用流</p><p>有源汇上下界最小费用流</p><p>bzoj3532(退流科技？)</p><p>cf739E</p><p>决策单调性：</p><p><del>bzoj2369</del></p><p>bzoj小q的礼物</p><p>bzoj5311</p><p><a href="https://blog.csdn.net/lchi1997/article/details/77860085" target="_blank" rel="noopener">https://blog.csdn.net/lchi1997/article/details/77860085</a></p><p><a href="https://blog.csdn.net/alan_cty/article/details/78360603" target="_blank" rel="noopener">https://blog.csdn.net/alan_cty/article/details/78360603</a></p><p>bzoj4456</p><p>poj2054</p><p>nowcoder4B重做</p><p>bzoj1877</p><p>bzoj1922</p><p>bzoj2051/bzoj2117</p><p>二分图匹配</p><p>最小路径覆盖，最小点覆盖，最大独立点集</p><p>贪心差不多可以开坑了。。有几个资料可以看看。。</p><p><del><a href="https://www.zhihu.com/question/64862744" target="_blank" rel="noopener">https://www.zhihu.com/question/64862744</a></del></p><p><a href="https://blog.csdn.net/qq_32400847/article/details/51336300" target="_blank" rel="noopener">https://blog.csdn.net/qq_32400847/article/details/51336300</a></p><p>流水线调度问题（Johnson算法）</p><p>然后那么多比赛好像每场都是窝的锅比较多。。然后。。就没补完qaq</p><p>记一下防止忘记。。</p><p>概率dp就差一道辣。。</p><p>看图论，学一些建图姿势（主要针对最短路等），还有复习网络流（预计一星期）</p><p>然后主要刷hiholoj上的dp和图论。。（一个巨坑啊。。）</p><p>图论看看<a href="https://www.cnblogs.com/qscqesze/p/4547000.html" target="_blank" rel="noopener">图论500题</a>吧。。</p><p>还有好多知识点。。</p><p>具体有：</p><p>反图补图</p><p>次小生成树</p><p>图的割点、桥和双联通分支</p><p>割点和桥</p><p>边双连通分支</p><p>点双连通分支</p><p>最小树形图</p><p>生成树计数</p><p>二分图多重匹配</p><p>二分图最大权匹配（KM算法）</p><p>2-SAT</p><p>哈曼顿最小生成树</p><p>一般图匹配带花树（等等？！）</p><p>还有很多基础dp学不深。。</p><p>以上弄完做几道贪心。。（预计一星期）</p><p>再然后就是填分块大坑（预计三星期）最少入门，尽量熟练和运用</p><p>接下来还有扫描线，再补上之前的计算几何，包括三角剖分（预计一星期半）</p><p>数位dp：</p><p>LightOJ1205求区间[a,b]的回文数个数。</p><p>hdu3886求满足符号串的数字个数。</p><p>HDU4352严格上升子序列的长度为K的个数。</p><p>ural 1057 数位统计</p><p>codeforces215E周期数</p><p>codeforces258B在1-m中任选7个数，要使前六个数字中的“4”,”7”之和小于第七个的，</p><p>HDU4507 和7无关数的平方和</p><p>Zoj2599 数位统计（见题意）</p><p>zoj3162分形、自相似</p><p>ZOJ3494 BCD Code(AC自动机+数位DP)</p><p>等扫描线学了再做吧。。</p><p>五。计算几何背景，实际上解题的关键是其他问题（数据结构、组合数学，或者是枚举思想）</p><p>若干道经典的离散化＋扫描线的题目，ACM选手必做题目</p><p>POJ 1151 Atlantis （推荐）<br><a href="http://acm.pku.edu.cn/JudgeOnline/problem?id=1151" target="_blank" rel="noopener">http://acm.pku.edu.cn/JudgeOnline/problem?id=1151</a><br>POJ 1389 Area of Simple Polygons<br><a href="http://acm.pku.edu.cn/JudgeOnline/problem?id=1389" target="_blank" rel="noopener">http://acm.pku.edu.cn/JudgeOnline/problem?id=1389</a><br>矩形离散化，线段树处理，矩形面积求交</p><p>POJ 1177 Picture （推荐）<br><a href="http://acm.pku.edu.cn/JudgeOnline/problem?id=1177" target="_blank" rel="noopener">http://acm.pku.edu.cn/JudgeOnline/problem?id=1177</a><br>矩形离散化，线段树处理，矩形交的周长，这个题目的数据比较强。线段树必须高效。 </p><p>POJ 3565 Ants （推荐）<br><a href="http://acm.pku.edu.cn/JudgeOnline/problem?id=3565" target="_blank" rel="noopener">http://acm.pku.edu.cn/JudgeOnline/problem?id=3565</a><br>计算几何中的调整思想，有点像排序。要用到线段相交的判断。<br>详见：<a href="http://hi.baidu.com/novosbirsk/blog/item/fb668cf0f362bec47931aae2.html" target="_blank" rel="noopener">http://hi.baidu.com/novosbirsk/blog/item/fb668cf0f362bec47931aae2.html</a></p><p>POJ 3695 Rectangles<br><a href="http://acm.pku.edu.cn/JudgeOnline/problem?id=3695" target="_blank" rel="noopener">http://acm.pku.edu.cn/JudgeOnline/problem?id=3695</a><br>又是矩形交的面积，但是由于是多次查询，而且矩形不多，使用组合数学中的容斥原理解决之最适合。线段树是通法，但是除了线段树，还有其他可行的方法。</p><p>POJ 2002 Squares<br><a href="http://acm.pku.edu.cn/JudgeOnline/problem?id=2002" target="_blank" rel="noopener">http://acm.pku.edu.cn/JudgeOnline/problem?id=2002</a><br>枚举思想，求平面上若干个点最多能组成多少个正方形，点的Hash<br>2.1 三角剖分<br>三角剖分这个东西貌似去年流行了一下，高校联赛时某U连续出了两次。实际上对多边形进行三角剖分是一个很常见的算法思想，因为三角形是一个比较简单的凸多边形，可以对两个三角形比较容易地求公共面积，这也是三角剖分最常见的用途。对这个算法进行扩展，就可以求两个简单多边形的面积交了。主要是理解有向面积的概念。</p><p>第一类是圆与三角形的相交，主要做法是分情况讨论。<br>POJ    3675    Telescope    三角形剖分，圆与三角形的交<br>POJ    2986    A Triangle and a Circle    三角形剖分，圆与三角形的交<br>ZOJ   2675    Little Mammoth    三角形剖分，圆与三角形的交</p><p>第二类是多边形与多边形相交。<br>HDU    3060    Area2    简单多边形面积并，三角剖分</p><p>三角形剖分的另一种变种是梯形剖分，应用起来稍有局限性，但是比三角形剖分好写。<br>POJ    3148    ASCII Art    多边形梯形剖分，半平面交</p><p>多边形的重心问题，也是三角形剖分的应用：<br>CII      4426    Blast the Enemy!</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
