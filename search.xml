<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>hdu6184(三元环)</title>
      <link href="/hdu6184/"/>
      <url>/hdu6184/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6184" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=6184</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>统计子图 $G={(A,B,C,D),(AB,BC,CD,DA,AC)}$ 的个数</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>这就是两个有公共边的三元环，那么只要对公共边统计贡献就可以了，如果公共边被 $t$ 个三元环包含，那么其产生的贡献为 $\frac{t(t-1)}{2}​$ ，所以在统计三元环的时候直接对边权进行标记即可</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-6</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y)/2</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 100005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 200005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pi 3.1415926535897931</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span>&#123;</span><span class="hljs-keyword">int</span> x,t;edge*next;&#125;e[nm],*h[NM];<br><span class="hljs-keyword">int</span> n,m,b[NM],v[NM],ans[nm],_v[NM];<br>ll s;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d"</span>,&amp;n,&amp;m))&#123;<br>inc(i,<span class="hljs-number">1</span>,n)h[i]=<span class="hljs-number">0</span>,b[i]=<span class="hljs-number">0</span>,v[i]=<span class="hljs-number">0</span>;s=<span class="hljs-number">0</span>;<br>inc(i,<span class="hljs-number">1</span>,m)e[i].x=read(),e[i].t=read(),b[e[i].x]++,b[e[i].t]++,ans[i]=<span class="hljs-number">0</span>;<br>inc(i,<span class="hljs-number">1</span>,m)&#123;<br>    <span class="hljs-keyword">if</span>(b[e[i].t]&gt;b[e[i].x]||(b[e[i].x]==b[e[i].t]&amp;&amp;e[i].x&gt;e[i].t))swap(e[i].x,e[i].t);<br>    e[i].next=h[e[i].x];h[e[i].x]=e+i;<br>&#125;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _link(x) for(edge *k=h[x];k;k=k-&gt;next)</span><br>inc(i,<span class="hljs-number">1</span>,n)&#123;<br>    link(i)v[j-&gt;t]=i,_v[j-&gt;t]=j-e;<br>    link(i)&#123;<br>_link(j-&gt;t)<span class="hljs-keyword">if</span>(v[k-&gt;t]==i)ans[j-e]++,ans[k-e]++,ans[_v[k-&gt;t]]++;<br>    &#125;<br>&#125;<br>inc(i,<span class="hljs-number">1</span>,m)s+=<span class="hljs-number">1l</span>l*ans[i]*(ans[i]<span class="hljs-number">-1</span>)/<span class="hljs-number">2</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,s);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xdoj1187(三元环计数)</title>
      <link href="/xdoj1187/"/>
      <url>/xdoj1187/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://acm.xidian.edu.cn/problem.php?id=1187" target="_blank" rel="noopener">http://acm.xidian.edu.cn/problem.php?id=1187</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>裸三元环计数</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>三元环计数的方法是将无向图变成有向图，对每条边，从度小的点连向度大的点，如果度相同则按编号的大小连边，这样保证了这个图是个 $DAG$ ，此时三元环就被表示成类似于 $G={(A,B,C),(AB,AC,BC)}$ 这样的玩意</p><p>然后枚举点 $u$，标记 $u$ 的出点。枚举 $u$ 的出边，再枚举出点 $v$ 的出边，然后如果 $v$ 的出点被标记，那么就必定形成一个三元环</p><p>这个算法的复杂度是 $O(m^{1.5})$ ,证明如下：</p><p>首先这个图中每个点的出度都不大于 $\sqrt{m}$ 。假设存在大于 $\sqrt{m}$ 的点，那么其出边也必然大于 $\sqrt{m}$ ，这样边数就大于 $m$ 了，矛盾。</p><p>那么这样暴力的复杂度就是 $O(m^{1.5})$</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-6</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y)/2</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 100005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 200005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pi 3.1415926535897931</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span>&#123;</span><span class="hljs-keyword">int</span> x,t;edge*next;&#125;e[nm],*h[NM];<br><span class="hljs-keyword">int</span> n,m,s,b[NM],v[NM];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> _=read();<span class="hljs-keyword">while</span>(_--)&#123;<br>inc(i,<span class="hljs-number">1</span>,n)v[i]=<span class="hljs-number">0</span>,h[i]=<span class="hljs-number">0</span>,b[i]=<span class="hljs-number">0</span>;<br>s=<span class="hljs-number">0</span>;<br>n=read();m=read();<br>inc(i,<span class="hljs-number">1</span>,m)e[i].x=read(),e[i].t=read(),b[e[i].x]++,b[e[i].t]++;<br>inc(i,<span class="hljs-number">1</span>,m)&#123;<br>    <span class="hljs-keyword">if</span>(b[e[i].x]&gt;b[e[i].t]||(b[e[i].x]==b[e[i].t]&amp;&amp;e[i].x&gt;e[i].t))swap(e[i].x,e[i].t);<br>    e[i].next=h[e[i].x];h[e[i].x]=e+i;<br>&#125;<br>inc(i,<span class="hljs-number">1</span>,n)&#123;<br>    link(i)v[j-&gt;t]=i;<br>    link(i)<span class="hljs-keyword">for</span>(edge*k=h[j-&gt;t];k;k=k-&gt;next)<span class="hljs-keyword">if</span>(v[k-&gt;t]==i)s++;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,s);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bzoj4609(最短路+贪心+wqs二分+决策单调性)</title>
      <link href="/bzoj4609/"/>
      <url>/bzoj4609/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=4609" target="_blank" rel="noopener">https://www.lydsy.com/JudgeOnline/problem.php?id=4609</a></p><p><a href="https://codeforces.com/gym/101242/problem/B" target="_blank" rel="noopener">https://codeforces.com/gym/101242/problem/B</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>$bzoj$ 题面有误，推荐原题面</p><p>给定 $n$ 个点和 $r$ 条边的<strong>有向图</strong>。若将 $i$ 点信息传输到 $j$ 点，那么要从 $i$ 走向 $b+1$ 再走向 $j$ 。现把前 $b$ 个点分成 $s$ 个组，每一个组两两之间要传递一次信息，问距离总和的最小值。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>这个题意感觉比较沙雕。。显然只有这 $b$ 个点的事情，那么先对 $b+1$ 正反跑一遍最短路，然后发现每个点的贡献等于 (所在组的大小-1)*正反距离和</p><p>然后将 $b$个点分成 $s$ 个组实在是很头疼，然而如果每个组的大小固定，我们必定是将距离和大的放在比较小的组里面，所以可以发现分组的时候总是可以优先考虑距离和大的点，那么可以根据距离和排序之后，转化成对序列的分割</p><p>然后就可以 $DP$ 了，而且可以用 $wqs$ 二分优化</p><p>然后设 $dp[i]$ 为到 $i$ 的最小距离，$d[i]$ 为距离和的前缀和，有<br>$ dp[i]=max \{ dp[j]+(i-j-1)(d[i]-d[j])+t \}$<br>发现后面的 $cost$ 是个凸函数，可以用决策单调性优化</p><p>复杂度为 $O(blogblogC)$</p><p>卡进 $\#1​$ 真开心_(:3 」∠)_</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-6</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 5005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 100005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pi 3.1415926535897931</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span>&#123;</span><span class="hljs-keyword">int</span> t,v;edge*next;&#125;e[nm],*h[NM],*o=e,*_h[NM];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y,<span class="hljs-keyword">int</span> v)</span></span>&#123;o-&gt;t=y;o-&gt;v=v;o-&gt;next=h[x];h[x]=o++;&#125;<br><span class="hljs-keyword">void</span> _add(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y,<span class="hljs-keyword">int</span> v)&#123;o-&gt;t=y;o-&gt;v=v;o-&gt;next=_h[x];_h[x]=o++;&#125;<br><span class="hljs-keyword">int</span> n,m,_p,_x,_y,qh,qt,q[NM],<span class="hljs-keyword">_t</span>,v[NM],_n,_d[NM],__d[NM];<br>ll d[NM],dp[NM],ans;<br><span class="hljs-keyword">int</span> p[NM];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tmp</span>&#123;</span><br>    <span class="hljs-keyword">int</span> x;ll d;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-keyword">const</span> tmp&amp;o)<span class="hljs-keyword">const</span>&#123;<span class="hljs-keyword">return</span> d&gt;o.d;&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dij</span><span class="hljs-params">()</span></span>&#123;<br>    priority_queue&lt;tmp&gt;q;<br>    inc(i,<span class="hljs-number">1</span>,n)__d[i]=<span class="hljs-number">1e9</span>;<br>    q.push(tmp&#123;_n+<span class="hljs-number">1</span>,__d[_n+<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>&#125;);<br>    <span class="hljs-keyword">while</span>(!q.empty())&#123;<br><span class="hljs-keyword">int</span> t=q.top().x,cnt=q.top().d;q.pop();<br><span class="hljs-keyword">if</span>(cnt!=__d[t])<span class="hljs-keyword">continue</span>;<br>link(t)<span class="hljs-keyword">if</span>(__d[j-&gt;t]&gt;__d[t]+j-&gt;v)q.push(tmp&#123;j-&gt;t,__d[j-&gt;t]=__d[t]+j-&gt;v&#125;);<br>    &#125;<br>&#125;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _link(x) for(edge *j=_h[x];j;j=j-&gt;next)</span><br><span class="hljs-keyword">void</span> _dij()&#123;<br>    priority_queue&lt;tmp&gt;q;<br>    inc(i,<span class="hljs-number">1</span>,n)_d[i]=<span class="hljs-number">1e9</span>;<br>    q.push(tmp&#123;_n+<span class="hljs-number">1</span>,_d[_n+<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>&#125;);<br>    <span class="hljs-keyword">while</span>(!q.empty())&#123;<br><span class="hljs-keyword">int</span> t=q.top().x,cnt=q.top().d;q.pop();<br><span class="hljs-keyword">if</span>(cnt!=_d[t])<span class="hljs-keyword">continue</span>;<br>_link(t)<span class="hljs-keyword">if</span>(_d[j-&gt;t]&gt;_d[t]+j-&gt;v)q.push(tmp&#123;j-&gt;t,_d[j-&gt;t]=_d[t]+j-&gt;v&#125;);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(ll t)</span></span>&#123;<br>    q[qh=qt=<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;v[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br>    inc(i,<span class="hljs-number">1</span>,n)&#123;<br><span class="hljs-keyword">while</span>(qh&lt;qt&amp;&amp;v[q[qh+<span class="hljs-number">1</span>]]&lt;=i)qh++;<br>v[q[qh]]=max(v[q[qh]],i+<span class="hljs-number">1</span>);<br>dp[i]=dp[q[qh]]+(i-q[qh]<span class="hljs-number">-1</span>)*(d[i]-d[q[qh]])+t;<br>p[i]=p[q[qh]]+<span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span>(qh&lt;=qt&amp;&amp;dp[q[qt]]+(v[q[qt]]-q[qt]<span class="hljs-number">-1</span>)*(d[v[q[qt]]]-d[q[qt]])&gt;=dp[i]+(v[q[qt]]-i<span class="hljs-number">-1</span>)*(d[v[q[qt]]]-d[i]))qt--;<br><span class="hljs-keyword">int</span> s=i;<br><span class="hljs-keyword">if</span>(qh&lt;=qt)&#123;<br>    s=n+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> x=v[q[qt]]+<span class="hljs-number">1</span>,y=n;x&lt;=y;)&#123;<br><span class="hljs-keyword">int</span> mid=x+y&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(dp[q[qt]]+(mid-q[qt]<span class="hljs-number">-1</span>)*(d[mid]-d[q[qt]])&gt;=dp[i]+(mid-i<span class="hljs-number">-1</span>)*(d[mid]-d[i]))<br>    s=mid,y=mid<span class="hljs-number">-1</span>;<span class="hljs-keyword">else</span> x=mid+<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">if</span>(s&lt;=n)v[i]=s,q[++qt]=i;<br>    &#125;<br>    <span class="hljs-comment">//printf("%lld %lld %d\n",t,dp[n],p[n]);</span><br>    <span class="hljs-keyword">return</span> p[n]&lt;m;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();_n=read();m=read();_p=read();<br>    <span class="hljs-keyword">while</span>(_p--)&#123;_x=read();_y=read();<span class="hljs-keyword">_t</span>=read();add(_x,_y,<span class="hljs-keyword">_t</span>);_add(_y,_x,<span class="hljs-keyword">_t</span>);&#125;<br>    dij();_dij();<br>    <span class="hljs-comment">//inc(i,1,n)printf("%d ",_d[i]);putchar('\n');</span><br>    n=_n;<br>    inc(i,<span class="hljs-number">1</span>,n)d[i]+=__d[i]+_d[i];<br>    sort(d+<span class="hljs-number">1</span>,d+<span class="hljs-number">1</span>+n);reverse(d+<span class="hljs-number">1</span>,d+<span class="hljs-number">1</span>+n);<br>    inc(i,<span class="hljs-number">1</span>,n)d[i]+=d[i<span class="hljs-number">-1</span>];<br>    <span class="hljs-keyword">for</span>(ll x=<span class="hljs-number">0</span>,y=d[n]*n;x&lt;=y;)&#123;<br>ll mid=x+y&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(check(mid))y=mid<span class="hljs-number">-1</span>;<span class="hljs-keyword">else</span> ans=dp[n]-mid*m,x=mid+<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>loj2478/bzoj5252(dp凸优化/wqs二分)</title>
      <link href="/loj2478/"/>
      <url>/loj2478/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://loj.ac/problem/2478" target="_blank" rel="noopener">https://loj.ac/problem/2478</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定 $n$ 个点的树 $(n\le3e5)$ ，去掉 $k$ 条边，再用 $k$ 条边权为 $0$ 的边将几个联通块连成树，求这个树的直径的最大值。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>这个问题等价于选 $k+1$ 个联通块的直径和的最大值，等价于选 $k+1$ 个不相交的链</p><p>那么设 $d[i][j]$ 为到 $i$ 点选 $j$ 条链的最大值，然后就是普通的树背包，可以用树背包优化成 $O(n^2)$</p><p>然后状态数过大需要优化。。</p><p>发现若固定 $i​$ ，则 $f(j)=d[i][j]​$ 是个凸函数，因为链选太少会阻碍我们选取更多边的权值，而链选太多我们就要把一些边给割去，因此由于这两个因素的作用，随着 $j​$ 的增大 $f(j)​$ 的趋势大概是先增大后减小(证明并不严格)</p><p>然后就可以凸优化了，凸优化的资料参见<a href="https://www.cnblogs.com/nietzsche-oier/p/9073444.html" target="_blank" rel="noopener">这里</a></p><p>凸优化基于 $f(j)$ 是凸函数这一性质。</p><p>设 $g[i]=\max\limits_{j} d[i][j]​$</p><p>若对 $i=n$ ， $f(j)$ 的最值 $f_{max}$ 在 $m$ 处取得(假设我们最终要求得 $f[n][m]$)，那么直接对 $g[i]$ 进行 $DP$ 即可求解</p><p>然而 $f_{max}$ 并不一定在 $m$ 处取得，那么我们就要想办法让极值点往 $m$ 偏移，用的方法就是构造 $h(i)=g[i]-it$ ，使用适合的 $t$ 就可以让极值点偏移到 $m$ ，为了选出适合的 $t$ ，我们就要对 $t$ 进行二分，这就是所谓的 <strong>$wqs$ 二分</strong> 。</p><p>然后复杂度就降成 $O(nlogC)$</p><p><br></p><p>一个细节就是二分的边界，会存在 $t=c$ ，极值点 $&lt;m$ ； $t=c+1$ 极值点 $&gt;m$ 之类的情况，这个时候对所有极值点 $&lt;m$(或 $&gt;m$) 的情况，我们依旧认为他可以代表等于 $m$ 的情况，通过构造一个空集加进原来的方案，在此基础上求最值就可以了，所以可以 $wqs$ 二分可以使用更快的整数二分</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-6</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y)/2</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 300005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 600005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pi 3.1415926535897931</span><br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">3e11</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span>&#123;</span><span class="hljs-keyword">int</span> t,v;edge*next;&#125;e[nm],*h[NM],*o=e;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y,<span class="hljs-keyword">int</span> v)</span></span>&#123;o-&gt;v=v;o-&gt;t=y;o-&gt;next=h[x];h[x]=o++;&#125;<br><span class="hljs-keyword">int</span> n,k,_x,_y;<br>ll <span class="hljs-keyword">_t</span>,s;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tmp</span>&#123;</span><br>    ll x;<span class="hljs-keyword">int</span> y;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-keyword">const</span> tmp&amp;o)<span class="hljs-keyword">const</span>&#123;<span class="hljs-keyword">return</span> x&lt;o.x||(x==o.x&amp;&amp;y&gt;o.y);&#125;<br>    tmp <span class="hljs-keyword">operator</span>+(<span class="hljs-keyword">const</span> tmp&amp;o)<span class="hljs-keyword">const</span>&#123;<span class="hljs-keyword">return</span> tmp&#123;x+o.x,y+o.y&#125;;&#125;<br>    <span class="hljs-keyword">void</span> <span class="hljs-keyword">operator</span>+=(<span class="hljs-keyword">const</span> tmp&amp;o)&#123;x+=o.x;y+=o.y;&#125;<br>&#125;d[NM][<span class="hljs-number">3</span>],ans;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> f)</span></span>&#123;<br>    d[x][<span class="hljs-number">0</span>]=tmp&#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;;d[x][<span class="hljs-number">1</span>]=d[x][<span class="hljs-number">2</span>]=tmp&#123;<span class="hljs-keyword">_t</span>,<span class="hljs-number">1</span>&#125;;<br>    link(x)<span class="hljs-keyword">if</span>(j-&gt;t!=f)&#123;<br>dfs(j-&gt;t,x);<br>d[x][<span class="hljs-number">2</span>]+=max(d[j-&gt;t][<span class="hljs-number">0</span>],max(d[j-&gt;t][<span class="hljs-number">1</span>],d[j-&gt;t][<span class="hljs-number">2</span>]));<br>d[x][<span class="hljs-number">2</span>]=max(d[x][<span class="hljs-number">2</span>],d[x][<span class="hljs-number">1</span>]+d[j-&gt;t][<span class="hljs-number">1</span>]+tmp&#123;j-&gt;v-<span class="hljs-keyword">_t</span>,<span class="hljs-number">-1</span>&#125;);<br>d[x][<span class="hljs-number">2</span>]=max(d[x][<span class="hljs-number">2</span>],d[x][<span class="hljs-number">1</span>]+d[j-&gt;t][<span class="hljs-number">0</span>]+tmp&#123;j-&gt;v,<span class="hljs-number">0</span>&#125;);<br>d[x][<span class="hljs-number">1</span>]+=max(d[j-&gt;t][<span class="hljs-number">0</span>],max(d[j-&gt;t][<span class="hljs-number">1</span>],d[j-&gt;t][<span class="hljs-number">2</span>]));<br>d[x][<span class="hljs-number">1</span>]=max(d[x][<span class="hljs-number">1</span>],d[x][<span class="hljs-number">0</span>]+d[j-&gt;t][<span class="hljs-number">1</span>]+tmp&#123;j-&gt;v,<span class="hljs-number">0</span>&#125;);<br>d[x][<span class="hljs-number">1</span>]=max(d[x][<span class="hljs-number">1</span>],d[x][<span class="hljs-number">0</span>]+d[j-&gt;t][<span class="hljs-number">0</span>]+tmp&#123;j-&gt;v+<span class="hljs-keyword">_t</span>,<span class="hljs-number">1</span>&#125;);<br>d[x][<span class="hljs-number">0</span>]+=max(d[j-&gt;t][<span class="hljs-number">0</span>],max(d[j-&gt;t][<span class="hljs-number">1</span>],d[j-&gt;t][<span class="hljs-number">2</span>]));<br>    &#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//freopen("data.in","r",stdin);</span><br>    n=read();k=read()+<span class="hljs-number">1</span>;<br>    inc(i,<span class="hljs-number">2</span>,n)&#123;_x=read();_y=read();<span class="hljs-keyword">_t</span>=read();add(_x,_y,<span class="hljs-keyword">_t</span>);add(_y,_x,<span class="hljs-keyword">_t</span>);&#125;<br>    <span class="hljs-keyword">for</span>(ll x=-inf,y=inf;x&lt;=y;)&#123;<br><span class="hljs-keyword">_t</span>=x+y&gt;&gt;<span class="hljs-number">1</span>;<br>dfs(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br>ans=max(d[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>],max(d[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>],d[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>]));<br><span class="hljs-comment">//printf("%d %lld\n",ans.y,_t);</span><br><span class="hljs-keyword">if</span>(ans.y&lt;=k)x=<span class="hljs-keyword">_t</span>+<span class="hljs-number">1</span>,s=ans.x-<span class="hljs-keyword">_t</span>*k;<br><span class="hljs-keyword">else</span> y=<span class="hljs-keyword">_t</span><span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-comment">//printf("%lld %d\n",ans.x,ans.y);</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,s);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>绀珠传Normal初通</title>
      <link href="/gzz-n/"/>
      <url>/gzz-n/</url>
      
        <content type="html"><![CDATA[<p><strong>$rpy$ 下载地址：</strong> <a href="/others/th15_02.rpy">$here$</a></p><p><strong>机体：</strong>兔机</p><p>以前是无欠魔机通的。。一是没有抱 $B​$ 撞这个顾虑，二是稍难的符卡可以通过反复练习 $+​$ 运气混过去。。考虑的只有 $bomb​$ 数的控制，所以磨几天就通了。。</p><p>后来发现兔机的 $bomb$ 能够有效解决窝这个职业抱 $B$ 撞选手，试了一下效果非常不错，在 $5$ 面之前还是能接近满残的，混 $4$ 面简直爽翻 <del>(5​ 面更爽)</del> 。问题就主要集中在 $5$ 面，道中缺少像苗机那样的优势，所以要多撞几发，不过这几发其实问题不大 $23333$ 。最头痛的还是皮丝 $QAQ$ ，不能 $1B$ 带走就只能跟着耗了，加上判定点大一二非都相当头痛，所以直接当 $6$ 面打，规划好那个地方主动撞什么的，把 $miss$ 数尽可能降低吧。降不下来也无所谓，不要来那种二连顺带抱 $B$ 撞就可以。$6$ 面还是由于兔子太肥能收的基本没有，所以靠规划混过去。</p><p>发现三面有些姿势符自己还不会，以后看 $rpy$ 练练吧。。</p><p>最后例行上图：</p><p><img src="/images/gzz-n.bmp" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> stg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cf1117D(dp+矩阵快速幂)</title>
      <link href="/cf1117D/"/>
      <url>/cf1117D/</url>
      
        <content type="html"><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定魔法珠子和普通珠子，一个魔法珠子能分裂成 $m$ 个普通珠子，普通珠子不能再分裂，你要设计一个珠子的序列，选择其中的一些魔法珠子分裂，问能够分裂成 $n$ 个珠子的方案数。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>打的时候直接推出了组合数式子，然后对着式子自闭了半天。。</p><p>如果只考虑最后一个珠子的情况，那么可以设 $d[n]$ 为形成 $n$ 个珠子的方案数，那么就有<br>$$<br>d[n]=d[n-1]+d[n-m]<br>$$<br>这个直接矩阵快速幂加速就可以了。。</p><p>题目不难，就是想歪了。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3> <figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-6</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y)/2</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 105</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 170005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pi 3.1415926535897931</span><br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><br>ll n,m;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mat</span>&#123;</span><span class="hljs-keyword">int</span> n,m;ll a[NM][NM];&#125;null,ans,t;<br>mat <span class="hljs-keyword">operator</span>*(<span class="hljs-keyword">const</span> mat&amp;x,<span class="hljs-keyword">const</span> mat&amp;y)&#123;<br>    mat s;s.n=x.n;s.m=y.m;mem(s.a);<br>    inc(i,<span class="hljs-number">1</span>,s.n)inc(j,<span class="hljs-number">1</span>,s.m)inc(k,<span class="hljs-number">1</span>,x.m)(s.a[i][j]+=x.a[i][k]*y.a[k][j]%inf)%=inf;<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br><span class="hljs-function">mat <span class="hljs-title">qpow</span><span class="hljs-params">(mat x,ll t)</span></span>&#123;<span class="hljs-keyword">return</span> t?qpow(sqr(x),t&gt;&gt;<span class="hljs-number">1</span>)*(t&amp;<span class="hljs-number">1</span>?x:null):null;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();m=read();<br>    ans.n=m;ans.m=<span class="hljs-number">1</span>;<br>    inc(i,<span class="hljs-number">1</span>,m)ans.a[i][<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    t.n=t.m=m;<br>    inc(i,<span class="hljs-number">1</span>,m<span class="hljs-number">-1</span>)t.a[i][i+<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    t.a[m][<span class="hljs-number">1</span>]=t.a[m][m]=<span class="hljs-number">1</span>;<br>    null.n=null.m=m;<br>    inc(i,<span class="hljs-number">1</span>,m)null.a[i][i]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(n&gt;=m)ans=qpow(t,n-m+<span class="hljs-number">1</span>)*ans;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans.a[m][<span class="hljs-number">1</span>]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mw Winter Camp Day4 DivB E(bfs+卡常)</title>
      <link href="/mswcE4b/"/>
      <url>/mswcE4b/</url>
      
        <content type="html"><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定 $n$ 个点 $m$ 条边的图 $(n\le900,m\le150000)$ ，问去掉每条边之后的最短路，边权均为 $1$</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>考虑 $u$ 的最短路径树，去掉边 $&lt;u,v&gt;$ 之后只影响被边 $&lt;u,v&gt;$ 支配的点，初步确定是 $v$ 的子树，此时到 $v$ 的最短距离无非是从其他子树转移过来，所以可以对 $v$ 的子树反向做 $bfs$ ，然后枚举从其他子树过渡到该子树的边就可以了。。复杂度为 $O(nm)$</p><p>复杂度还是比较危险的，事实上也 $T$ 了，需要卡卡常。。</p><ul><li>答案为 $2$ 可以直接 $break$ (对稠密图非常有效)</li><li>加读入优化和 $inline$</li><li>要通过各种姿势把 $bfs$ 的次数卡在 $2$ 次以内</li><li>打标记避免重复入队(即使只有 $2$ 次。。)</li></ul><p>其他的优化方法也不太记得了，这个代码估计也是在 $TLE$ 的边缘大鹏展翅，去了 $inline$ 就 $T$ 的那种。。</p><p>少有的卡常体验，一直卡常一直爽～～</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-6</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y)/2</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 905</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 170005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pi 3.1415926535897931</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><br><br><br><span class="hljs-keyword">int</span> d[NM],_d[NM],v[NM],n,m,_x,_y;<br><span class="hljs-keyword">bool</span> _v[NM];<br><span class="hljs-keyword">int</span> ans[nm];<br><span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt;q;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span>&#123;</span><span class="hljs-keyword">int</span> t,v;edge*next;&#125;e[<span class="hljs-number">2</span>*nm],*h[NM],*o=e,*_h[NM];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y,<span class="hljs-keyword">int</span> v)</span></span>&#123;o-&gt;v=v;o-&gt;t=y;o-&gt;next=h[x];h[x]=o++;&#125;<br><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> _add(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)&#123;o-&gt;t=y;o-&gt;next=_h[x];_h[x]=o++;&#125;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _link(x) for(edge*j=_h[x];j;j=j-&gt;next)</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> ans=inf;<br>    q.push(u);_d[u]=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(!q.empty())&#123;<br><span class="hljs-keyword">int</span> t=q.front();q.pop();<br>_link(t)<span class="hljs-keyword">if</span>(v[j-&gt;t]==u)&#123;<br>    <span class="hljs-keyword">if</span>(_d[j-&gt;t]==inf)_d[j-&gt;t]=_d[t]+<span class="hljs-number">1</span>,q.push(j-&gt;t);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(d[j-&gt;t])&#123;ans=min(ans,d[j-&gt;t]+_d[t]+<span class="hljs-number">1</span>);<span class="hljs-keyword">if</span>(ans==<span class="hljs-number">2</span>)<span class="hljs-keyword">break</span>;&#125;<br><span class="hljs-keyword">if</span>(ans==<span class="hljs-number">2</span>)<span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(!q.empty())q.pop();<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//freopen("data.in","r",stdin);</span><br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d"</span>,&amp;n,&amp;m)&amp;&amp;n&amp;&amp;m)&#123;<br>    inc(i,<span class="hljs-number">1</span>,n)_h[i]=h[i]=<span class="hljs-number">0</span>;o=e;<br>    inc(i,<span class="hljs-number">1</span>,m)&#123;_x=read();_y=read();add(_x,_y,i);_add(_y,_x);&#125;<br>    inc(i,<span class="hljs-number">1</span>,n)&#123;<br>inc(j,<span class="hljs-number">1</span>,n)d[j]=_d[j]=inf,v[j]=<span class="hljs-number">0</span>;<br>link(i)q.push(j-&gt;t),d[j-&gt;t]=<span class="hljs-number">1</span>,v[j-&gt;t]=j-&gt;t,_v[j-&gt;t]++;<br>d[i]=<span class="hljs-number">0</span>;v[i]=<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">while</span>(!q.empty())&#123;<br>    <span class="hljs-keyword">int</span> t=q.front();q.pop();_v[t]=<span class="hljs-literal">false</span>;<br>    link(t)<span class="hljs-keyword">if</span>(!v[j-&gt;t])v[j-&gt;t]=v[t],d[j-&gt;t]=d[t]+<span class="hljs-number">1</span>,q.push(j-&gt;t),_v[j-&gt;t]++;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(v[j-&gt;t]&gt;<span class="hljs-number">0</span>&amp;&amp;v[j-&gt;t]!=v[t]&amp;&amp;d[j-&gt;t]==d[t]+<span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">if</span>(!_v[j-&gt;t])q.push(j-&gt;t);<br>v[j-&gt;t]=<span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;<br>link(i)ans[j-&gt;v]=bfs(j-&gt;t);<br>    &#125;<br>    inc(i,<span class="hljs-number">1</span>,m)<span class="hljs-keyword">if</span>(ans[i]&lt;inf)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d "</span>,ans[i]);<span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">"0 "</span>);<span class="hljs-built_in">putchar</span>(<span class="hljs-string">'\n'</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> bfs </tag>
            
            <tag> 最短路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mw Winter Camp Day1 K(分数规划/维护凸包+二分)</title>
      <link href="/mswcK1/"/>
      <url>/mswcK1/</url>
      
        <content type="html"><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定 $n\times n$ $(n\le300)$ 的矩阵，求子矩阵，使得 $\frac{子矩阵和}{周长}$ 最大</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>这个形式显然可以分数规划，二分答案 $t$ ，变成求 子矩阵和$-t$周长 的最大值，压成一维后，宽固定，长的代价可以均匀分到每个元素上，就变成最大子段和了，复杂度 $O(n^3logC)$ </p><p>然而浮点数二分次数较多，被出题人卡常了。。</p><p>然后 $JSZX11556$ 说压成一行之后会变成<br>$$<br>\frac{1}{2}max{\frac{sum[r]-sum[l]}{h+r-l}}<br>$$<br>相当于求点 $(h+r,sum[r])$ 与 $(l,sum[l])$ 的斜率的最大值，由于 $x$ 和 $y$ 都是递增的所以可以转化为维护下凸包，然后二分斜率求斜率最大值，复杂度 $O(n^3logn)$ ，而且由于是整数运算速度优秀得一批</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-6</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y)/2</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 305</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 32768</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pi 3.1415926535897931</span><br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">1e16</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><br><br><br><span class="hljs-keyword">int</span> n,_x,_y,__x,__y,q[NM],qh,qt,ca;<br>ll b[NM][NM],a[NM];<br><span class="hljs-keyword">double</span> ans;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;n)&amp;&amp;n)&#123;<br>ans=-inf;<br>inc(i,<span class="hljs-number">1</span>,n)inc(j,<span class="hljs-number">1</span>,n)b[i][j]=read()+b[i<span class="hljs-number">-1</span>][j];<br>inc(l,<span class="hljs-number">1</span>,n)inc(r,l,n)&#123;<br>    inc(j,<span class="hljs-number">1</span>,n)a[j]=b[r][j]-b[l<span class="hljs-number">-1</span>][j]+a[j<span class="hljs-number">-1</span>];<br>    q[qh=qt=<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br>    inc(i,<span class="hljs-number">1</span>,n)&#123;<br><span class="hljs-keyword">int</span> s=qh<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> x=qh,y=qt<span class="hljs-number">-1</span>;x&lt;=y;)<br>    <span class="hljs-keyword">if</span>((a[q[mid+<span class="hljs-number">1</span>]]-a[q[mid]])*(r-l+<span class="hljs-number">1</span>+i-q[mid+<span class="hljs-number">1</span>])&lt;=(a[i]-a[q[mid+<span class="hljs-number">1</span>]])*(q[mid+<span class="hljs-number">1</span>]-q[mid]))<br>s=mid,x=mid+<span class="hljs-number">1</span>;<span class="hljs-keyword">else</span> y=mid<span class="hljs-number">-1</span>;<br>s++;<br><span class="hljs-keyword">if</span>(<span class="hljs-number">0.5</span>*(a[i]-a[q[s]])/(r-l+<span class="hljs-number">1</span>+i-q[s])&gt;ans)&#123;<br>    ans=<span class="hljs-number">0.5</span>*(a[i]-a[q[s]])/(r-l+<span class="hljs-number">1</span>+i-q[s]);<br>    _y=l;__y=r;_x=q[s]+<span class="hljs-number">1</span>;__x=i;<br>&#125;<br><span class="hljs-keyword">while</span>(qh&lt;qt&amp;&amp;(a[q[qt<span class="hljs-number">-1</span>]]-a[q[qt]])*(q[qt]-i)&gt;(a[q[qt]]-a[i])*(q[qt<span class="hljs-number">-1</span>]-q[qt]))qt--;<br>q[++qt]=i;<br>    &#125;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"Case #%d: The maximal value is %.7lf, rectangle corners are (%d, %d) and (%d, %d).\n"</span>,++ca,ans,_x,_y,__x,__y);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 分数规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mw Winter Camp Day1 F(树背包DP+前缀和)</title>
      <link href="/mswcF1/"/>
      <url>/mswcF1/</url>
      
        <content type="html"><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定 $n$ 个点的树 $(n\le10000)$ ，求点集个数，使得点集里的点两两之间的距离超过 $c$  $(c\le500)$</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>题意比较吓人，所以也想复杂了</p><p>直接用树背包统计就可以了</p><p>设 $d[i][j]$ 为 $i$ 为根的子树中符合题意的点集个数的方案数，其中点集与 $i$ 最近的距离为 $j$</p><p>那么取空集的时候令 $j$ 等于 $c$ ，然后考虑 $i$ 和 $i$ 的子树的 $j$ 的最小值转移就可以了</p><p>复杂度为 $O(nc^2)$ ，借用树背包的优化方法可以将复杂度降很多(但窝不会算)，莽一发就过了。。</p><p>正解是对2个背包求前缀和，求出 $\geq j$ 的方案数再容斥一下（感觉自己好蠢</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge*j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 10005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 505</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">1e6</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> x*f;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span>&#123;</span><span class="hljs-keyword">int</span> t;edge*next;&#125;e[<span class="hljs-number">2</span>*NM],*h[NM],*o=e;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;o-&gt;t=y;o-&gt;next=h[x];h[x]=o++;&#125;<br><span class="hljs-keyword">int</span> n,c,_x,_y,dep[NM],ca;<br>ll d[NM][nm],ans,g[NM][nm];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> f)</span></span>&#123;<br>    dep[x]=<span class="hljs-number">0</span>;<br>    inc(i,<span class="hljs-number">0</span>,c<span class="hljs-number">-1</span>)d[x][i]=<span class="hljs-number">0</span>;<br>    d[x][c]=<span class="hljs-number">1</span>;<br>    link(x)<span class="hljs-keyword">if</span>(j-&gt;t!=f)&#123;<br>dfs(j-&gt;t,x);<br>inc(k,<span class="hljs-number">1</span>,min(c<span class="hljs-number">-1</span>,dep[x]))&#123;<br>    inc(v,max(<span class="hljs-number">0</span>,c<span class="hljs-number">-1</span>-k),min(c<span class="hljs-number">-1</span>,dep[j-&gt;t]))<br>(g[x][min(k,v+<span class="hljs-number">1</span>)]+=d[x][k]*d[j-&gt;t][v]%inf)%=inf;<br>    (g[x][min(k,c)]+=d[x][k]*d[j-&gt;t][c]%inf)%=inf;<br>&#125;<br>inc(v,<span class="hljs-number">0</span>,min(c<span class="hljs-number">-1</span>,dep[j-&gt;t]))(g[x][min(c,v+<span class="hljs-number">1</span>)]+=d[x][c]*d[j-&gt;t][v]%inf)%=inf;<br>(g[x][c]+=d[x][c]*d[j-&gt;t][c]%inf)%=inf;<br><br>inc(k,<span class="hljs-number">0</span>,c)d[x][k]=g[x][k],g[x][k]=<span class="hljs-number">0</span>;<br>dep[x]=max(dep[x],dep[j-&gt;t]+<span class="hljs-number">1</span>);<br>    &#125;<br>    d[x][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    link(x)<span class="hljs-keyword">if</span>(j-&gt;t!=f)&#123;<br>d[x][<span class="hljs-number">0</span>]*=(d[j-&gt;t][c]+d[j-&gt;t][c<span class="hljs-number">-1</span>]);d[x][<span class="hljs-number">0</span>]%=inf;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d"</span>,&amp;n,&amp;c)&amp;&amp;n&amp;&amp;c)&#123;<br>o=e;ans=<span class="hljs-number">0</span>;<br>inc(i,<span class="hljs-number">1</span>,n)h[i]=<span class="hljs-number">0</span>;<br>inc(i,<span class="hljs-number">1</span>,n<span class="hljs-number">-1</span>)&#123;_x=read();_y=read();add(_x,_y);add(_y,_x);&#125;<br>dfs(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br>inc(i,<span class="hljs-number">0</span>,c)ans+=d[<span class="hljs-number">1</span>][i],ans%=inf;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"Case #%d: %lld\n"</span>,++ca,ans);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mw Winter Camp Day1 D(DP+后缀数组)</title>
      <link href="/mswcD1/"/>
      <url>/mswcD1/</url>
      
        <content type="html"><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定字符串 $S$ $(|S|\le3000)$ ，求将 $S$ 分裂成几个递增的子串的方案数</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>令 $d[i][j]$ 为到第 $j$ 个字符，最后一段取 $S[i:j]​$ 的方案数</p><p>那么 $d[i][j]=\sum d[k][i-1]\,\,(S[k:i-1]&lt;S[i:j])$</p><p>利用后缀数组做子串比较，复杂度为 $O(n^3)$</p><p>而这种做法并没有充分利用好后缀数组的优势，故直接考虑枚举 $i$ 和 $k$ ，那么可以求 $i$ 和 $k$ 的 $LCP$ ，如果 $LCP$ 的下一位是递增的，那么对这个位置以后的 $j$ 都能产生贡献，否则无法产生贡献。</p><p>然后还有一个 $trick$ 是 $LCP$ 长度大于 $|S[k:i-1]|$ ，这个时候对该长度以后的位置都能产生贡献</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>后缀数组板子由 $wang9897$  提供%%%</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge*j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">9</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> x*f;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAXN=<span class="hljs-number">3005</span>;<br><br><span class="hljs-keyword">int</span> n,ca;<br><span class="hljs-keyword">char</span> _s[MAXN];<br>ll d[MAXN][MAXN],ans;<br><span class="hljs-keyword">int</span> sa[MAXN],txt[MAXN],t1[MAXN],t2[MAXN],rank1[MAXN],rank2[MAXN],td[MAXN];<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(<span class="hljs-keyword">int</span> f[],<span class="hljs-keyword">int</span> tt,<span class="hljs-keyword">int</span> ttt,<span class="hljs-keyword">int</span> k)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> f[tt]==f[ttt]&amp;&amp;f[tt+k]==f[ttt+k];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Sa</span><span class="hljs-params">(<span class="hljs-keyword">char</span> str[])</span></span>&#123;<br>    <span class="hljs-keyword">int</span> m=<span class="hljs-number">250</span>;<span class="hljs-keyword">int</span> len=<span class="hljs-built_in">strlen</span>(str);<br>    <span class="hljs-keyword">int</span> *td=t1;<span class="hljs-keyword">int</span> *rank1=t2;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)txt[i]=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)txt[str[i]]++,rank1[i]=str[i];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;m;i++)txt[i]+=txt[i<span class="hljs-number">-1</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=len<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)sa[--txt[str[i]]]=i;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">1</span>;k&lt;=len;k=k*<span class="hljs-number">2</span>)&#123;<br><span class="hljs-keyword">int</span> p=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=len-k;i&lt;len;i++)td[p++]=i;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)<span class="hljs-keyword">if</span>(sa[i]&gt;=k)td[p++]=sa[i]-k;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)txt[i]=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)txt[rank1[i]]++;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;m;i++)txt[i]+=txt[i<span class="hljs-number">-1</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=len<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)sa[--txt[rank1[td[i]]]]=td[i];<br>p=<span class="hljs-number">1</span>;<br>swap(rank1,td);<br>rank1[sa[<span class="hljs-number">0</span>]]=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;len;i++)rank1[sa[i]]=cmp(td,sa[i],sa[i<span class="hljs-number">-1</span>],k)?p<span class="hljs-number">-1</span>:p++;<br><span class="hljs-keyword">if</span>(p&gt;=len)<span class="hljs-keyword">return</span> ;<br>m=p;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">int</span> h[MAXN],H[MAXN];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">HH</span><span class="hljs-params">(<span class="hljs-keyword">char</span> str[])</span></span>&#123;<br>    <span class="hljs-keyword">int</span> len=<span class="hljs-built_in">strlen</span>(str);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)rank2[sa[i]]=i;<br>    <span class="hljs-built_in">memset</span>(H,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(H));<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)&#123;<br><span class="hljs-keyword">if</span>(rank2[i]==<span class="hljs-number">0</span>)<span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">int</span> t=sa[rank2[i]<span class="hljs-number">-1</span>];<span class="hljs-keyword">int</span> w=i;<span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span>(i==<span class="hljs-number">0</span>||H[i<span class="hljs-number">-1</span>]&lt;=<span class="hljs-number">1</span>)k=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">else</span> k=H[i<span class="hljs-number">-1</span>]<span class="hljs-number">-1</span>,t+=k,w+=k;<br><span class="hljs-keyword">while</span>(t&lt;len&amp;&amp;w&lt;len)&#123;<br>    <span class="hljs-keyword">if</span>(str[t]==str[w])k++;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<br>    t++;w++;<br>&#125;<br>H[i]=k;h[rank2[i]]=k;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">int</span> dp[MAXN][<span class="hljs-number">16</span>],ma[MAXN];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">St</span><span class="hljs-params">(<span class="hljs-keyword">char</span> str[])</span></span>&#123;<br>    <span class="hljs-keyword">int</span> len=<span class="hljs-built_in">strlen</span>(str);<br>    inc(i,<span class="hljs-number">2</span>,len)ma[i]=ma[i/<span class="hljs-number">2</span>]+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;len;i++)dp[i][<span class="hljs-number">0</span>]=h[i];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=<span class="hljs-number">15</span>;j++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i+(<span class="hljs-number">1</span>&lt;&lt;j)&lt;=len;i++)&#123;<br>    dp[i][j]=min(dp[i][j<span class="hljs-number">-1</span>],dp[i+(<span class="hljs-number">1</span>&lt;&lt;(j<span class="hljs-number">-1</span>))][j<span class="hljs-number">-1</span>]);<br>&#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Lcp</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(l&gt;r)swap(l,r);<br>    l++;<br>    <span class="hljs-keyword">int</span> k=ma[r-l+<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">return</span> min(dp[l][k],dp[r-(<span class="hljs-number">1</span>&lt;&lt;k)+<span class="hljs-number">1</span>][k]);<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>,_s))&#123;<br><span class="hljs-keyword">if</span>(_s[<span class="hljs-number">0</span>]==<span class="hljs-string">'-'</span>)<span class="hljs-keyword">break</span>;<br>n=<span class="hljs-built_in">strlen</span>(_s);ans=<span class="hljs-number">0</span>;<br>_s[n]=<span class="hljs-string">'$'</span>;_s[n+<span class="hljs-number">1</span>]=<span class="hljs-string">'\0'</span>;<br>Sa(_s);HH(_s);St(_s);<br>inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)inc(j,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)d[i][j]=<span class="hljs-number">0</span>;<br>inc(j,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)d[<span class="hljs-number">0</span>][j]=<span class="hljs-number">1</span>;<br>inc(i,<span class="hljs-number">1</span>,n<span class="hljs-number">-1</span>)&#123;<br>    inc(j,<span class="hljs-number">0</span>,i<span class="hljs-number">-1</span>)&#123;<br><span class="hljs-keyword">int</span> t=Lcp(rank2[i],rank2[j]);<br><span class="hljs-keyword">if</span>(t+j&gt;=i&amp;&amp;i+i-j&lt;n)&#123;<br>    (d[i][i+(i-j)]+=d[j][i<span class="hljs-number">-1</span>])%=inf;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">if</span>(rank2[i]&gt;rank2[j]&amp;&amp;i+t&lt;n)<br>    (d[i][i+t]+=d[j][i<span class="hljs-number">-1</span>])%=inf;<br>&#125;<br>    &#125;<br>    inc(j,i+<span class="hljs-number">1</span>,n<span class="hljs-number">-1</span>)(d[i][j]+=d[i][j<span class="hljs-number">-1</span>])%=inf;<br>&#125;<br><span class="hljs-comment">//inc(i,0,n-1)&#123;inc(j,0,n-1)printf("%lld ",d[i][j]);putchar('\n');&#125;</span><br>inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)ans+=d[i][n<span class="hljs-number">-1</span>],ans%=inf;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"Case #%d: There are %lld ways.\n"</span>,++ca,ans);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 后缀数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>妖妖梦Normal no bomb纪念</title>
      <link href="/yym-n-nb/"/>
      <url>/yym-n-nb/</url>
      
        <content type="html"><![CDATA[<p><strong>$rpy$下载地址： </strong><a href="/others/th7_04.rpy">$here$</a></p><p><strong>机体：</strong>魔B</p><p>第一个 $neta$ 竟然是在妖妖梦打出来的。。 $yym$  虽然是几作中比较难的，但是难点是资源比较少(魔机更是少得可怜嘤嘤嘤)，打 $neta$ 的时候和混关的难度差感觉不会太大？</p><p>在 $H$ 混关的时候打得比较多吧，所以 $4$ 面 $BOSS$ 之前基本满残，$4$ 面 $BOSS$ 确实有不少糟点， 一非、二符， 三符也不造为什么收率贼低；$5$ 面的槽点反而少点，道中压力其实比 $H$ 要小很多； $6$ 面就很尴尬，混关直接炸过，这个一符对直弹来说就是噩梦啊qaq，基本就是要拖全避的节奏，能只掉一残已经满足了，二非二符向来也是很槽，也只能用底力乱扭(二符的绕圈走位实在学不来qaq)，还好也只掉一残，三非其实 $N$ 还是比较好过，直接在 $UUZ$ 下面穿就可以(然而窝忘了)，一残；后面的压力其实反而比较小。</p><p>最后附图：</p><p><img src="/images/yym-n-nb1.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> stg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cf979E(DP套DP)</title>
      <link href="/cf979E/"/>
      <url>/cf979E/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://codeforces.com/contest/979/problem/E" target="_blank" rel="noopener">https://codeforces.com/contest/979/problem/E</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定一个 $n\,(n\le50)$ 个点的图，点有白有黑有待染色，只能从编号小的点向编号大的点连边，现对这个图染色连边，问有多少种方案，使得该图有偶/奇数条黑白相间的路径。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>先考虑子 $DP$ ，若给定图，那么黑白相间的路径数可以用一个简单 $DP$ 来解决</p><p>$dp[i]=\sum_{j=1}^{n-1} dp[j]​$  ( $j​$ 与 $i​$ 异色)</p><p>由于只要判定奇偶性，又可写为</p><p>$dp[i]=xor_{j=1}^{i-1} dp[j]$</p><p>那么只有 $dp$ 值为 $1$ 的点的个数的奇偶性即可确定 $dp[i]$</p><p>设第 $i$ 个点为黑点，如果确定了 $dp=1$ 的白点数 $a$ ，那么 $dp[i]=1/0$ 的方案数均为 $2^{a-1}2^{i-1-a}=2^{i-2}$ </p><p>但是如果 $a=0$ ，$dp[i]$ 只能等于 $1$ ，需要特判</p><p>因此在做外层 $DP$ 的时候，需要确定有无 $dp=1$ 的黑/白点，那么设 $d[i][j][k][v]$ 为到第 $i$ 个点，答案为 $j$ 的方案数( $k$ 和 $v$ 分别代表有无 $dp=1$ 的黑/白点)</p><p>然后分类讨论转移就可以了。。复杂度 $O(n)$</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3> <figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 55</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 32768</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pi 3.1415926535897931</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><span class="hljs-keyword">int</span> n,_p,a[NM];<br>ll p[NM],d[NM][<span class="hljs-number">2</span>][<span class="hljs-number">2</span>][<span class="hljs-number">2</span>],ans;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();_p=read();<br>    inc(i,<span class="hljs-number">1</span>,n)a[i]=read();<br>    p[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;inc(i,<span class="hljs-number">1</span>,n)p[i]=p[i<span class="hljs-number">-1</span>]*<span class="hljs-number">2</span>%inf;<br>    <span class="hljs-keyword">if</span>(a[<span class="hljs-number">1</span>])d[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>][<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(a[<span class="hljs-number">1</span>]&lt;=<span class="hljs-number">0</span>)d[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>][<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    inc(i,<span class="hljs-number">2</span>,n)inc(j,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)inc(k,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)inc(v,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)<span class="hljs-keyword">if</span>(d[i<span class="hljs-number">-1</span>][j][k][v])&#123;<br><span class="hljs-keyword">if</span>(a[i])&#123;<br>    <span class="hljs-keyword">if</span>(v)&#123;<br>(d[i][j][k][v]+=d[i<span class="hljs-number">-1</span>][j][k][v]*p[i<span class="hljs-number">-2</span>]%inf)%=inf;<br>(d[i][j^<span class="hljs-number">1</span>][<span class="hljs-number">1</span>][v]+=d[i<span class="hljs-number">-1</span>][j][k][v]*p[i<span class="hljs-number">-2</span>]%inf)%=inf;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>(d[i][j^<span class="hljs-number">1</span>][<span class="hljs-number">1</span>][v]+=d[i<span class="hljs-number">-1</span>][j][k][v]*p[i<span class="hljs-number">-1</span>]%inf)%=inf;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">if</span>(a[i]&lt;=<span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-keyword">if</span>(k)&#123;<br>(d[i][j][k][v]+=d[i<span class="hljs-number">-1</span>][j][k][v]*p[i<span class="hljs-number">-2</span>]%inf)%=inf;<br>(d[i][j^<span class="hljs-number">1</span>][k][<span class="hljs-number">1</span>]+=d[i<span class="hljs-number">-1</span>][j][k][v]*p[i<span class="hljs-number">-2</span>]%inf)%=inf;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>(d[i][j^<span class="hljs-number">1</span>][k][<span class="hljs-number">1</span>]+=d[i<span class="hljs-number">-1</span>][j][k][v]*p[i<span class="hljs-number">-1</span>]%inf)%=inf;<br>    &#125;<br>&#125;<br>    &#125;<br>    inc(j,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)inc(k,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)ans+=d[n][_p][j][k];<br>    ans%=inf;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>*<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bzoj3864(DP套DP)</title>
      <link href="/bzoj3864/"/>
      <url>/bzoj3864/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=3864" target="_blank" rel="noopener">https://www.lydsy.com/JudgeOnline/problem.php?id=3864</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定一个字符串 $S\, (|S|\le15)$ 和 $m\,(m\le 1000)$ ，字符串均只包含 $A、G、C、T$ 。构造长度为 $m$ 的字符串 $T$ ，输出使得 $LCS(S,T)=i$ 的方案数。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>先说一下 $DP$ 套 $DP$ 的含义</p><blockquote><p>通过一个外层的 $ DP$ 来计算使得另一个 $DP$ 方程(子 $DP $)<strong>最终结果为特定值</strong>的<strong>输入数</strong>。</p></blockquote><p>其实算是一个思想。。</p><p><br></p><p>这题的子 $DP$ 为 $dp[i][j]=LCS(T[1:i],S[1:j])$  ，一位一位的填的话，这个子 $DP$ 的状态数可以达到 $|S|!$ ，显然不能接受，而考虑到 $dp[i]$ 的单调性，且 $dp[i,j]$ 和 $dp[i,j-1]$ 只能相差 $0$ 或 $1$ ，所以可以差分后再进行状压，状态数降至 $2^{|S|}$ </p><p>然后对外层 $DP$ ，设 $d(i,j)$ 为到 $T$ 的第 $i$  位，状态为 $j$ 的方案数，然后直接做状压 $DP$ 就可以了。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 1005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 32768</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pi 3.1415926535897931</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br> <br> <br><br><br><br><span class="hljs-keyword">int</span> n,m,len[nm],d[NM][nm],g[nm][<span class="hljs-number">4</span>],cnt[<span class="hljs-number">16</span>],tot,ans[<span class="hljs-number">16</span>],a[<span class="hljs-number">16</span>],dp[<span class="hljs-number">16</span>];<br><span class="hljs-keyword">char</span> _s[<span class="hljs-number">16</span>];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">id</span><span class="hljs-params">(<span class="hljs-keyword">char</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(x==<span class="hljs-string">'A'</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(x==<span class="hljs-string">'G'</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(x==<span class="hljs-string">'C'</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">3</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123;<br>    tot=succ(n)<span class="hljs-number">-1</span>;<br>    inc(k,<span class="hljs-number">0</span>,tot)&#123;<br>inc(i,<span class="hljs-number">1</span>,n)cnt[i]=cnt[i<span class="hljs-number">-1</span>]+(k&gt;&gt;(i<span class="hljs-number">-1</span>)&amp;<span class="hljs-number">1</span>);<br>len[k]=cnt[n];<br>inc(v,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>)&#123;<br>    inc(i,<span class="hljs-number">1</span>,n)&#123;<br>dp[i]=max(cnt[i],dp[i<span class="hljs-number">-1</span>]);<br><span class="hljs-keyword">if</span>(v==a[i])dp[i]=max(dp[i],cnt[i<span class="hljs-number">-1</span>]+<span class="hljs-number">1</span>);<br>    &#125;<br>    dec(i,n,<span class="hljs-number">1</span>)g[k][v]=g[k][v]&lt;&lt;<span class="hljs-number">1</span>|(dp[i]-dp[i<span class="hljs-number">-1</span>]);<br>&#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> _=read();<span class="hljs-keyword">while</span>(_--)&#123;<br>mem(g);mem(d);mem(ans);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>,_s+<span class="hljs-number">1</span>);n=<span class="hljs-built_in">strlen</span>(_s+<span class="hljs-number">1</span>);<br>inc(i,<span class="hljs-number">1</span>,n)a[i]=id(_s[i]);<br>m=read();<br>init();<br>d[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>inc(i,<span class="hljs-number">0</span>,m<span class="hljs-number">-1</span>)inc(j,<span class="hljs-number">0</span>,tot)<span class="hljs-keyword">if</span>(d[i][j])<br>    inc(k,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>)(d[i+<span class="hljs-number">1</span>][g[j][k]]+=d[i][j])%=inf;<br>inc(j,<span class="hljs-number">0</span>,tot)(ans[len[j]]+=d[m][j])%=inf;<br>inc(i,<span class="hljs-number">0</span>,n)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,ans[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cf1111D(可逆背包)</title>
      <link href="/cf1111D/"/>
      <url>/cf1111D/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://codeforces.com/problemset/problem/1111/D" target="_blank" rel="noopener">http://codeforces.com/problemset/problem/1111/D</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定一个长度为偶数的的字符串(仅包含字母)，可以随意交换任意两个字符，先要将字符串分成左右两半部分，给定 $q$ 个询问，每个询问包含 $x$ 和 $y$ ，要求满足下述要求的排列方案数：</p><ol><li>同一种字符不同时出现在字符串左右两半</li><li>$x$ 、 $y$ 代表的字符应出现在同一侧</li></ol><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>事实上只要考虑哪些字符出现在左半部分就可以了然后再对这些字符分别进行排列，而排列方案数总是固定的，为 $\frac{\frac{n}{2}!\frac{n}{2}!}{\prod a_i!}$ (其中$a_i$为i字符出现的个数)。</p><p>然后就转化成一个01计数背包了，由于这个背包是可逆的，所以我们把物品装进去之后再去撤销。直接插销复杂度是 $O(qn)$ 不能接受，仔细分析询问种类最多只有 $52*52$ 种，那么直接预处理这些情况就可以了，复杂度为 $O(52^2n)$ 。实际上复杂度没有那么高，因为我们只要求背包里某一个特定的值，而撤销背包的表达式比较简单，所以可以手动算出要求的那一项，这样撤销的复杂度可以降成 $O(n/v)$ ，为了避免极限数据的出现可以排序去重，然后复杂度可以降至 $O(52nlogn)$ 。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 100005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 200005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pi 3.1415926535897931</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br> <br> <br><br><br><br><br>ll ans,p[NM],inv[NM],invp[NM];<br><span class="hljs-keyword">char</span> s[NM];<br><span class="hljs-keyword">int</span> n,m,a[<span class="hljs-number">53</span>],_x,_y,d[<span class="hljs-number">53</span>][<span class="hljs-number">53</span>];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tmp</span>&#123;</span><br>    <span class="hljs-keyword">int</span> d[NM];<br>    <span class="hljs-keyword">void</span> <span class="hljs-keyword">operator</span>*=(<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span>&amp;t)&#123;dec(i,n,t)d[i]+=d[i-t],d[i]%=inf;&#125;<br>    <span class="hljs-keyword">void</span> <span class="hljs-keyword">operator</span>/=(<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span>&amp;t)&#123;inc(i,t,n)d[i]-=d[i-t],d[i]%=inf;&#125;<br>&#125;cnt[<span class="hljs-number">53</span>];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">fun</span><span class="hljs-params">(<span class="hljs-keyword">char</span> t)</span></span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-string">'a'</span>&lt;=t&amp;&amp;t&lt;=<span class="hljs-string">'z'</span>?t-<span class="hljs-string">'a'</span>+<span class="hljs-number">1</span>:t-<span class="hljs-string">'A'</span>+<span class="hljs-number">27</span>;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>,s+<span class="hljs-number">1</span>);n=<span class="hljs-built_in">strlen</span>(s+<span class="hljs-number">1</span>);<br>    p[<span class="hljs-number">0</span>]=invp[<span class="hljs-number">0</span>]=inv[<span class="hljs-number">1</span>]=invp[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    inc(i,<span class="hljs-number">1</span>,n)p[i]=p[i<span class="hljs-number">-1</span>]*i%inf;<br>    inc(i,<span class="hljs-number">2</span>,n)inv[i]=inv[inf%i]*(inf-inf/i)%inf,invp[i]=invp[i<span class="hljs-number">-1</span>]*inv[i]%inf;<br>    inc(i,<span class="hljs-number">1</span>,n)a[fun(s[i])]++;<br>    n&gt;&gt;=<span class="hljs-number">1</span>;<br>    ans=p[n]*p[n]%inf;<br>    inc(i,<span class="hljs-number">1</span>,<span class="hljs-number">52</span>)ans*=invp[a[i]],ans%=inf;<br>    ans&lt;&lt;=<span class="hljs-number">1</span>;ans%=inf;<br>    cnt[<span class="hljs-number">0</span>].d[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    inc(i,<span class="hljs-number">1</span>,<span class="hljs-number">52</span>)<span class="hljs-keyword">if</span>(a[i])cnt[<span class="hljs-number">0</span>]*=a[i];<br>    inc(i,<span class="hljs-number">1</span>,<span class="hljs-number">52</span>)<span class="hljs-keyword">if</span>(a[i])cnt[i]=cnt[<span class="hljs-number">0</span>],cnt[i]/=a[i];<br>    inc(i,<span class="hljs-number">1</span>,<span class="hljs-number">52</span>)<span class="hljs-keyword">if</span>(a[i])inc(j,i+<span class="hljs-number">1</span>,<span class="hljs-number">52</span>)<span class="hljs-keyword">if</span>(a[j])&#123;<br><span class="hljs-keyword">int</span> t=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=n;k&gt;=<span class="hljs-number">0</span>;k-=a[j],t=-t)<br>    d[i][j]+=t*cnt[i].d[k],d[i][j]%=inf;<br>    &#125;<br>    inc(i,<span class="hljs-number">1</span>,<span class="hljs-number">52</span>)inc(j,<span class="hljs-number">1</span>,i<span class="hljs-number">-1</span>)d[i][j]=d[j][i];<br>    m=read();<span class="hljs-keyword">while</span>(m--)&#123;<br>_x=read();_y=read();<br><span class="hljs-keyword">if</span>(s[_x]==s[_y])<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,(cnt[fun(s[_x])].d[n]+inf)*ans%inf);<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,(d[fun(s[_x])][fun(s[_y])]+inf)*ans%inf);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 生成函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo瞎猴日记二</title>
      <link href="/hexo2/"/>
      <url>/hexo2/</url>
      
        <content type="html"><![CDATA[<h3 id="latex支持"><a href="#latex支持" class="headerlink" title="latex支持"></a>latex支持</h3><p>这个要个CDN(然而窝又不造是什么)，随便百度上拉来一个能用就行，不过貌似效果略差？</p><p>代码如下：</p><figure class="hljs highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">mathjax:</span><br><span class="hljs-attr">  enable:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">  global:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">  cdn:</span> <span class="hljs-attr">https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML</span><br></code></pre></td></tr></table></figure><p><br></p><h3 id="背景图-留坑"><a href="#背景图-留坑" class="headerlink" title="背景图(留坑)"></a>背景图(留坑)</h3><p>背景图的设置可以从$themes$文件夹下的$source/css/custom.styl$下去设置(前提是主题的作者很好心地给泥设置了这个选项)，然后仿照下面的代码去把背景设置一下就可以</p><figure class="hljs highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">body&#123;<br>    background-image:url(/images/background.jpg);<br>    background-attachment:fixed;<br>    background-repeat:repeat;<br>    background-size:contain;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是这个方案其实比较差，由于填充得比较暴力，所以对图片的要求比较刁钻。另外这个主题下中间的背景是被挡住的，所以对背景的要求也就变得更高了些。</p><p>目前想这找一些风景图来填充就可以，以后碰上就试一下就不刻意找了。</p><p><br></p><h3 id="About-me"><a href="#About-me" class="headerlink" title="About me"></a>About me</h3><p>有个语法之前忘了说<code>hexo new page pagename</code>意思是新建一个名为$pagename$的功能页</p><p>然后$About\,me$页面和$Tag$页面和$404$页面都可以用这种方法去实现</p><p>其中404页面要部署在$Github\,Pages$上才能用</p><p><br></p><h3 id="代码复制"><a href="#代码复制" class="headerlink" title="代码复制"></a>代码复制</h3><p>参考链接：<a href="https://www.jianshu.com/p/3e9d614c1e77" target="_blank" rel="noopener">https://www.jianshu.com/p/3e9d614c1e77</a></p><p>跟着照做就行，完全无难度</p><p><br></p><h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><p>窝写题解的时候格式还算是比较固定的？所以可以弄个模板上去，按照<a href="https://hexo.io/zh-cn/docs/writing#%E6%A8%A1%E7%89%88%EF%BC%88Scaffold%EF%BC%89" target="_blank" rel="noopener">官方文档</a>，在$scafflods$下建立一个$name.md$文件，然后用命令<code>hexo new name newpost</code>就可以了</p><p><br></p><h3 id="突然还想要一个会动的小人-留坑"><a href="#突然还想要一个会动的小人-留坑" class="headerlink" title="突然还想要一个会动的小人(留坑)"></a>突然还想要一个会动的小人(留坑)</h3><p>先给几个学习链接：</p><ol><li><p><a href="https://github.com/EYHN/hexo-helper-live2d" target="_blank" rel="noopener">https://github.com/EYHN/hexo-helper-live2d</a></p></li><li><p><a href="https://haremu.com/p/205" target="_blank" rel="noopener">https://haremu.com/p/205</a></p></li><li><a href="https://imjad.cn/archives/lab/add-dynamic-poster-girl-with-live2d-to-your-blog-02" target="_blank" rel="noopener">https://imjad.cn/archives/lab/add-dynamic-poster-girl-with-live2d-to-your-blog-02</a></li></ol><p>然后了解到有$live2d$这种技术，看了半天发现这技术过于硬核，所以打算拉一份代码就好了。。现有的模型其实也很少，所以没得挑。。</p><p>然后就直接链接到别人的$github$上把他的$live2d$拉了下来，这个要参考第一个链接，把$hexo-helper-live2d$下载完后，文档给出了自定义的模型的使用方法，直接套上去就可以。</p><p>小人说话的问题第二个链接貌似有给出解决方案可是窝一直鼓捣不出来。。</p><p>$live2d$好像自带半透明色像幽灵一样好恐怖5555</p><p><br></p><h3 id="关于域名"><a href="#关于域名" class="headerlink" title="关于域名"></a>关于域名</h3><p>方法大概了解过了，大概就是交钱交钱验证验证。。</p><p>然后还发现以前自己已经把$blog$挂在$Github\, Pages$上了，这就已经足够，便不用其他的域名了。</p><p><br></p><p>鼓捣$hexo$的历程可能到这就告一段落，有问题以后慢慢解决吧_(:3 」∠)_</p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo瞎猴日记一</title>
      <link href="/hexo1/"/>
      <url>/hexo1/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这个blog其实大一就做了一下，弄到hello world和学习了一下markdown之后就没再弄过了，至于为什么要重新来弄这个是因为这个CSDN真的是emmmmm</p><p>于是这里顺便发一下前任博客的链接<a href="https://blog.csdn.net/qkoqhh" target="_blank" rel="noopener">https://blog.csdn.net/qkoqhh</a></p><p>当时搭这博客的细节也忘得差不多了，流程大概是按照<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">官方文档</a>来的，记得是装某个东西的时候有点问题？</p><p><br></p><h3 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h3><p>主题选的是<a href="https://github.com/AlynxZhou/hexo-theme-aria/" target="_blank" rel="noopener">Aria</a>，实用性很强，界面也非常舒服，而且，文档写得超详细！真是用心了，感谢作者<a href="http://aria.ismyonly.one/" target="_blank" rel="noopener">AlynxZhou</a>。</p><p>跟着文档把自己能够看懂的部分稍微设置了一下，然后根据自己的需求做了点修改。</p><p><br></p><h3 id="号"><a href="#号" class="headerlink" title="#号"></a>#号</h3><p>第一个是标题前面的#，这个的作用其实已经和文章目录有点重复了，反而可能会有点比较突兀，所以就想去掉</p><p>直接查看#的元素，发现他的类是headerlink，于是用grep在模板里面找到包含headerlink的文件，发现只有aria/source/css/post.styl有，于是删掉如下代码段就可以去掉了：</p><figure class="hljs highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs css">  .post-main &#123;<br>    a.headerlink &#123;<br>      border: none;<br>      &amp;:hover &#123;<br>        border: none;<br>      &#125;<br>      &amp;:active &#123;<br>        top: 0;<br>      &#125;<br>      &amp;::before &#123;<br>        content: "#";<br>        margin-right: 0.3em;<br>      &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当然其实应该可以做得更好，比如用好看一点的图片来代替#可能效果会更加不错，以后有时间可以来改改</p><p>(话说这个hexo没有css的高亮么。。明明在typora下有的说)</p><p><br></p><h3 id="Tag页面"><a href="#Tag页面" class="headerlink" title="Tag页面"></a>Tag页面</h3><p>另一个比较大的问题是hexo自身的问题（这个问题差点让窝弃了hexo），关于分类的，由于hexo不支持同级分类，所以今后窝如果要写一些类别有交叉的文章可能就会比较尴尬。</p><p>由于这是hexo自身的特性根本就没有办法改变，所以分类功能只能弃用。代替他的是标签，用标签的话就可以不用拘泥于严格的类别次序，但是这些标签是不能确定主次或者包含关系的，这个缺点比分类的好接受多了，毕竟大部分博客也是都这样的。</p><p>主题默认使用的tag-cloud窝认为是比较华而不实的，散乱的排列，仅靠大小来判定该分类的大小实在是emmmm</p><p>所以还是想弄成传统的标签，然而缺少知识的窝并不造怎么弄。决定去学一手<a href="http://tokitsukaze.live" target="_blank" rel="noopener">tokitsukaze的博客</a>，发现可以用tag-list（这个在手册上的辅助函数里有可窝当时并没有看懂？），而通过grep命令很容易知道tag-cloud是在/themes/aria/layout/tags.njk​里面生成的，然后仿照原来的tag-cloud的格式生成了tag-list。然后发现标签和数目并在一起相当难看，所以又去学了一首调节字体颜色大小，等调节完发现只能改数字，不能改标签，因为标签是个链接？！之后试了很多方法都没用。。只能妥协。。最后仿造了分类的配色方案将数字的颜色调了一下。。这个问题其实还是没有完全解决qaq</p><p>然后标签的顺序问题默认是按name​排序，如果想按文章数量排序要把​orderby设置成length，其他的就按手册上写就行。。</p><p>代码如下：</p><figure class="hljs highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html">     <span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"5"</span> <span class="hljs-attr">face</span>=<span class="hljs-string">"Verdana"</span> <span class="hljs-attr">color</span>=<span class="hljs-string">"black"</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"tag-list"</span>&gt;</span><br>&#123;&#123;list_tags(&#123;orderby:"length",order:-1,show_count:true,class:tag,amount:0,style:"list"&#125;) &#125;&#125;<br>     <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span><br></code></pre></td></tr></table></figure><p><br></p><h3 id="生成摘要"><a href="#生成摘要" class="headerlink" title="生成摘要"></a>生成摘要</h3><p>另外有个小问题就是，文章摘要貌似只能按字数来算，然后不巧有篇文章开头就是图片，再加上图片大小的调整窝现在也没解决，所以那篇文章的前100字数已经占据了一页。。仔细一想其实窝好像从来就没有看过或者写过摘要（标题党），所以摘要对窝来说确实无关紧要（而且以后的文章中摘要说不定是题意= =），所以直接把摘要去了，把theme里面的_config.yml的auto_excerpt改成如下：</p><figure class="hljs highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">auto_excerpt:</span><br><span class="hljs-attr">    enable:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">    length:</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p><br></p><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>还有一个小问题就是图片的引用问题，有2种姿势：</p><ol><li><p>绝对路径，将图片统一放在source/images中，通过<code>![](/images/image.jpg)</code>访问他们</p></li><li><p>相对路径，通过将_config.yml的post_asset_folder选项修改为true后，以后执行<code>hexo new post_name</code>，还会额外生成post_name同名文件夹，然后可以直接引用文件夹。例如<code>![](image.jpg)</code></p></li></ol><p>一开始是想用相对路径的，然而发现每次建文件夹都没用就很难受，所以就把post_asset_older关了，然而之前的图片引用也一并失效了囧～～</p><p>所以考虑自己没多少图片的情况下就选择用绝对路径了</p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shootingtest</title>
      <link href="/shootingtest/"/>
      <url>/shootingtest/</url>
      
        <content type="html"><![CDATA[<p>先上图</p><p>第二发</p><p><img src="/images/shootingtest2.png" alt=""></p><p>第三发</p><p><img src="/images/shootingtest1.png" alt=""></p><p>第一发好像是106左右吧。。忘了截图。。</p><p>emmm所以说底力是不是太弱了啊，还是没能达到泥裙人均水平qaq</p><p>说一下对各个弹幕的感觉：</p><h3 id="随机弹："><a href="#随机弹：" class="headerlink" title="随机弹："></a>随机弹：</h3><p>话说第一发随机弹到level6就挂了qaq</p><p>不过这里给窝感觉压力最大的确实是随机弹，作为最常见的弹幕练难一点也是必须的。。（信心受到了摧残</p><p>总的来说就是从level1开始就压力很大（主要是密度比较高），精神一直都非常集中，然后后面弹速再加快感觉就有点不行了qaq大概是到level15就有点乱扭了。。不过第三发好像还猴了蛮久的2333</p><p>看别人好像是侧下方躲避不过我还是比较喜欢正下硬杠2333其实说不定侧下方压力真的比较小呢。。（参考无双风神）</p><p>高速弹确实是硬伤，不过这次还让窝意识到自己对密度的承受能力其实也比较一般。。</p><p>所以随机弹一定要再多练啊多练啊。。</p><h3 id="自机狙："><a href="#自机狙：" class="headerlink" title="自机狙："></a>自机狙：</h3><p>相对来说比较轻松的一关。。</p><p>主要是注意折返。。不过到后面空间会越来越小，折返好像也缓解不了多少压力，然后逐渐陷入自闭。。那就在移动的过程中把前面的弹幕当成随机弹扭一扭吧。。在level20之前迎面而来的应该还都是些低速弹。。要是高速弹就呵呵。。</p><h3 id="交叉弹："><a href="#交叉弹：" class="headerlink" title="交叉弹："></a>交叉弹：</h3><p>感觉没怎么遇到过。。所以经验也不足。。</p><p>主要还是level15之前的都太水了。。而且弹速和密度的增长都比较慢。。所以前面的热身可以说是非常充分了，到后面也比较有感觉。。要是一开始上来level18可能就很槽。。</p><p>要形容一下感觉吧？就是在一个弹幕的轨迹上侧滑然后注意避开另一波弹幕？或者在2个轨道之间来回穿梭？？（反正是怎么方便怎么猴</p><p>这个可以练，提升空间还是有的。。</p><h3 id="旋涡弹："><a href="#旋涡弹：" class="headerlink" title="旋涡弹："></a>旋涡弹：</h3><p>好像之前都没听说过有这种弹幕= =!印象中属于这类的不多啊，水银之毒算是比较经典了。。然后还有就是绕圈圈（噩梦）？？</p><p>然后就全靠底力扭了。。所以结果貌似也比较一般？</p><p>感觉就是只是从一侧过来的就找缝钻就行了，没缝就在2批弹幕之间找（这里有缝的概率还是蛮大的），然后就要注意方向问题了。。反正不要跟着旋涡绕。。会晕。。</p><p>比较难遇到吧。。也没有刻意练的必要。。</p><h3 id="爆菊弹："><a href="#爆菊弹：" class="headerlink" title="爆菊弹："></a>爆菊弹：</h3><p>比较害怕的一类吧。。被正邪吓哭了qaq</p><p>感觉还是遇到妖梦的4符比较有信心吧，人家好歹都是直弹。。</p><p>所以也可以考虑练练。。</p><p>然后第三发貌似有段时间躲在侧方很舒服。。然而最后是自己慢慢被逼死没办法回到中间。。所以还是要尽量往中间走。。</p><p>这个热身也是比较足的。。主要就是要放开眼界找空间比较大的块去钻。。要频繁更新交换视野。。可以说是比较累了。。</p><p>不过这个对付正邪可能还有点难。。因为窝已经好几次撞人家脸上了（雾）</p><h3 id="全方位："><a href="#全方位：" class="headerlink" title="全方位："></a>全方位：</h3><p>没听过+2</p><p>听名字给窝的感觉就是紫妹终符。。不过好像和哆啦咪（EX道中）的比较类似？</p><p>前期热身也是很足的。。中期由于是按逆时针边绕边放弹，所以比较有可能会出现螺旋式的弹幕，出现了就很容易避开了。。其余的自己用底力猴一猴也是很ok的。。后期弹速和密度就变高了(主要是密度)，然后扭过了就放大视野找下一个比较空旷的块去钻吧。。压力大也就只能在小范围扭扭然后biu。。</p><p>不过感觉这个判定好迷啊。。好几次以为自己已经gg了结果好像没什么事？？</p><p>PS：这个测试的rpy窝到现在都不造要怎么存（捂脸</p>]]></content>
      
      
      
        <tags>
            
            <tag> stg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test and note of markdown</title>
      <link href="/test/"/>
      <url>/test/</url>
      
        <content type="html"><![CDATA[<h1 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h1><h3 id="Test-1"><a href="#Test-1" class="headerlink" title="Test"></a>Test</h3><p>qkoqhh is so juruo that he used more than two days to build this blog.It’s so lucky that the odd error disappeared without doing nothing.In conclusion,RP is very significant,especially to the problem of XuanXue.  </p><p>试试中文资不资辞蛙？<br>看来是资辞的。<br>下面学习试试引用</p><blockquote><p>苟利国家生死以，岂因祸福避趋之。<br>                                                –最初的网红</p></blockquote><p>引用中的引用？？</p><blockquote><blockquote><p>0.0</p></blockquote></blockquote><blockquote><blockquote><p>=w=</p></blockquote></blockquote><p>还有引用中的标题？</p><blockquote><h2 id="他改变了中国"><a href="#他改变了中国" class="headerlink" title="他改变了中国"></a>他改变了中国</h2><p>emmmm此处省略一万字。。</p></blockquote><p><strong>试试粗鄙</strong></p><p>有序列表 +号可以用*或-代替。。</p><ul><li>red<br>sad</li><li>green</li><li>blue</li></ul><p>还有空个行会有一种奇怪的现象</p><ul><li><p>red</p></li><li><p>green</p></li><li>blue</li></ul><p>无序列表 好像不管.前面的数字耶。。</p><ol start="8"><li><strong>123</strong></li><li>233</li><li>432</li></ol><ul><li>喵喵喵喵？<blockquote><p>   项目中的引用？？<br>这样？？</p></blockquote></li></ul><p>贴代码：<br><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br></code></pre></td></tr></table></figure></p><p>试试分割线</p><hr><hr><hr><hr><p>好像这个”***”分割线能引用的说。。。</p><hr><p>试试行内式链接？？<br>对方给你扔了一个<a href="http://www.bilibili.com" title="duangduangduang" target="_blank" rel="noopener">链接</a><br><del>好像还能用相对路径？算了感觉这个没什么用。。</del></p><p>接下来是参考式链接。。。<br>对方又给你扔了一个<a href="http://www.baidu.com" title="duang" target="_blank" rel="noopener">链接</a><br>引号的内容貌似可以在attach的时候显示粗来。。<br>定义参考式链接的时候好像还可以用&lt;&gt;,什么都没有不就好了嘛。。干嘛弄得这么麻烦。。</p><p>再次运行了一下，获得以下结论：</p><ol><li>链接的http不能省。。</li><li>好像我的preview和实际效果还有点差距？</li><li>编辑时直接刷新页面就可以看到效果了。。</li><li>preview硬换行好像只有一个缩进的效果，要换行必须用软换行。。而hexo好像软硬通吃。。所以preview少用吧。。</li></ol><p>顺势学学绝对路径插入图片<br><img src="https://dn-Myg6wSTV.qbox.me/14868d18eabae4a6fbb5.jpg" alt=""><br>emmmm好像不能设置图片大小呀。。以后再找解决方案吧。。。<br>自己的本地文件要上传到github再获取链接才行。。。这里还顺便再图片上弄了个链接<br><a href="http://blog.csdn.net/qkoqhh" target="_blank" rel="noopener"><img src="https://raw.githubusercontent.com/qkoqhh/picture/master/resource/0bc564cb0a46f21f44e52200f1246b600d33aea4.jpg" alt=""> </a></p><p>（然后emmmm图片来源其实早都没了</p><p>文字强调？？<br><em>qkoqhh</em><br><em>qkoqhh</em><br><strong>qkoqhh</strong><br><strong>qkoqhh</strong><br>emmmm2个*或_就是粗体。。1个就话就是斜体。。</p><p>标记一小段代码？？用 ‘return 0;’ 就好了耶0v0</p>]]></content>
      
      
      
        <tags>
            
            <tag> test </tag>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/hello-world/"/>
      <url>/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">"My New Post"</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>404 Not Found</title>
      <link href="//404.html"/>
      <url>//404.html</url>
      
        <content type="html"><![CDATA[<div class="alert-red"><font size="6"><strong>这里真的什么都没有啦QAQ</strong></font></div><center><img src="/images/404.jpg" alt=""></center>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<div class="alert-green"><font size="6"><strong>欢迎您访问此博客</strong></font></div><h1 id="qkoqhh"><a href="#qkoqhh" class="headerlink" title="qkoqhh"></a>qkoqhh</h1><ul><li>现役 $ACM$ 选手，特长是端茶送水。队名：<em>生鱼忧患死鱼安乐</em>。被 $2$ 位队友( <a href="http://www.cnblogs.com/wang9897/" target="_blank" rel="noopener">$wang9897$</a> 、 <a href="http://www.cnblogs.com/greenty1208/" target="_blank" rel="noopener">$Grennty\underline{}Q$</a> )带飞。由于本人演技过于高超故只拿 $2$ 银 $2$ 铜 $1$ 铁。</li><li>伪车万厨，喜欢 $STG​$ 但是停飞多时，目前只有 $7N2H2EX​$，没有打过 $E​$，不擅长打 $neta​$，但十分擅长抱 $B​$ 撞，幻想成为 $L​$ 党。偶尔和 <a href="arch0n.sumblog.cn">$Archon​$</a> 打打则。</li><li>$qkoqhh​$ 这个名字是高考账号原始密码，不必过多臆断含义 _(:3 」∠)_</li><li>$XDU​$ 摸鱼本科生，专业是网络空间安全然而自己没有任何专业技能。</li><li>语言极差，可能我的文章会写得很小学生一样，但是格式上会要求自己。</li><li>喜欢看番，最喜欢的番剧是魔法少女小圆和 $Steins\,Gate​$ 。喜欢可爱(怜)的金发女孩wwww</li></ul><p><br></p><h1 id="联系方式"><a href="#联系方式" class="headerlink" title="联系方式"></a>联系方式</h1><p>$QQ:1374363741​$</p><p>$Email:$<a href="mailto:qkoqhh@163.com" target="_blank" rel="noopener">$qkoqhh@163.com$</a></p><p>$Telegram:​$<a href="https://t.me/qkoqhh" target="_blank" rel="noopener">$@qkoqhh​$</a></p><p>直接在这里联系我也可以，欢迎交流 _(:3 」∠)_</p><p><br></p><h1 id="关于这个博客"><a href="#关于这个博客" class="headerlink" title="关于这个博客"></a>关于这个博客</h1><p>以前在 <a href="https://blog.csdn.net/qkoqhh" target="_blank" rel="noopener">$CSDN​$</a> ，渐渐对 $CSDN​$ 各种不适故迁到此地。搭一下博客也是对自己的锻炼啦。。</p><p>缺少前端知识所以还有各种缺点，一些坑先了留着。欢迎在下方评论提出博客出现的种种问题 _(:3 」∠)_</p><p>搭然后这个博客主要是来写写一些题解什么的，退役后就来写一些学习笔记（当然退役前也会写的啦</p><p>写文章会尽量按照 <a href="https://loj.ac/article/6" target="_blank" rel="noopener">$LOJ$ 的排版格式</a></p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>QAQ</title>
      <link href="/guo/index.html"/>
      <url>/guo/index.html</url>
      
        <content type="html"><![CDATA[<p>动态DP</p><p>广义矩阵乘法</p><p>三元环</p><p>camp的题解就等结束后再补：</p><p>day1:D F K</p><p>day2:A C E F</p><p>day3:D E G K L+模板题</p><p>day4:模板题</p><p>day5:B(待定) G I J</p><p><del><a href="http://codeforces.com/gym/101741/problem/J" target="_blank" rel="noopener">http://codeforces.com/gym/101741/problem/J</a></del></p><p><a href="http://codeforces.com/gym/101741" target="_blank" rel="noopener">http://codeforces.com/gym/101741</a></p><p><del>hdu5528</del></p><p>hdu5545</p><p>cf294E</p><p><del>2015北京c</del></p><p>2015西安h</p><p><del>zoj3541</del></p><p><del>zoj3548</del></p><p>hdu5921</p><p>poj2054</p><p>bzoj3219</p><p><del>hdu6323</del></p><p>无源汇最小费用流</p><p>无源汇上下界最小费用流</p><p>有源汇上下界最小费用流</p><p>bzoj3532(退流科技？)</p><p>cf739E</p><p>决策单调性：</p><p><del>bzoj2369</del></p><p>bzoj小q的礼物</p><p>bzoj5311</p><p><a href="https://blog.csdn.net/lchi1997/article/details/77860085" target="_blank" rel="noopener">https://blog.csdn.net/lchi1997/article/details/77860085</a></p><p><a href="https://blog.csdn.net/alan_cty/article/details/78360603" target="_blank" rel="noopener">https://blog.csdn.net/alan_cty/article/details/78360603</a></p><p>bzoj4456</p><p>poj2054</p><p>nowcoder4B重做</p><p>bzoj1877</p><p>bzoj1922</p><p>bzoj2051/bzoj2117</p><p>二分图匹配</p><p>最小路径覆盖，最小点覆盖，最大独立点集</p><p>贪心差不多可以开坑了。。有几个资料可以看看。。</p><p><del><a href="https://www.zhihu.com/question/64862744" target="_blank" rel="noopener">https://www.zhihu.com/question/64862744</a></del></p><p><a href="https://blog.csdn.net/qq_32400847/article/details/51336300" target="_blank" rel="noopener">https://blog.csdn.net/qq_32400847/article/details/51336300</a></p><p>流水线调度问题（Johnson算法）</p><p>然后那么多比赛好像每场都是窝的锅比较多。。然后。。就没补完qaq</p><p>记一下防止忘记。。</p><p>概率dp就差一道辣。。</p><p>看图论，学一些建图姿势（主要针对最短路等），还有复习网络流（预计一星期）</p><p>然后主要刷hiholoj上的dp和图论。。（一个巨坑啊。。）</p><p>图论看看<a href="https://www.cnblogs.com/qscqesze/p/4547000.html" target="_blank" rel="noopener">图论500题</a>吧。。</p><p>还有好多知识点。。</p><p>具体有：</p><p>反图补图</p><p>次小生成树</p><p>图的割点、桥和双联通分支</p><p>割点和桥</p><p>边双连通分支</p><p>点双连通分支</p><p>最小树形图</p><p>生成树计数</p><p>二分图多重匹配</p><p>二分图最大权匹配（KM算法）</p><p>2-SAT</p><p>哈曼顿最小生成树</p><p>一般图匹配带花树（等等？！）</p><p>还有很多基础dp学不深。。</p><p>以上弄完做几道贪心。。（预计一星期）</p><p>再然后就是填分块大坑（预计三星期）最少入门，尽量熟练和运用</p><p>接下来还有扫描线，再补上之前的计算几何，包括三角剖分（预计一星期半）</p><p>数位dp：</p><p>LightOJ1205求区间[a,b]的回文数个数。</p><p>hdu3886求满足符号串的数字个数。</p><p>HDU4352严格上升子序列的长度为K的个数。</p><p>ural 1057 数位统计</p><p>codeforces215E周期数</p><p>codeforces258B在1-m中任选7个数，要使前六个数字中的“4”,”7”之和小于第七个的，</p><p>HDU4507 和7无关数的平方和</p><p>Zoj2599 数位统计（见题意）</p><p>zoj3162分形、自相似</p><p>ZOJ3494 BCD Code(AC自动机+数位DP)</p><p>等扫描线学了再做吧。。</p><p>五。计算几何背景，实际上解题的关键是其他问题（数据结构、组合数学，或者是枚举思想）</p><p>若干道经典的离散化＋扫描线的题目，ACM选手必做题目</p><p>POJ 1151 Atlantis （推荐）<br><a href="http://acm.pku.edu.cn/JudgeOnline/problem?id=1151" target="_blank" rel="noopener">http://acm.pku.edu.cn/JudgeOnline/problem?id=1151</a><br>POJ 1389 Area of Simple Polygons<br><a href="http://acm.pku.edu.cn/JudgeOnline/problem?id=1389" target="_blank" rel="noopener">http://acm.pku.edu.cn/JudgeOnline/problem?id=1389</a><br>矩形离散化，线段树处理，矩形面积求交</p><p>POJ 1177 Picture （推荐）<br><a href="http://acm.pku.edu.cn/JudgeOnline/problem?id=1177" target="_blank" rel="noopener">http://acm.pku.edu.cn/JudgeOnline/problem?id=1177</a><br>矩形离散化，线段树处理，矩形交的周长，这个题目的数据比较强。线段树必须高效。 </p><p>POJ 3565 Ants （推荐）<br><a href="http://acm.pku.edu.cn/JudgeOnline/problem?id=3565" target="_blank" rel="noopener">http://acm.pku.edu.cn/JudgeOnline/problem?id=3565</a><br>计算几何中的调整思想，有点像排序。要用到线段相交的判断。<br>详见：<a href="http://hi.baidu.com/novosbirsk/blog/item/fb668cf0f362bec47931aae2.html" target="_blank" rel="noopener">http://hi.baidu.com/novosbirsk/blog/item/fb668cf0f362bec47931aae2.html</a></p><p>POJ 3695 Rectangles<br><a href="http://acm.pku.edu.cn/JudgeOnline/problem?id=3695" target="_blank" rel="noopener">http://acm.pku.edu.cn/JudgeOnline/problem?id=3695</a><br>又是矩形交的面积，但是由于是多次查询，而且矩形不多，使用组合数学中的容斥原理解决之最适合。线段树是通法，但是除了线段树，还有其他可行的方法。</p><p>POJ 2002 Squares<br><a href="http://acm.pku.edu.cn/JudgeOnline/problem?id=2002" target="_blank" rel="noopener">http://acm.pku.edu.cn/JudgeOnline/problem?id=2002</a><br>枚举思想，求平面上若干个点最多能组成多少个正方形，点的Hash<br>2.1 三角剖分<br>三角剖分这个东西貌似去年流行了一下，高校联赛时某U连续出了两次。实际上对多边形进行三角剖分是一个很常见的算法思想，因为三角形是一个比较简单的凸多边形，可以对两个三角形比较容易地求公共面积，这也是三角剖分最常见的用途。对这个算法进行扩展，就可以求两个简单多边形的面积交了。主要是理解有向面积的概念。</p><p>第一类是圆与三角形的相交，主要做法是分情况讨论。<br>POJ    3675    Telescope    三角形剖分，圆与三角形的交<br>POJ    2986    A Triangle and a Circle    三角形剖分，圆与三角形的交<br>ZOJ   2675    Little Mammoth    三角形剖分，圆与三角形的交</p><p>第二类是多边形与多边形相交。<br>HDU    3060    Area2    简单多边形面积并，三角剖分</p><p>三角形剖分的另一种变种是梯形剖分，应用起来稍有局限性，但是比三角形剖分好写。<br>POJ    3148    ASCII Art    多边形梯形剖分，半平面交</p><p>多边形的重心问题，也是三角形剖分的应用：<br>CII      4426    Blast the Enemy!</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
