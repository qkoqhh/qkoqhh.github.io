<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>qkoqhh</title>
  
  <subtitle>什么都没有</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://45.32.8.125/"/>
  <updated>2020-01-07T16:20:35.769Z</updated>
  <id>https://45.32.8.125/</id>
  
  <author>
    <name>qkoqhh</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>gym102428F(DP)</title>
    <link href="https://45.32.8.125/gym102428F/"/>
    <id>https://45.32.8.125/gym102428F/</id>
    <published>2019-12-13T07:32:15.000Z</published>
    <updated>2020-01-07T16:20:35.769Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://codeforces.com/gym/102428/problem/F" target="_blank" rel="noopener">https://codeforces.com/gym/102428/problem/F</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定 $m$ 个砖块，要把这些砖块放入 $n$ 列中，其中每列最少有一个砖块，且排布上不能出现凹陷之处(即最多只有一个单峰)</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>场上用了个傻逼方法推了贼久。。</p><p>如果没有单峰显然是个分拆数，有单峰的话需要修改一下 DP 方程</p><p>考虑两种操作，在两侧就加 $1$ 和整体加一，那么很容易得到转移</p><p>可是对 $1$ $2$ $1$ 这种数据，会计重，因此需要减去同时在两侧加上 $1$ 的情况，最后</p><script type="math/tex; mode=display">d[i][j]=d[i][j-i]+d[i-1][j-1]\times2-d[i-2][j-2]</script><p>如果一开始是空的，加 $1$ 的方案就只有一种，因此需要特判 $d[i][i]=1$</p><h4 id="另一种解法："><a href="#另一种解法：" class="headerlink" title="另一种解法："></a>另一种解法：</h4><p>网友们似乎都是从低向上叠的，考虑 $d[i][j]$ 为 剩下 $i$ 个砖块，底层是 $j$ 的方案数</p><p>那么，可以直接往上叠，也可以去掉最左边的底或者最右边的底，同样会出现 $1$ $2$ $1$ 这中情况，需要去重，有</p><script type="math/tex; mode=display">d[i][j]=d[i-j][j]+2*d[i][j-1]-d[i][j-2]</script><p>先放砖块后转移就可以了</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>解法一：</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 5005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 505</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><span class="hljs-keyword">int</span> n,m;<br>ll d[NM][NM];<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();m=read();<br>    d[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    inc(i,<span class="hljs-number">1</span>,n)&#123;<br>d[i][i]=<span class="hljs-number">1</span>;<br>inc(j,i+<span class="hljs-number">1</span>,m)<span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">1</span>&amp;&amp;j&gt;<span class="hljs-number">1</span>)d[i][j]=(d[i][j-i]+<span class="hljs-number">2</span>*d[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>]-d[i<span class="hljs-number">-2</span>][j<span class="hljs-number">-2</span>]+inf)%inf;<br><span class="hljs-keyword">else</span> d[i][j]=(d[i][j-i]+<span class="hljs-number">2</span>*d[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>])%inf;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>*<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,d[n][m]);<br>&#125;<br></code></pre></td></tr></table></figure><p>解法二：</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 5005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 505</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><span class="hljs-keyword">int</span> n,m;<br>ll d[NM][NM];<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();m=read();m-=n;<br>    inc(i,<span class="hljs-number">0</span>,n)d[<span class="hljs-number">0</span>][i]=<span class="hljs-number">1</span>;<br>    inc(i,<span class="hljs-number">1</span>,m)inc(j,<span class="hljs-number">1</span>,n)<br><span class="hljs-keyword">if</span>(j&gt;<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">if</span>(i&gt;=j)d[i][j]=(d[i-j][j]+d[i][j<span class="hljs-number">-1</span>]*<span class="hljs-number">2</span>-d[i][j<span class="hljs-number">-2</span>]+inf)%inf;<br>    <span class="hljs-keyword">else</span> d[i][j]=(d[i][j<span class="hljs-number">-1</span>]*<span class="hljs-number">2</span>-d[i][j<span class="hljs-number">-2</span>]+inf)%inf;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i&gt;=j)d[i][j]=(d[i-j][j]+d[i][j<span class="hljs-number">-1</span>]*<span class="hljs-number">2</span>)%inf;<br><span class="hljs-keyword">else</span> d[i][j]=d[i][j<span class="hljs-number">-1</span>]*<span class="hljs-number">2</span>%inf;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,d[m][n]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://codeforces.com/gym/102428/problem/F&quot; target=&quot;
      
    
    </summary>
    
    
      <category term="DP" scheme="https://45.32.8.125/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>uoj185(DP+容斥)</title>
    <link href="https://45.32.8.125/uoj185/"/>
    <id>https://45.32.8.125/uoj185/</id>
    <published>2019-11-16T01:51:11.000Z</published>
    <updated>2019-11-16T02:41:43.678Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://uoj.ac/problem/185" target="_blank" rel="noopener">http://uoj.ac/problem/185</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>要找到一一对应的关系是比较难的，如果我们只保证映射上的点之间有对应边的存在，而不考虑他们必须一一对应，那么情况就会简单很多了。。</p><p>设 $d[i][j]$ 为 $i$ 子树映射的方案数，其中 $i$ 点映射在 $j$ 上，那么有</p><script type="math/tex; mode=display">d[i][j]=\prod_{son} \sum_{(j,k)\in E} d[son][k]</script><p>结合一下分配律可知复杂度为 $O(nm)$</p><p>然后接下来考虑一一对应的限制，其实只要让他们的映射集合为全集就可以了，这很显然容斥一下就可以。。</p><p>因此总复杂度为 $O(nm2^n)$</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp make_pair</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 18</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 289</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span>&#123;</span><span class="hljs-keyword">int</span> t;edge*next;&#125;e[nm],*h[NM],*o=e;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;o-&gt;t=y;o-&gt;next=h[x];h[x]=o++;&#125;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;vec,ed[NM];<br><span class="hljs-keyword">int</span> n,m,_x,_y,tot;<br>ll ans,d[NM][NM];<br><span class="hljs-keyword">bool</span> v[NM];<br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> f=<span class="hljs-number">0</span>)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span>&amp;i:vec)d[x][i]=<span class="hljs-number">1</span>;<br>    link(x)<span class="hljs-keyword">if</span>(j-&gt;t!=f)&#123;<br>dfs(j-&gt;t,x);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span>&amp;i:vec)&#123;<br>    ll s=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span>&amp;k:ed[i])<span class="hljs-keyword">if</span>(v[k])s+=d[j-&gt;t][k];<br>    d[x][i]=d[x][i]*s;<br>&#125;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();m=read();<br>    <span class="hljs-keyword">while</span>(m--)&#123;<br>_x=read();_y=read();<br>ed[_x].push_back(_y);<br>ed[_y].push_back(_x);<br>    &#125;<br>    inc(i,<span class="hljs-number">2</span>,n)&#123;<br>_x=read();_y=read();<br>add(_x,_y);add(_y,_x);<br>    &#125;<br>    tot=succ(n)<span class="hljs-number">-1</span>;<br>    inc(i,<span class="hljs-number">1</span>,tot)&#123;<br>vec.clear();mem(v);<br>inc(j,<span class="hljs-number">1</span>,n)<span class="hljs-keyword">if</span>(i&gt;&gt;(j<span class="hljs-number">-1</span>)&amp;<span class="hljs-number">1</span>)vec.push_back(j),v[j]++;<br>dfs(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span>&amp;j:vec)<br>    <span class="hljs-keyword">if</span>(__builtin_popcount(i^tot)&amp;<span class="hljs-number">1</span>)ans-=d[<span class="hljs-number">1</span>][j];<br>    <span class="hljs-keyword">else</span> ans+=d[<span class="hljs-number">1</span>][j];<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://uoj.ac/problem/185&quot; target=&quot;_blank&quot; rel=&quot;noope
      
    
    </summary>
    
    
      <category term="DP" scheme="https://45.32.8.125/tags/DP/"/>
    
      <category term="组合数学" scheme="https://45.32.8.125/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>luogu4336(矩阵树定理+容斥)</title>
    <link href="https://45.32.8.125/luogu4336/"/>
    <id>https://45.32.8.125/luogu4336/</id>
    <published>2019-11-13T12:56:14.000Z</published>
    <updated>2019-11-13T13:33:00.626Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.org/problem/P4336" target="_blank" rel="noopener">https://www.luogu.org/problem/P4336</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>虽然生成树计数确实会想到矩阵树定理，不过因为感觉用不上去于是走在了状压的不归路上QAQ</p><p>如果硬套矩阵树定理会发现可能会出现一个人占据多条边的情况，其实这意味着有些人没有支配着边，所以只需要排除掉非全集的情况就可以了，容斥也就显而易见。。</p><p>还是太菜了。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 18</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 20000005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reduce</span><span class="hljs-params">(ll&amp;x)</span></span>&#123;x+=x&gt;&gt;<span class="hljs-number">63</span>&amp;inf;&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">qpow</span><span class="hljs-params">(ll x,ll t)</span></span>&#123;<br>    ll s=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(;t;t&gt;&gt;=<span class="hljs-number">1</span>,x=x*x%inf)<span class="hljs-keyword">if</span>(t&amp;<span class="hljs-number">1</span>)s=s*x%inf;<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br><span class="hljs-keyword">int</span> n,tot,_x,_y;<br>ll a[NM][NM];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">P</span>&#123;</span><span class="hljs-keyword">int</span> x,y;&#125;;<br><span class="hljs-built_in">vector</span>&lt;P&gt;vec[NM];<br>ll ans;<br><br><br><span class="hljs-function">ll <span class="hljs-title">cal</span><span class="hljs-params">()</span></span>&#123;<br>    ll s=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> cnt=<span class="hljs-number">0</span>;<br>    inc(i,<span class="hljs-number">1</span>,n)inc(j,<span class="hljs-number">1</span>,n)reduce(a[i][j]);<br>    inc(i,<span class="hljs-number">1</span>,n)inc(j,i+<span class="hljs-number">1</span>,n)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> x=i,y=j;a[y][i];swap(x,y))&#123;<br>    ll t=a[x][i]*qpow(a[y][i],inf<span class="hljs-number">-2</span>)%inf;<br>    inc(k,i,n)reduce(a[x][k]-=t*a[y][k]%inf);<br>&#125;<br><span class="hljs-keyword">if</span>(!a[i][i])swap(a[i],a[j]),cnt^=<span class="hljs-number">1</span>;<br>    &#125;<br>    inc(i,<span class="hljs-number">1</span>,n)s=s*a[i][i]%inf;<br>    <span class="hljs-keyword">if</span>(cnt)reduce(s=-s);<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read()<span class="hljs-number">-1</span>;tot=succ(n)<span class="hljs-number">-1</span>;<br>    inc(i,<span class="hljs-number">1</span>,n)&#123;<br><span class="hljs-keyword">int</span> m=read();<br><span class="hljs-keyword">while</span>(m--)&#123;<br>    _x=read();_y=read();<br>    vec[i].push_back(&#123;_x,_y&#125;);<br>&#125;<br>    &#125;<br>    inc(i,<span class="hljs-number">0</span>,tot)&#123;<br>mem(a);<br>inc(j,<span class="hljs-number">1</span>,n)<span class="hljs-keyword">if</span>(i&gt;&gt;(j<span class="hljs-number">-1</span>)&amp;<span class="hljs-number">1</span>)<span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp;k:vec[j])&#123;<br>    a[k.x][k.y]--;a[k.y][k.x]--;<br>    a[k.x][k.x]++;a[k.y][k.y]++;<br>&#125;<br><span class="hljs-keyword">if</span>(__builtin_popcount(i^tot)&amp;<span class="hljs-number">1</span>)reduce(ans-=cal());<br><span class="hljs-keyword">else</span> reduce(ans+=cal()-inf);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problem/P4336&quot; target=&quot;_blank&quot; 
      
    
    </summary>
    
    
      <category term="组合数学" scheme="https://45.32.8.125/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
    
      <category term="矩阵树定理" scheme="https://45.32.8.125/tags/%E7%9F%A9%E9%98%B5%E6%A0%91%E5%AE%9A%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>loj2002(倍增)</title>
    <link href="https://45.32.8.125/loj2002/"/>
    <id>https://45.32.8.125/loj2002/</id>
    <published>2019-11-13T10:05:04.000Z</published>
    <updated>2019-11-13T10:07:42.933Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://loj.ac/problem/2002" target="_blank" rel="noopener">https://loj.ac/problem/2002</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>感觉就是做 $n$ 次模卷积，由于模数比较小，所以直接倍增暴力就可以。。</p><p>对于要求至少一个质数先用上全部的减去用上非质数即可。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 100005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 20000005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">20170408</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><span class="hljs-keyword">int</span> n,m,p,_m;<br>ll d[<span class="hljs-number">32</span>][NM],ans[NM],_ans,tmp[NM];<br><span class="hljs-keyword">bool</span> v[nm];<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();_m=m=read();p=read();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>;i&lt;=m;i++)<span class="hljs-keyword">if</span>(!v[i])<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=i&lt;&lt;<span class="hljs-number">1</span>;j&lt;=m;j+=i)v[j]++;<br>    inc(i,<span class="hljs-number">0</span>,p<span class="hljs-number">-1</span>)d[<span class="hljs-number">0</span>][i]=m/p;<br>    m%=p;<br>    inc(i,<span class="hljs-number">1</span>,m)d[<span class="hljs-number">0</span>][i]++;<br>    m=p<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;succ(i)&lt;=n;i++)<br>inc(j,<span class="hljs-number">0</span>,m)inc(k,<span class="hljs-number">0</span>,m)(d[i][(j+k)%p]+=d[i<span class="hljs-number">-1</span>][j]*d[i<span class="hljs-number">-1</span>][k])%=inf;<br>    ans[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;succ(i)&lt;=n;i++)<span class="hljs-keyword">if</span>(n&gt;&gt;i&amp;<span class="hljs-number">1</span>)&#123;<br><span class="hljs-built_in">memcpy</span>(tmp,ans,<span class="hljs-keyword">sizeof</span>(ans));mem(ans);<br>inc(j,<span class="hljs-number">0</span>,m)inc(k,<span class="hljs-number">0</span>,m)(ans[(j+k)%p]+=tmp[j]*d[i][k])%=inf;<br>    &#125;<br>    _ans=ans[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>;i&lt;=_m;i++)<span class="hljs-keyword">if</span>(!v[i])d[<span class="hljs-number">0</span>][i%p]--;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;succ(i)&lt;=n;i++)&#123;<br>mem(d[i]);<br>inc(j,<span class="hljs-number">0</span>,m)inc(k,<span class="hljs-number">0</span>,m)(d[i][(j+k)%p]+=d[i<span class="hljs-number">-1</span>][j]*d[i<span class="hljs-number">-1</span>][k])%=inf;<br>    &#125;<br>    mem(ans);ans[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;succ(i)&lt;=n;i++)<span class="hljs-keyword">if</span>(n&gt;&gt;i&amp;<span class="hljs-number">1</span>)&#123;<br><span class="hljs-built_in">memcpy</span>(tmp,ans,<span class="hljs-keyword">sizeof</span>(ans));mem(ans);<br>inc(j,<span class="hljs-number">0</span>,m)inc(k,<span class="hljs-number">0</span>,m)(ans[(j+k)%p]+=tmp[j]*d[i][k])%=inf;<br>    &#125;<br>    _ans+=inf-ans[<span class="hljs-number">0</span>];_ans%=inf;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,_ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://loj.ac/problem/2002&quot; target=&quot;_blank&quot; rel=&quot;noo
      
    
    </summary>
    
    
      <category term="组合数学" scheme="https://45.32.8.125/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
    
      <category term="unclassified" scheme="https://45.32.8.125/tags/unclassified/"/>
    
  </entry>
  
  <entry>
    <title>luogu2150(状压DP)</title>
    <link href="https://45.32.8.125/luogu2150/"/>
    <id>https://45.32.8.125/luogu2150/</id>
    <published>2019-11-07T07:20:04.000Z</published>
    <updated>2019-11-07T07:23:54.241Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.org/problem/P2150" target="_blank" rel="noopener">https://www.luogu.org/problem/P2150</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>写了上个题感觉这道相对还是好写得多。。但是还是很麻烦。。</p><p>同样对最大的质数排序，然后根据最大质数分段考虑。。</p><p>对 $\sqrt n$ 以内的质数三进制状压，代表该质数没选或者是被谁选中，再设一维表示当前质数是否被选，然后分类讨论转移即可。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 505</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 256</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> p[]=&#123;<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">11</span>,<span class="hljs-number">13</span>,<span class="hljs-number">17</span>,<span class="hljs-number">19</span>&#125;;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> m=<span class="hljs-number">7</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> tot=succ(<span class="hljs-number">8</span>)<span class="hljs-number">-1</span>;<br>ll inf;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reduce</span><span class="hljs-params">(ll&amp;x)</span></span>&#123;x+=x&gt;&gt;<span class="hljs-number">63</span>&amp;inf;&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">upd</span><span class="hljs-params">(ll&amp;x,ll y)</span></span>&#123;reduce(x+=y-inf);&#125;<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-keyword">int</span> mn[NM],c[NM],<span class="hljs-keyword">_t</span>,tmp[NM];<br>ll d[<span class="hljs-number">2</span>][nm][nm][<span class="hljs-number">3</span>],ans;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<span class="hljs-keyword">return</span> mn[x]&lt;mn[y];&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();inf=read();<br>    inc(i,<span class="hljs-number">2</span>,n)<span class="hljs-keyword">if</span>(!mn[i])<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=i;j&lt;=n;j+=i)mn[j]=i;<br>    inc(i,<span class="hljs-number">2</span>,n)inc(j,<span class="hljs-number">0</span>,m)<span class="hljs-keyword">if</span>(i%p[j]==<span class="hljs-number">0</span>)c[i]|=succ(j);<br>    inc(i,<span class="hljs-number">2</span>,n)<span class="hljs-keyword">if</span>(mn[i]&lt;=<span class="hljs-number">19</span>)mn[i]=<span class="hljs-number">0</span>;<br>    inc(i,<span class="hljs-number">2</span>,n)tmp[i]=i;<br>    sort(tmp+<span class="hljs-number">2</span>,tmp+<span class="hljs-number">1</span>+n,cmp);<br>    d[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    inc(_k,<span class="hljs-number">2</span>,n)&#123;<br><span class="hljs-keyword">int</span> i=tmp[_k];<br><span class="hljs-keyword">_t</span>^=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(mn[i]==mn[tmp[_k<span class="hljs-number">-1</span>]])&#123;<br>    <span class="hljs-keyword">if</span>(mn[i])&#123;<br>inc(j,<span class="hljs-number">0</span>,tot)<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=j;;k=(k<span class="hljs-number">-1</span>)&amp;j)&#123;<br>    inc(v,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)d[<span class="hljs-keyword">_t</span>][j][k][v]=d[<span class="hljs-keyword">_t</span>^<span class="hljs-number">1</span>][j][k][v];<br>    <span class="hljs-keyword">if</span>(k==<span class="hljs-number">0</span>)<span class="hljs-keyword">break</span>;<br>&#125;<br>inc(j,<span class="hljs-number">0</span>,tot)<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=j;;k=(k<span class="hljs-number">-1</span>)&amp;j)&#123;<br>    inc(v,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)&#123;<br><span class="hljs-keyword">if</span>((k&amp;c[i])==<span class="hljs-number">0</span>&amp;&amp;v!=<span class="hljs-number">2</span>)<br>    upd(d[<span class="hljs-keyword">_t</span>][j|c[i]][k][<span class="hljs-number">1</span>],d[<span class="hljs-keyword">_t</span>^<span class="hljs-number">1</span>][j][k][v]);<br><span class="hljs-keyword">if</span>(((k^j)&amp;c[i])==<span class="hljs-number">0</span>&amp;&amp;v!=<span class="hljs-number">1</span>)<br>    upd(d[<span class="hljs-keyword">_t</span>][j|c[i]][k|c[i]][<span class="hljs-number">2</span>],d[<span class="hljs-keyword">_t</span>^<span class="hljs-number">1</span>][j][k][v]);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(k==<span class="hljs-number">0</span>)<span class="hljs-keyword">break</span>;<br>&#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>inc(j,<span class="hljs-number">0</span>,tot)<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=j;;k=(k<span class="hljs-number">-1</span>)&amp;j)&#123;<br>    d[<span class="hljs-keyword">_t</span>][j][k][<span class="hljs-number">0</span>]=d[<span class="hljs-keyword">_t</span>^<span class="hljs-number">1</span>][j][k][<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">if</span>(k==<span class="hljs-number">0</span>)<span class="hljs-keyword">break</span>;<br>&#125;<br>inc(j,<span class="hljs-number">0</span>,tot)<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=j;;k=(k<span class="hljs-number">-1</span>)&amp;j)&#123;<br>    <span class="hljs-keyword">if</span>((k&amp;c[i])==<span class="hljs-number">0</span>)<br>upd(d[<span class="hljs-keyword">_t</span>][j|c[i]][k][<span class="hljs-number">0</span>],d[<span class="hljs-keyword">_t</span>^<span class="hljs-number">1</span>][j][k][<span class="hljs-number">0</span>]);<br>    <span class="hljs-keyword">if</span>(((k^j)&amp;c[i])==<span class="hljs-number">0</span>)<br>upd(d[<span class="hljs-keyword">_t</span>][j|c[i]][k|c[i]][<span class="hljs-number">0</span>],d[<span class="hljs-keyword">_t</span>^<span class="hljs-number">1</span>][j][k][<span class="hljs-number">0</span>]);<br>    <span class="hljs-keyword">if</span>(k==<span class="hljs-number">0</span>)<span class="hljs-keyword">break</span>;<br>&#125;<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    inc(j,<span class="hljs-number">0</span>,tot)<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=j;;k=(k<span class="hljs-number">-1</span>)&amp;j)&#123;<br>inc(v,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)d[<span class="hljs-keyword">_t</span>][j][k][v]=<span class="hljs-number">0</span>;<br>inc(v,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)upd(d[<span class="hljs-keyword">_t</span>][j][k][<span class="hljs-number">0</span>],d[<span class="hljs-keyword">_t</span>^<span class="hljs-number">1</span>][j][k][v]);<br><span class="hljs-keyword">if</span>(k==<span class="hljs-number">0</span>)<span class="hljs-keyword">break</span>;<br>    &#125;<br>    inc(j,<span class="hljs-number">0</span>,tot)<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=j;;k=(k<span class="hljs-number">-1</span>)&amp;j)&#123;<br><span class="hljs-keyword">if</span>((k&amp;c[i])==<span class="hljs-number">0</span>)<br>inc(v,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)<br>    upd(d[<span class="hljs-keyword">_t</span>][j|c[i]][k][<span class="hljs-number">1</span>],d[<span class="hljs-keyword">_t</span>^<span class="hljs-number">1</span>][j][k][v]);<br><span class="hljs-keyword">if</span>(((k^j)&amp;c[i])==<span class="hljs-number">0</span>)<br>inc(v,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)<br>    upd(d[<span class="hljs-keyword">_t</span>][j|c[i]][k|c[i]][<span class="hljs-number">2</span>],d[<span class="hljs-keyword">_t</span>^<span class="hljs-number">1</span>][j][k][v]);<br><span class="hljs-keyword">if</span>(k==<span class="hljs-number">0</span>)<span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br>    &#125;<br>    inc(j,<span class="hljs-number">0</span>,tot)<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=j;;k=(k<span class="hljs-number">-1</span>)&amp;j)&#123;<br>inc(v,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)upd(ans,d[<span class="hljs-keyword">_t</span>][j][k][v]);<br><span class="hljs-keyword">if</span>(k==<span class="hljs-number">0</span>)<span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problem/P2150&quot; target=&quot;_blank&quot; 
      
    
    </summary>
    
    
      <category term="DP" scheme="https://45.32.8.125/tags/DP/"/>
    
  </entry>
  
</feed>
