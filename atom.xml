<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>qkoqhh</title>
  
  <subtitle>什么都没有</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://qkoqhh.github.io/"/>
  <updated>2020-01-07T16:20:35.769Z</updated>
  <id>https://qkoqhh.github.io/</id>
  
  <author>
    <name>qkoqhh</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>gym102428F(DP)</title>
    <link href="https://qkoqhh.github.io/gym102428F/"/>
    <id>https://qkoqhh.github.io/gym102428F/</id>
    <published>2019-12-13T07:32:15.000Z</published>
    <updated>2020-01-07T16:20:35.769Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://codeforces.com/gym/102428/problem/F" target="_blank" rel="noopener">https://codeforces.com/gym/102428/problem/F</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定 $m$ 个砖块，要把这些砖块放入 $n$ 列中，其中每列最少有一个砖块，且排布上不能出现凹陷之处(即最多只有一个单峰)</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>场上用了个傻逼方法推了贼久。。</p><p>如果没有单峰显然是个分拆数，有单峰的话需要修改一下 DP 方程</p><p>考虑两种操作，在两侧就加 $1$ 和整体加一，那么很容易得到转移</p><p>可是对 $1$ $2$ $1$ 这种数据，会计重，因此需要减去同时在两侧加上 $1$ 的情况，最后</p><script type="math/tex; mode=display">d[i][j]=d[i][j-i]+d[i-1][j-1]\times2-d[i-2][j-2]</script><p>如果一开始是空的，加 $1$ 的方案就只有一种，因此需要特判 $d[i][i]=1$</p><h4 id="另一种解法："><a href="#另一种解法：" class="headerlink" title="另一种解法："></a>另一种解法：</h4><p>网友们似乎都是从低向上叠的，考虑 $d[i][j]$ 为 剩下 $i$ 个砖块，底层是 $j$ 的方案数</p><p>那么，可以直接往上叠，也可以去掉最左边的底或者最右边的底，同样会出现 $1$ $2$ $1$ 这中情况，需要去重，有</p><script type="math/tex; mode=display">d[i][j]=d[i-j][j]+2*d[i][j-1]-d[i][j-2]</script><p>先放砖块后转移就可以了</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>解法一：</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 5005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 505</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><span class="hljs-keyword">int</span> n,m;<br>ll d[NM][NM];<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();m=read();<br>    d[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    inc(i,<span class="hljs-number">1</span>,n)&#123;<br>d[i][i]=<span class="hljs-number">1</span>;<br>inc(j,i+<span class="hljs-number">1</span>,m)<span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">1</span>&amp;&amp;j&gt;<span class="hljs-number">1</span>)d[i][j]=(d[i][j-i]+<span class="hljs-number">2</span>*d[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>]-d[i<span class="hljs-number">-2</span>][j<span class="hljs-number">-2</span>]+inf)%inf;<br><span class="hljs-keyword">else</span> d[i][j]=(d[i][j-i]+<span class="hljs-number">2</span>*d[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>])%inf;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>*<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,d[n][m]);<br>&#125;<br></code></pre></td></tr></table></figure><p>解法二：</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 5005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 505</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><span class="hljs-keyword">int</span> n,m;<br>ll d[NM][NM];<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();m=read();m-=n;<br>    inc(i,<span class="hljs-number">0</span>,n)d[<span class="hljs-number">0</span>][i]=<span class="hljs-number">1</span>;<br>    inc(i,<span class="hljs-number">1</span>,m)inc(j,<span class="hljs-number">1</span>,n)<br><span class="hljs-keyword">if</span>(j&gt;<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">if</span>(i&gt;=j)d[i][j]=(d[i-j][j]+d[i][j<span class="hljs-number">-1</span>]*<span class="hljs-number">2</span>-d[i][j<span class="hljs-number">-2</span>]+inf)%inf;<br>    <span class="hljs-keyword">else</span> d[i][j]=(d[i][j<span class="hljs-number">-1</span>]*<span class="hljs-number">2</span>-d[i][j<span class="hljs-number">-2</span>]+inf)%inf;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i&gt;=j)d[i][j]=(d[i-j][j]+d[i][j<span class="hljs-number">-1</span>]*<span class="hljs-number">2</span>)%inf;<br><span class="hljs-keyword">else</span> d[i][j]=d[i][j<span class="hljs-number">-1</span>]*<span class="hljs-number">2</span>%inf;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,d[m][n]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://codeforces.com/gym/102428/problem/F&quot; target=&quot;
      
    
    </summary>
    
    
      <category term="DP" scheme="https://qkoqhh.github.io/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>uoj185(DP+容斥)</title>
    <link href="https://qkoqhh.github.io/uoj185/"/>
    <id>https://qkoqhh.github.io/uoj185/</id>
    <published>2019-11-16T01:51:11.000Z</published>
    <updated>2019-11-16T02:41:43.678Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://uoj.ac/problem/185" target="_blank" rel="noopener">http://uoj.ac/problem/185</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>要找到一一对应的关系是比较难的，如果我们只保证映射上的点之间有对应边的存在，而不考虑他们必须一一对应，那么情况就会简单很多了。。</p><p>设 $d[i][j]$ 为 $i$ 子树映射的方案数，其中 $i$ 点映射在 $j$ 上，那么有</p><script type="math/tex; mode=display">d[i][j]=\prod_{son} \sum_{(j,k)\in E} d[son][k]</script><p>结合一下分配律可知复杂度为 $O(nm)$</p><p>然后接下来考虑一一对应的限制，其实只要让他们的映射集合为全集就可以了，这很显然容斥一下就可以。。</p><p>因此总复杂度为 $O(nm2^n)$</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp make_pair</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 18</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 289</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span>&#123;</span><span class="hljs-keyword">int</span> t;edge*next;&#125;e[nm],*h[NM],*o=e;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;o-&gt;t=y;o-&gt;next=h[x];h[x]=o++;&#125;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;vec,ed[NM];<br><span class="hljs-keyword">int</span> n,m,_x,_y,tot;<br>ll ans,d[NM][NM];<br><span class="hljs-keyword">bool</span> v[NM];<br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> f=<span class="hljs-number">0</span>)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span>&amp;i:vec)d[x][i]=<span class="hljs-number">1</span>;<br>    link(x)<span class="hljs-keyword">if</span>(j-&gt;t!=f)&#123;<br>dfs(j-&gt;t,x);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span>&amp;i:vec)&#123;<br>    ll s=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span>&amp;k:ed[i])<span class="hljs-keyword">if</span>(v[k])s+=d[j-&gt;t][k];<br>    d[x][i]=d[x][i]*s;<br>&#125;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();m=read();<br>    <span class="hljs-keyword">while</span>(m--)&#123;<br>_x=read();_y=read();<br>ed[_x].push_back(_y);<br>ed[_y].push_back(_x);<br>    &#125;<br>    inc(i,<span class="hljs-number">2</span>,n)&#123;<br>_x=read();_y=read();<br>add(_x,_y);add(_y,_x);<br>    &#125;<br>    tot=succ(n)<span class="hljs-number">-1</span>;<br>    inc(i,<span class="hljs-number">1</span>,tot)&#123;<br>vec.clear();mem(v);<br>inc(j,<span class="hljs-number">1</span>,n)<span class="hljs-keyword">if</span>(i&gt;&gt;(j<span class="hljs-number">-1</span>)&amp;<span class="hljs-number">1</span>)vec.push_back(j),v[j]++;<br>dfs(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span>&amp;j:vec)<br>    <span class="hljs-keyword">if</span>(__builtin_popcount(i^tot)&amp;<span class="hljs-number">1</span>)ans-=d[<span class="hljs-number">1</span>][j];<br>    <span class="hljs-keyword">else</span> ans+=d[<span class="hljs-number">1</span>][j];<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://uoj.ac/problem/185&quot; target=&quot;_blank&quot; rel=&quot;noope
      
    
    </summary>
    
    
      <category term="DP" scheme="https://qkoqhh.github.io/tags/DP/"/>
    
      <category term="组合数学" scheme="https://qkoqhh.github.io/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>luogu4336(矩阵树定理+容斥)</title>
    <link href="https://qkoqhh.github.io/luogu4336/"/>
    <id>https://qkoqhh.github.io/luogu4336/</id>
    <published>2019-11-13T12:56:14.000Z</published>
    <updated>2019-11-13T13:33:00.626Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.org/problem/P4336" target="_blank" rel="noopener">https://www.luogu.org/problem/P4336</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>虽然生成树计数确实会想到矩阵树定理，不过因为感觉用不上去于是走在了状压的不归路上QAQ</p><p>如果硬套矩阵树定理会发现可能会出现一个人占据多条边的情况，其实这意味着有些人没有支配着边，所以只需要排除掉非全集的情况就可以了，容斥也就显而易见。。</p><p>还是太菜了。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 18</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 20000005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reduce</span><span class="hljs-params">(ll&amp;x)</span></span>&#123;x+=x&gt;&gt;<span class="hljs-number">63</span>&amp;inf;&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">qpow</span><span class="hljs-params">(ll x,ll t)</span></span>&#123;<br>    ll s=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(;t;t&gt;&gt;=<span class="hljs-number">1</span>,x=x*x%inf)<span class="hljs-keyword">if</span>(t&amp;<span class="hljs-number">1</span>)s=s*x%inf;<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br><span class="hljs-keyword">int</span> n,tot,_x,_y;<br>ll a[NM][NM];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">P</span>&#123;</span><span class="hljs-keyword">int</span> x,y;&#125;;<br><span class="hljs-built_in">vector</span>&lt;P&gt;vec[NM];<br>ll ans;<br><br><br><span class="hljs-function">ll <span class="hljs-title">cal</span><span class="hljs-params">()</span></span>&#123;<br>    ll s=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> cnt=<span class="hljs-number">0</span>;<br>    inc(i,<span class="hljs-number">1</span>,n)inc(j,<span class="hljs-number">1</span>,n)reduce(a[i][j]);<br>    inc(i,<span class="hljs-number">1</span>,n)inc(j,i+<span class="hljs-number">1</span>,n)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> x=i,y=j;a[y][i];swap(x,y))&#123;<br>    ll t=a[x][i]*qpow(a[y][i],inf<span class="hljs-number">-2</span>)%inf;<br>    inc(k,i,n)reduce(a[x][k]-=t*a[y][k]%inf);<br>&#125;<br><span class="hljs-keyword">if</span>(!a[i][i])swap(a[i],a[j]),cnt^=<span class="hljs-number">1</span>;<br>    &#125;<br>    inc(i,<span class="hljs-number">1</span>,n)s=s*a[i][i]%inf;<br>    <span class="hljs-keyword">if</span>(cnt)reduce(s=-s);<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read()<span class="hljs-number">-1</span>;tot=succ(n)<span class="hljs-number">-1</span>;<br>    inc(i,<span class="hljs-number">1</span>,n)&#123;<br><span class="hljs-keyword">int</span> m=read();<br><span class="hljs-keyword">while</span>(m--)&#123;<br>    _x=read();_y=read();<br>    vec[i].push_back(&#123;_x,_y&#125;);<br>&#125;<br>    &#125;<br>    inc(i,<span class="hljs-number">0</span>,tot)&#123;<br>mem(a);<br>inc(j,<span class="hljs-number">1</span>,n)<span class="hljs-keyword">if</span>(i&gt;&gt;(j<span class="hljs-number">-1</span>)&amp;<span class="hljs-number">1</span>)<span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp;k:vec[j])&#123;<br>    a[k.x][k.y]--;a[k.y][k.x]--;<br>    a[k.x][k.x]++;a[k.y][k.y]++;<br>&#125;<br><span class="hljs-keyword">if</span>(__builtin_popcount(i^tot)&amp;<span class="hljs-number">1</span>)reduce(ans-=cal());<br><span class="hljs-keyword">else</span> reduce(ans+=cal()-inf);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problem/P4336&quot; target=&quot;_blank&quot; 
      
    
    </summary>
    
    
      <category term="组合数学" scheme="https://qkoqhh.github.io/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
    
      <category term="矩阵树定理" scheme="https://qkoqhh.github.io/tags/%E7%9F%A9%E9%98%B5%E6%A0%91%E5%AE%9A%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>loj2002(倍增)</title>
    <link href="https://qkoqhh.github.io/loj2002/"/>
    <id>https://qkoqhh.github.io/loj2002/</id>
    <published>2019-11-13T10:05:04.000Z</published>
    <updated>2019-11-13T10:07:42.933Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://loj.ac/problem/2002" target="_blank" rel="noopener">https://loj.ac/problem/2002</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>感觉就是做 $n$ 次模卷积，由于模数比较小，所以直接倍增暴力就可以。。</p><p>对于要求至少一个质数先用上全部的减去用上非质数即可。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 100005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 20000005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">20170408</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><span class="hljs-keyword">int</span> n,m,p,_m;<br>ll d[<span class="hljs-number">32</span>][NM],ans[NM],_ans,tmp[NM];<br><span class="hljs-keyword">bool</span> v[nm];<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();_m=m=read();p=read();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>;i&lt;=m;i++)<span class="hljs-keyword">if</span>(!v[i])<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=i&lt;&lt;<span class="hljs-number">1</span>;j&lt;=m;j+=i)v[j]++;<br>    inc(i,<span class="hljs-number">0</span>,p<span class="hljs-number">-1</span>)d[<span class="hljs-number">0</span>][i]=m/p;<br>    m%=p;<br>    inc(i,<span class="hljs-number">1</span>,m)d[<span class="hljs-number">0</span>][i]++;<br>    m=p<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;succ(i)&lt;=n;i++)<br>inc(j,<span class="hljs-number">0</span>,m)inc(k,<span class="hljs-number">0</span>,m)(d[i][(j+k)%p]+=d[i<span class="hljs-number">-1</span>][j]*d[i<span class="hljs-number">-1</span>][k])%=inf;<br>    ans[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;succ(i)&lt;=n;i++)<span class="hljs-keyword">if</span>(n&gt;&gt;i&amp;<span class="hljs-number">1</span>)&#123;<br><span class="hljs-built_in">memcpy</span>(tmp,ans,<span class="hljs-keyword">sizeof</span>(ans));mem(ans);<br>inc(j,<span class="hljs-number">0</span>,m)inc(k,<span class="hljs-number">0</span>,m)(ans[(j+k)%p]+=tmp[j]*d[i][k])%=inf;<br>    &#125;<br>    _ans=ans[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>;i&lt;=_m;i++)<span class="hljs-keyword">if</span>(!v[i])d[<span class="hljs-number">0</span>][i%p]--;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;succ(i)&lt;=n;i++)&#123;<br>mem(d[i]);<br>inc(j,<span class="hljs-number">0</span>,m)inc(k,<span class="hljs-number">0</span>,m)(d[i][(j+k)%p]+=d[i<span class="hljs-number">-1</span>][j]*d[i<span class="hljs-number">-1</span>][k])%=inf;<br>    &#125;<br>    mem(ans);ans[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;succ(i)&lt;=n;i++)<span class="hljs-keyword">if</span>(n&gt;&gt;i&amp;<span class="hljs-number">1</span>)&#123;<br><span class="hljs-built_in">memcpy</span>(tmp,ans,<span class="hljs-keyword">sizeof</span>(ans));mem(ans);<br>inc(j,<span class="hljs-number">0</span>,m)inc(k,<span class="hljs-number">0</span>,m)(ans[(j+k)%p]+=tmp[j]*d[i][k])%=inf;<br>    &#125;<br>    _ans+=inf-ans[<span class="hljs-number">0</span>];_ans%=inf;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,_ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://loj.ac/problem/2002&quot; target=&quot;_blank&quot; rel=&quot;noo
      
    
    </summary>
    
    
      <category term="组合数学" scheme="https://qkoqhh.github.io/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
    
      <category term="unclassified" scheme="https://qkoqhh.github.io/tags/unclassified/"/>
    
  </entry>
  
  <entry>
    <title>luogu2150(状压DP)</title>
    <link href="https://qkoqhh.github.io/luogu2150/"/>
    <id>https://qkoqhh.github.io/luogu2150/</id>
    <published>2019-11-07T07:20:04.000Z</published>
    <updated>2019-11-07T07:23:54.241Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.org/problem/P2150" target="_blank" rel="noopener">https://www.luogu.org/problem/P2150</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>写了上个题感觉这道相对还是好写得多。。但是还是很麻烦。。</p><p>同样对最大的质数排序，然后根据最大质数分段考虑。。</p><p>对 $\sqrt n$ 以内的质数三进制状压，代表该质数没选或者是被谁选中，再设一维表示当前质数是否被选，然后分类讨论转移即可。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 505</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 256</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> p[]=&#123;<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">11</span>,<span class="hljs-number">13</span>,<span class="hljs-number">17</span>,<span class="hljs-number">19</span>&#125;;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> m=<span class="hljs-number">7</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> tot=succ(<span class="hljs-number">8</span>)<span class="hljs-number">-1</span>;<br>ll inf;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reduce</span><span class="hljs-params">(ll&amp;x)</span></span>&#123;x+=x&gt;&gt;<span class="hljs-number">63</span>&amp;inf;&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">upd</span><span class="hljs-params">(ll&amp;x,ll y)</span></span>&#123;reduce(x+=y-inf);&#125;<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-keyword">int</span> mn[NM],c[NM],<span class="hljs-keyword">_t</span>,tmp[NM];<br>ll d[<span class="hljs-number">2</span>][nm][nm][<span class="hljs-number">3</span>],ans;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<span class="hljs-keyword">return</span> mn[x]&lt;mn[y];&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();inf=read();<br>    inc(i,<span class="hljs-number">2</span>,n)<span class="hljs-keyword">if</span>(!mn[i])<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=i;j&lt;=n;j+=i)mn[j]=i;<br>    inc(i,<span class="hljs-number">2</span>,n)inc(j,<span class="hljs-number">0</span>,m)<span class="hljs-keyword">if</span>(i%p[j]==<span class="hljs-number">0</span>)c[i]|=succ(j);<br>    inc(i,<span class="hljs-number">2</span>,n)<span class="hljs-keyword">if</span>(mn[i]&lt;=<span class="hljs-number">19</span>)mn[i]=<span class="hljs-number">0</span>;<br>    inc(i,<span class="hljs-number">2</span>,n)tmp[i]=i;<br>    sort(tmp+<span class="hljs-number">2</span>,tmp+<span class="hljs-number">1</span>+n,cmp);<br>    d[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    inc(_k,<span class="hljs-number">2</span>,n)&#123;<br><span class="hljs-keyword">int</span> i=tmp[_k];<br><span class="hljs-keyword">_t</span>^=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(mn[i]==mn[tmp[_k<span class="hljs-number">-1</span>]])&#123;<br>    <span class="hljs-keyword">if</span>(mn[i])&#123;<br>inc(j,<span class="hljs-number">0</span>,tot)<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=j;;k=(k<span class="hljs-number">-1</span>)&amp;j)&#123;<br>    inc(v,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)d[<span class="hljs-keyword">_t</span>][j][k][v]=d[<span class="hljs-keyword">_t</span>^<span class="hljs-number">1</span>][j][k][v];<br>    <span class="hljs-keyword">if</span>(k==<span class="hljs-number">0</span>)<span class="hljs-keyword">break</span>;<br>&#125;<br>inc(j,<span class="hljs-number">0</span>,tot)<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=j;;k=(k<span class="hljs-number">-1</span>)&amp;j)&#123;<br>    inc(v,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)&#123;<br><span class="hljs-keyword">if</span>((k&amp;c[i])==<span class="hljs-number">0</span>&amp;&amp;v!=<span class="hljs-number">2</span>)<br>    upd(d[<span class="hljs-keyword">_t</span>][j|c[i]][k][<span class="hljs-number">1</span>],d[<span class="hljs-keyword">_t</span>^<span class="hljs-number">1</span>][j][k][v]);<br><span class="hljs-keyword">if</span>(((k^j)&amp;c[i])==<span class="hljs-number">0</span>&amp;&amp;v!=<span class="hljs-number">1</span>)<br>    upd(d[<span class="hljs-keyword">_t</span>][j|c[i]][k|c[i]][<span class="hljs-number">2</span>],d[<span class="hljs-keyword">_t</span>^<span class="hljs-number">1</span>][j][k][v]);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(k==<span class="hljs-number">0</span>)<span class="hljs-keyword">break</span>;<br>&#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>inc(j,<span class="hljs-number">0</span>,tot)<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=j;;k=(k<span class="hljs-number">-1</span>)&amp;j)&#123;<br>    d[<span class="hljs-keyword">_t</span>][j][k][<span class="hljs-number">0</span>]=d[<span class="hljs-keyword">_t</span>^<span class="hljs-number">1</span>][j][k][<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">if</span>(k==<span class="hljs-number">0</span>)<span class="hljs-keyword">break</span>;<br>&#125;<br>inc(j,<span class="hljs-number">0</span>,tot)<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=j;;k=(k<span class="hljs-number">-1</span>)&amp;j)&#123;<br>    <span class="hljs-keyword">if</span>((k&amp;c[i])==<span class="hljs-number">0</span>)<br>upd(d[<span class="hljs-keyword">_t</span>][j|c[i]][k][<span class="hljs-number">0</span>],d[<span class="hljs-keyword">_t</span>^<span class="hljs-number">1</span>][j][k][<span class="hljs-number">0</span>]);<br>    <span class="hljs-keyword">if</span>(((k^j)&amp;c[i])==<span class="hljs-number">0</span>)<br>upd(d[<span class="hljs-keyword">_t</span>][j|c[i]][k|c[i]][<span class="hljs-number">0</span>],d[<span class="hljs-keyword">_t</span>^<span class="hljs-number">1</span>][j][k][<span class="hljs-number">0</span>]);<br>    <span class="hljs-keyword">if</span>(k==<span class="hljs-number">0</span>)<span class="hljs-keyword">break</span>;<br>&#125;<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    inc(j,<span class="hljs-number">0</span>,tot)<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=j;;k=(k<span class="hljs-number">-1</span>)&amp;j)&#123;<br>inc(v,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)d[<span class="hljs-keyword">_t</span>][j][k][v]=<span class="hljs-number">0</span>;<br>inc(v,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)upd(d[<span class="hljs-keyword">_t</span>][j][k][<span class="hljs-number">0</span>],d[<span class="hljs-keyword">_t</span>^<span class="hljs-number">1</span>][j][k][v]);<br><span class="hljs-keyword">if</span>(k==<span class="hljs-number">0</span>)<span class="hljs-keyword">break</span>;<br>    &#125;<br>    inc(j,<span class="hljs-number">0</span>,tot)<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=j;;k=(k<span class="hljs-number">-1</span>)&amp;j)&#123;<br><span class="hljs-keyword">if</span>((k&amp;c[i])==<span class="hljs-number">0</span>)<br>inc(v,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)<br>    upd(d[<span class="hljs-keyword">_t</span>][j|c[i]][k][<span class="hljs-number">1</span>],d[<span class="hljs-keyword">_t</span>^<span class="hljs-number">1</span>][j][k][v]);<br><span class="hljs-keyword">if</span>(((k^j)&amp;c[i])==<span class="hljs-number">0</span>)<br>inc(v,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)<br>    upd(d[<span class="hljs-keyword">_t</span>][j|c[i]][k|c[i]][<span class="hljs-number">2</span>],d[<span class="hljs-keyword">_t</span>^<span class="hljs-number">1</span>][j][k][v]);<br><span class="hljs-keyword">if</span>(k==<span class="hljs-number">0</span>)<span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br>    &#125;<br>    inc(j,<span class="hljs-number">0</span>,tot)<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=j;;k=(k<span class="hljs-number">-1</span>)&amp;j)&#123;<br>inc(v,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)upd(ans,d[<span class="hljs-keyword">_t</span>][j][k][v]);<br><span class="hljs-keyword">if</span>(k==<span class="hljs-number">0</span>)<span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problem/P2150&quot; target=&quot;_blank&quot; 
      
    
    </summary>
    
    
      <category term="DP" scheme="https://qkoqhh.github.io/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>luogu5616(状压DP)</title>
    <link href="https://qkoqhh.github.io/luogu5616/"/>
    <id>https://qkoqhh.github.io/luogu5616/</id>
    <published>2019-11-05T02:47:13.000Z</published>
    <updated>2019-11-05T02:51:22.751Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.org/problem/P5616" target="_blank" rel="noopener">https://www.luogu.org/problem/P5616</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p> 这个题让窝想到了 NOI 的寿司晚宴，然后发现那题窝还没补(X)</p><p>那么同样很容易想到对小于 $\sqrt{300}$ 的数进行状压，然后再考虑大质数的贡献。。</p><p>然后就没想到怎么处理大质数的贡献了。。</p><p>题解是对所有数按最大素因子进行排序，然后分段考虑当前质数有没有取到，这样就可以把大质数的问题解决了。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1ll&lt;&lt;(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 305</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 300005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> p[]=&#123;<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">11</span>,<span class="hljs-number">13</span>,<span class="hljs-number">17</span>&#125;;<br>ll pre[<span class="hljs-number">7</span>][<span class="hljs-number">9</span>];<br>ll inf;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reduce</span><span class="hljs-params">(ll&amp;x)</span></span>&#123;x+=x&gt;&gt;<span class="hljs-number">63</span>&amp;inf;&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">upd</span><span class="hljs-params">(ll&amp;x,ll y)</span></span>&#123;reduce(x+=y-inf);&#125;<br><span class="hljs-keyword">int</span> a[NM],tmp[NM],c[<span class="hljs-number">7</span>],<span class="hljs-keyword">_t</span>,mn[NM],n;<br>ll p2[nm],d[<span class="hljs-number">2</span>][<span class="hljs-number">9</span>][<span class="hljs-number">6</span>][<span class="hljs-number">4</span>][<span class="hljs-number">3</span>][<span class="hljs-number">3</span>][<span class="hljs-number">3</span>][<span class="hljs-number">3</span>][<span class="hljs-number">2</span>],ans;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> _=read();inf=read();<br>    p2[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;inc(i,<span class="hljs-number">1</span>,_)p2[i]=p2[i<span class="hljs-number">-1</span>]*<span class="hljs-number">2</span>%inf;<br>    <span class="hljs-keyword">while</span>(_--)a[read()]++;<br>    n=<span class="hljs-number">300</span>;<br>    inc(i,<span class="hljs-number">1</span>,n)tmp[i]=i;<br>    mn[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    inc(i,<span class="hljs-number">2</span>,n)<span class="hljs-keyword">if</span>(!mn[i])<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=i;j&lt;=n;j+=i)mn[j]=i;<br>    sort(tmp+<span class="hljs-number">1</span>,tmp+<span class="hljs-number">1</span>+n,[&amp;](<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)&#123;<span class="hljs-keyword">return</span> mn[x]&lt;mn[y];&#125;);<br>    d[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    inc(i,<span class="hljs-number">1</span>,n)<span class="hljs-keyword">if</span>(mn[i]&lt;=<span class="hljs-number">17</span>)mn[i]=<span class="hljs-number">0</span>;<br>    inc(k,<span class="hljs-number">1</span>,n)&#123;<br><span class="hljs-keyword">int</span> i=tmp[k];<br><span class="hljs-keyword">_t</span>^=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(mn[i]==mn[tmp[k<span class="hljs-number">-1</span>]])<span class="hljs-built_in">memcpy</span>(d[<span class="hljs-keyword">_t</span>],d[<span class="hljs-keyword">_t</span>^<span class="hljs-number">1</span>],<span class="hljs-keyword">sizeof</span>(d[<span class="hljs-keyword">_t</span>^<span class="hljs-number">1</span>]));<br><span class="hljs-keyword">else</span>&#123;<br>    mem(d[<span class="hljs-keyword">_t</span>]);<br>    inc(t0,<span class="hljs-number">0</span>,<span class="hljs-number">8</span>)inc(t1,<span class="hljs-number">0</span>,<span class="hljs-number">5</span>)inc(t2,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>)inc(t3,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)inc(t4,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)inc(t5,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)inc(t6,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)inc(v,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)<br>upd(d[<span class="hljs-keyword">_t</span>][t0][t1][t2][t3][t4][t5][t6][<span class="hljs-number">0</span>],d[<span class="hljs-keyword">_t</span>^<span class="hljs-number">1</span>][t0][t1][t2][t3][t4][t5][t6][v]);<br>&#125;<br>mem(c);<br>inc(j,<span class="hljs-number">0</span>,<span class="hljs-number">6</span>)<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> t=i;t%p[j]==<span class="hljs-number">0</span>;t/=p[j])c[j]++;<br><span class="hljs-keyword">if</span>(mn[i]!=mn[tmp[k<span class="hljs-number">-1</span>]])&#123;<br>    inc(t0,<span class="hljs-number">0</span>,<span class="hljs-number">8</span>)inc(t1,<span class="hljs-number">0</span>,<span class="hljs-number">5</span>)inc(t2,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>)inc(t3,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)inc(t4,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)inc(t5,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)inc(t6,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)inc(v,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)<br>upd(d[<span class="hljs-keyword">_t</span>][max(t0,c[<span class="hljs-number">0</span>])][max(t1,c[<span class="hljs-number">1</span>])][max(t2,c[<span class="hljs-number">2</span>])][max(t3,c[<span class="hljs-number">3</span>])][max(t4,c[<span class="hljs-number">4</span>])][max(t5,c[<span class="hljs-number">5</span>])][max(t6,c[<span class="hljs-number">6</span>])][<span class="hljs-number">1</span>]<br>,d[<span class="hljs-keyword">_t</span>^<span class="hljs-number">1</span>][t0][t1][t2][t3][t4][t5][t6][v]*(p2[a[i]]<span class="hljs-number">-1</span>+inf)%inf*mn[i]%inf);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    inc(t0,<span class="hljs-number">0</span>,<span class="hljs-number">8</span>)inc(t1,<span class="hljs-number">0</span>,<span class="hljs-number">5</span>)inc(t2,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>)inc(t3,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)inc(t4,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)inc(t5,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)inc(t6,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)<br>upd(d[<span class="hljs-keyword">_t</span>][max(t0,c[<span class="hljs-number">0</span>])][max(t1,c[<span class="hljs-number">1</span>])][max(t2,c[<span class="hljs-number">2</span>])][max(t3,c[<span class="hljs-number">3</span>])][max(t4,c[<span class="hljs-number">4</span>])][max(t5,c[<span class="hljs-number">5</span>])][max(t6,c[<span class="hljs-number">6</span>])][<span class="hljs-number">1</span>]<br>,d[<span class="hljs-keyword">_t</span>^<span class="hljs-number">1</span>][t0][t1][t2][t3][t4][t5][t6][<span class="hljs-number">0</span>]*(p2[a[i]]<span class="hljs-number">-1</span>+inf)%inf*mn[i]%inf);<br>    inc(t0,<span class="hljs-number">0</span>,<span class="hljs-number">8</span>)inc(t1,<span class="hljs-number">0</span>,<span class="hljs-number">5</span>)inc(t2,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>)inc(t3,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)inc(t4,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)inc(t5,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)inc(t6,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)<br>upd(d[<span class="hljs-keyword">_t</span>][max(t0,c[<span class="hljs-number">0</span>])][max(t1,c[<span class="hljs-number">1</span>])][max(t2,c[<span class="hljs-number">2</span>])][max(t3,c[<span class="hljs-number">3</span>])][max(t4,c[<span class="hljs-number">4</span>])][max(t5,c[<span class="hljs-number">5</span>])][max(t6,c[<span class="hljs-number">6</span>])][<span class="hljs-number">1</span>]<br>,d[<span class="hljs-keyword">_t</span>^<span class="hljs-number">1</span>][t0][t1][t2][t3][t4][t5][t6][<span class="hljs-number">1</span>]*(p2[a[i]]<span class="hljs-number">-1</span>+inf)%inf);<br>&#125;<br>    &#125;<br>    inc(i,<span class="hljs-number">0</span>,<span class="hljs-number">6</span>)&#123;pre[i][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;inc(j,<span class="hljs-number">1</span>,<span class="hljs-number">8</span>)pre[i][j]=pre[i][j<span class="hljs-number">-1</span>]*p[i];&#125;<br>    inc(t0,<span class="hljs-number">0</span>,<span class="hljs-number">8</span>)inc(t1,<span class="hljs-number">0</span>,<span class="hljs-number">5</span>)inc(t2,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>)inc(t3,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)inc(t4,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)inc(t5,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)inc(t6,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)inc(v,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)<br>upd(ans,d[<span class="hljs-keyword">_t</span>][t0][t1][t2][t3][t4][t5][t6][v]*pre[<span class="hljs-number">0</span>][t0]*pre[<span class="hljs-number">1</span>][t1]*pre[<span class="hljs-number">2</span>][t2]%inf*pre[<span class="hljs-number">3</span>][t3]*pre[<span class="hljs-number">4</span>][t4]*pre[<span class="hljs-number">5</span>][t5]%inf*pre[<span class="hljs-number">6</span>][t6]%inf);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problem/P5616&quot; target=&quot;_blank&quot; 
      
    
    </summary>
    
    
      <category term="DP" scheme="https://qkoqhh.github.io/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>uoj104(wqs二分+斜率优化)</title>
    <link href="https://qkoqhh.github.io/uoj104/"/>
    <id>https://qkoqhh.github.io/uoj104/</id>
    <published>2019-11-02T08:56:54.000Z</published>
    <updated>2019-11-02T09:45:07.468Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://uoj.ac/problem/104" target="_blank" rel="noopener">http://uoj.ac/problem/104</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>主要学习 $wqs$ 二分求解时的方案输出，处理起来还是比较麻烦的。。</p><p>当二分到需要的权值时，用这个权值再做一次 $DP$ ，并记录<strong>所有</strong>转移路径，并维护转移到当前点所需要经过的最少的边和最多的边，然后从后往前搜，当当前需要的转移数加在两个最值之间，这个一定可以作为一个转移点，那么直接选择这个转移点往下搜就可以了。。</p><p>这个算法唯一的问题就是转移的边可能会很多。。但是想把这个卡 T 这个数据实在是不太好造(至少窝觉得这对出题人来说是个非常有挑战性的构造题)，所以窝萌就把他忽略了吧。。</p><p>有个细节是，当窝在二分时将 转移次数 $\ge k$ 作为二分判断条件时会在边界求解不出真正的解，这是因为在 $DP$ 的时候窝优先取前面的决策点(因为窝还要将后面的决策点保留到队列中以记录转移路径)。因此在遇到边界条件(凸包上平的那一段)窝会优先选择区间划分数较小的一段，所以如果当用 转移次数 $\ge k$ 时除非转移次数等于 $k$ 否则该权值下没有窝萌需要的答案。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1ll&lt;&lt;(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 100005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 10005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">998244353</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><span class="hljs-keyword">int</span> n,m;<br>ll d[NM],ans,a[NM];<br><span class="hljs-keyword">int</span> p[NM],q[NM],qh,qt,mmax[NM],mmin[NM],c[NM];<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;pre[NM];<br><br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">slope</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(a[x]==a[y])<span class="hljs-keyword">return</span> d[x]&gt;d[y]?inf:-inf;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1.0</span>*(d[x]-d[y])/(a[y]-a[x])+a[x]+a[y];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(ll t)</span></span>&#123;<br>    q[qh=qt=<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br>    inc(i,<span class="hljs-number">1</span>,n)&#123;<br><span class="hljs-keyword">while</span>(qh&lt;qt&amp;&amp;slope(q[qh],q[qh+<span class="hljs-number">1</span>])&lt;a[i])qh++;<br>d[i]=d[q[qh]]+(a[i]-a[q[qh]])*a[q[qh]]-t;<br>p[i]=p[q[qh]]+<span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span>(qh&lt;qt&amp;&amp;slope(q[qt<span class="hljs-number">-1</span>],q[qt])&gt;slope(q[qt],i))qt--;<br>q[++qt]=i;<br>    &#125;<br>    <span class="hljs-keyword">return</span> p[n]&lt;=m+<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">void</span> _check(ll <span class="hljs-keyword">_t</span>)&#123;<br>    q[qh=qt=<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br>    inc(i,<span class="hljs-number">1</span>,n)&#123;<br><span class="hljs-keyword">while</span>(qh&lt;qt&amp;&amp;slope(q[qh],q[qh+<span class="hljs-number">1</span>])&lt;a[i])qh++;<br>d[i]=d[q[qh]]+(a[i]-a[q[qh]])*a[q[qh]]-<span class="hljs-keyword">_t</span>;<br>mmin[i]=n+<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=qh,t=q[qh];k&lt;=qt&amp;&amp;d[i]+<span class="hljs-keyword">_t</span>==d[t]+(a[i]-a[t])*a[t];t=q[++k])&#123;<br>    pre[i].push_back(t);<br>    mmax[i]=max(mmax[i],mmax[t]+<span class="hljs-number">1</span>);<br>    mmin[i]=min(mmin[i],mmin[t]+<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">while</span>(qh&lt;qt&amp;&amp;slope(q[qt<span class="hljs-number">-1</span>],q[qt])&gt;slope(q[qt],i))qt--;<br>q[++qt]=i;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,d[n]+ans*(m+<span class="hljs-number">1</span>));<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> x=n,t=m;t;)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp;j:pre[x])<span class="hljs-keyword">if</span>(mmin[j]&lt;=t&amp;&amp;t&lt;=mmax[j])&#123;<br>    x=c[t]=j;<br>    t--;<br>    <span class="hljs-keyword">break</span>;<br>&#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();m=read();<br>    inc(i,<span class="hljs-number">1</span>,n)a[i]=read()+a[i<span class="hljs-number">-1</span>];<br>    <span class="hljs-keyword">for</span>(ll x=<span class="hljs-number">0</span>,y=a[n]*a[n];x&lt;=y;)<br><span class="hljs-keyword">if</span>(check(mid))&#123;<span class="hljs-comment">//&lt;=k</span><br>    ans=mid;y=mid<span class="hljs-number">-1</span>;<br>&#125;<span class="hljs-keyword">else</span> x=mid+<span class="hljs-number">1</span>;<br>    _check(ans);<br>    inc(i,<span class="hljs-number">1</span>,m)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d%c"</span>,c[i],<span class="hljs-string">" \n"</span>[i==m]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://uoj.ac/problem/104&quot; target=&quot;_blank&quot; rel=&quot;noope
      
    
    </summary>
    
    
      <category term="DP" scheme="https://qkoqhh.github.io/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>cf1250G(贪心)</title>
    <link href="https://qkoqhh.github.io/cf1250G/"/>
    <id>https://qkoqhh.github.io/cf1250G/</id>
    <published>2019-11-02T01:42:18.000Z</published>
    <updated>2019-11-02T02:16:19.945Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://codeforces.com/contest/1250/problem/G" target="_blank" rel="noopener">https://codeforces.com/contest/1250/problem/G</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>两个人玩 $n$ 轮游戏，初始每人的分数 $x,y$ 为 $0$ ，每轮 $x$ 加上 $a_i$ ，$y$ 加上 $b_i$ ，若有人分数超过 $k$ 则该人输，同时超过 $k$ 为平局</p><p>$x$ 在每轮可以选择一次操作，令 $x’=\max(0,x-y),y’=\max(0,y-x)$ ，问最少操作次数，使得 $x$ 获胜</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>由于在第 $i$ 轮操作的时候后，当前的分数是固定的，考虑维护 $d_i$ 表示在 $i$ 轮操作时保证 $x$ 不输的最少操作次数</p><p>由于 $d_i$ 是单调递增的，所以维护的时候上一次操作应该尽量靠前，因此可以直接二分决策点。。</p><p>然后维护出 $d_i$ 之后考虑在那个地方获胜，然后就能推出操作时的截断长度区间，根据这个区间直接二分，也是取靠前的决策点。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1ll&lt;&lt;(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 200005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 131072</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">998244353</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><span class="hljs-keyword">int</span> ans,n,_ans,p[NM],d[NM];<br>ll m,a[NM],b[NM],c[NM];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> _=read();<span class="hljs-keyword">while</span>(_--)&#123;<br>n=read();m=read();<br>inc(i,<span class="hljs-number">1</span>,n)a[i]=read()+a[i<span class="hljs-number">-1</span>];<br>inc(i,<span class="hljs-number">1</span>,n)b[i]=read()+b[i<span class="hljs-number">-1</span>];<br>inc(i,<span class="hljs-number">1</span>,n)c[i]=min(a[i],b[i]);<br>inc(i,<span class="hljs-number">1</span>,n)&#123;<br>    <span class="hljs-keyword">int</span> t=upper_bound(c,c+i,a[i]-m)-c;<br>    <span class="hljs-keyword">if</span>(t==i)&#123;n=i<span class="hljs-number">-1</span>;<span class="hljs-keyword">break</span>;&#125;<br>    d[i]=d[t]+<span class="hljs-number">1</span>;<br>    p[i]=t;<br>&#125;<br>ans=inf;_ans=<span class="hljs-number">0</span>;<br><span class="hljs-comment">//inc(i,1,n)printf("%d ",p[i]);putchar('\n');</span><br>inc(i,<span class="hljs-number">1</span>,n)<span class="hljs-keyword">if</span>(a[i]&lt;b[i])&#123;<br>    <span class="hljs-keyword">int</span> t=p[i];<br>    <span class="hljs-keyword">if</span>(b[i]-c[t]&gt;=m&amp;&amp;d[t]&lt;ans)ans=d[t],_ans=t;<br>&#125;<br><span class="hljs-keyword">if</span>(ans&lt;inf)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,ans);<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"-1\n"</span>);<br>    <span class="hljs-keyword">continue</span>;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> t=_ans;t;t=p[t])&#123;<br>    <span class="hljs-keyword">if</span>(t!=_ans)<span class="hljs-built_in">putchar</span>(<span class="hljs-string">' '</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d"</span>,t);<br>&#125;<br><span class="hljs-built_in">putchar</span>(<span class="hljs-string">'\n'</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/1250/problem/G&quot; target
      
    
    </summary>
    
    
      <category term="贪心" scheme="https://qkoqhh.github.io/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>cf1250E(二分图)</title>
    <link href="https://qkoqhh.github.io/cf1250E/"/>
    <id>https://qkoqhh.github.io/cf1250E/</id>
    <published>2019-11-02T01:22:08.000Z</published>
    <updated>2019-11-02T01:43:33.678Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://codeforces.com/contest/1250/problem/E" target="_blank" rel="noopener">https://codeforces.com/contest/1250/problem/E</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定 $n$ 个 $01$ 串，可以对其中若干个串进行前后翻转，问用最少的翻转次数，使得这些串两两之间的相似度大于 $k$ 。相似度定义为两个串做同或的 $1$ 的个数</p><p>$n\le50,|S|\le 50$</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>显然一个串只有两种状态，所以要决策将这个串放入哪个集合，使得两两之间不会发生冲突(相似度小于 $k$ )，很容易联想到最小割之类的东西。。。</p><p>那么考虑两个串 $S,T$ 之间可能出现的关系</p><p>若 $S$ 和 $T$ 冲突且 $S$ 和 $rev(T)$ 也会冲突，那么必然不会存在合法方案</p><p>若 $S$ 和 $T$ 冲突且 $S$ 和 $rev(T)$ 不冲突，那么 $S$ 和 $T$ 必然得在同一个集合中，我们考虑将这两个点合并</p><p>若 $S$ 和 $T$ 不冲突且 $S$ 和 $rev(T)$ 冲突，那么这两个串必然存在于不同集合中，连边</p><p>若 $S$ 和 $T$ 不冲突且 $S$ 和 $rev(T)$ 也不冲突，那么这两个串之间独立</p><p>另外，在合并完节点之后需要保证这些点之间的原串是不冲突的，因为同一集合这个限制条件没有传递性</p><p>然后考虑当前建的图，对每个联通块，如果不是二分图，那么显然也是不存在合法方案的。如果是二分图，选择点数较少的一侧翻转</p><p>然后就没了。。$O(n^2)$ <code>50ms 200KB</code> 你敢信？</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1ll&lt;&lt;(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 55</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 10005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">998244353</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span>&#123;</span><span class="hljs-keyword">int</span> t;edge*next;&#125;e[nm],*h[NM],*o=e;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;o-&gt;t=y;o-&gt;next=h[x];h[x]=o++;&#125;<br><span class="hljs-keyword">int</span> n,m,_p,f[NM],tot,c[NM];<br><span class="hljs-keyword">bool</span> a[NM][NM];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<span class="hljs-keyword">return</span> f[x]==x?x:f[x]=find(f[x]);&#125;<br><span class="hljs-keyword">char</span> str[NM][NM],_str[NM][NM];<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(<span class="hljs-keyword">char</span>*x,<span class="hljs-keyword">char</span>*y)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> s=<span class="hljs-number">0</span>;<br>    inc(i,<span class="hljs-number">0</span>,m<span class="hljs-number">-1</span>)<span class="hljs-keyword">if</span>(x[i]==y[i])s++;<br>    <span class="hljs-keyword">return</span> s&lt;_p;<br>&#125;<br><br><span class="hljs-keyword">bool</span> v[NM];<br><span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt;q;<br><span class="hljs-keyword">int</span> d[NM];<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;cnt[<span class="hljs-number">2</span>],ans;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;vec[NM];<br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    mem(v);mem(d);mem(h);o=e;<br>    ans.clear();<br>    <span class="hljs-keyword">while</span>(!q.empty())q.pop();<br>    n=read();m=read();_p=read();<br>    inc(i,<span class="hljs-number">1</span>,n)&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>,str[i]);<br>reverse_copy(str[i],str[i]+<span class="hljs-built_in">strlen</span>(str[i]),_str[i]);<br>    &#125;<br>    inc(i,<span class="hljs-number">1</span>,n)f[i]=i;<br>    inc(i,<span class="hljs-number">1</span>,n)inc(j,i+<span class="hljs-number">1</span>,n)&#123;<br><span class="hljs-keyword">if</span>(cmp(str[i],str[j]))&#123;<br>    <span class="hljs-keyword">if</span>(cmp(str[i],_str[j]))&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"-1\n"</span>);<span class="hljs-keyword">return</span>;&#125;<br>    a[i][j]=a[j][i]=<span class="hljs-literal">true</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    a[i][j]=a[j][i]=<span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">if</span>(cmp(str[i],_str[j]))<br>f[find(i)]=find(j);<br>&#125;<br>    &#125;<br>    tot=<span class="hljs-number">0</span>;<br>    inc(i,<span class="hljs-number">1</span>,n)<span class="hljs-keyword">if</span>(find(i)==i)c[i]=++tot;<br>    inc(i,<span class="hljs-number">1</span>,tot)vec[i].clear();<br>    inc(i,<span class="hljs-number">1</span>,n)vec[c[find(i)]].push_back(i);<br>    inc(i,<span class="hljs-number">1</span>,tot)<span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp;j:vec[i])<span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp;k:vec[i])<span class="hljs-keyword">if</span>(a[j][k])&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"-1\n"</span>);<span class="hljs-keyword">return</span>;&#125;<br>    inc(i,<span class="hljs-number">1</span>,n)inc(j,<span class="hljs-number">1</span>,n)<span class="hljs-keyword">if</span>(a[i][j]&amp;&amp;find(i)!=find(j))&#123;<br>add(c[find(i)],c[find(j)]);<br>    &#125;<br>    inc(i,<span class="hljs-number">1</span>,tot)<span class="hljs-keyword">if</span>(!v[i])&#123;<br>v[i]++;cnt[<span class="hljs-number">0</span>].clear();cnt[<span class="hljs-number">1</span>].clear();<br>q.push(i);<br><span class="hljs-keyword">while</span>(!q.empty())&#123;<br>    <span class="hljs-keyword">int</span> t=q.front();q.pop();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp;j:vec[t])cnt[d[t]].push_back(j);<br>    link(t)<span class="hljs-keyword">if</span>(!v[j-&gt;t])&#123;<br>v[j-&gt;t]++;<br>d[j-&gt;t]=d[t]^<span class="hljs-number">1</span>;<br>q.push(j-&gt;t);<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(d[j-&gt;t]==d[t])&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"-1\n"</span>);<span class="hljs-keyword">return</span>;&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(cnt[<span class="hljs-number">0</span>].size()&lt;cnt[<span class="hljs-number">1</span>].size())<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp;j:cnt[<span class="hljs-number">0</span>])ans.push_back(j);<br><span class="hljs-keyword">else</span> <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp;j:cnt[<span class="hljs-number">1</span>])ans.push_back(j);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,(<span class="hljs-keyword">int</span>)ans.size());<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp;j:ans)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d "</span>,j);<span class="hljs-built_in">putchar</span>(<span class="hljs-string">'\n'</span>);<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> _=read();<span class="hljs-keyword">while</span>(_--)solve();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/1250/problem/E&quot; target
      
    
    </summary>
    
    
      <category term="unclassified" scheme="https://qkoqhh.github.io/tags/unclassified/"/>
    
  </entry>
  
  <entry>
    <title>luogu5392(矩阵快速幂)</title>
    <link href="https://qkoqhh.github.io/luogu5392/"/>
    <id>https://qkoqhh.github.io/luogu5392/</id>
    <published>2019-10-28T09:41:13.000Z</published>
    <updated>2019-10-28T09:50:13.547Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.org/problem/P5392" target="_blank" rel="noopener">https://www.luogu.org/problem/P5392</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>很容易想到用矩阵快速幂，但是矩阵太大会 T。。</p><p>本地跑一下可以发现 $17$ 位以内的独立集其实不多，但是复杂度还是过大，仍然需要再压缩</p><p>这个压缩就比较神奇了，根据(可能是)群轮，我们可以把一些同构的状态合并，即通过旋转可以得到的状态，这样矩阵的维数就进一步压缩了(200左右)，然后就可以矩阵快速幂了。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 100005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 131072</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">998244353</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br>ll n,ans;<br><span class="hljs-keyword">int</span> m,cnt,tot;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mat</span>&#123;</span>ll a[<span class="hljs-number">211</span>][<span class="hljs-number">211</span>];&#125;t;<br><span class="hljs-keyword">bool</span> v[<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">17</span>];<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;vec[<span class="hljs-number">211</span>];<br>mat <span class="hljs-keyword">operator</span>*(<span class="hljs-keyword">const</span> mat&amp;x,<span class="hljs-keyword">const</span> mat&amp;y)&#123;<br>    mat s;mem(s.a);<br>    inc(i,<span class="hljs-number">0</span>,cnt)inc(k,<span class="hljs-number">0</span>,cnt)inc(j,<span class="hljs-number">0</span>,cnt)s.a[i][j]+=x.a[i][k]*y.a[k][j],s.a[i][j]%=inf;<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br><br><span class="hljs-function">mat <span class="hljs-title">qpow</span><span class="hljs-params">(mat x,ll t)</span></span>&#123;<br>    mat s=x;t--;<br>    <span class="hljs-keyword">for</span>(;t;t&gt;&gt;=<span class="hljs-number">1</span>,x=x*x)<span class="hljs-keyword">if</span>(t&amp;<span class="hljs-number">1</span>)s=s*x;<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();m=read();tot=succ(m)<span class="hljs-number">-1</span>;<br>    vec[<span class="hljs-number">0</span>].push_back(<span class="hljs-number">0</span>);<br>    inc(i,<span class="hljs-number">1</span>,tot<span class="hljs-number">-1</span>)<span class="hljs-keyword">if</span>(!v[i] &amp;&amp; (i &amp; (i&gt;&gt;<span class="hljs-number">1</span>|( (i&amp;<span class="hljs-number">1</span>)&lt;&lt;(m<span class="hljs-number">-1</span>) ) ) )==<span class="hljs-number">0</span>)&#123;<br><span class="hljs-keyword">int</span> t=i;<br>cnt++;<br>inc(j,<span class="hljs-number">1</span>,m)&#123;<br>    <span class="hljs-keyword">if</span>(!v[t])&#123;<br>v[t]++;<br>vec[cnt].push_back(t);<br>    &#125;<br>    t=t&gt;&gt;<span class="hljs-number">1</span>| ( (t&amp;<span class="hljs-number">1</span>)&lt;&lt;(m<span class="hljs-number">-1</span>) );<br>&#125;<br>    &#125;<br>    <span class="hljs-comment">//printf("%d\n",cnt);</span><br>    <span class="hljs-comment">//inc(i,0,cnt)&#123;printf("%d:",i);for(auto&amp;j:vec[i])printf("%d ",j);putchar('\n');&#125;</span><br>    inc(i,<span class="hljs-number">0</span>,cnt)inc(j,<span class="hljs-number">0</span>,cnt)<span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp;k:vec[j])<span class="hljs-keyword">if</span>((vec[i][<span class="hljs-number">0</span>]&amp;k)==<span class="hljs-number">0</span>)t.a[i][j]++;<br>    <span class="hljs-comment">//inc(i,0,cnt)&#123;inc(j,0,cnt)printf("%lld ",t.a[i][j]);putchar('\n');&#125;</span><br>    t=qpow(t,n);<br>    inc(i,<span class="hljs-number">0</span>,cnt)ans+=t.a[<span class="hljs-number">0</span>][i];<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans%inf);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problem/P5392&quot; target=&quot;_blank&quot; 
      
    
    </summary>
    
    
      <category term="unclassified" scheme="https://qkoqhh.github.io/tags/unclassified/"/>
    
  </entry>
  
  <entry>
    <title>loj2774(基环树DP)</title>
    <link href="https://qkoqhh.github.io/loj2774/"/>
    <id>https://qkoqhh.github.io/loj2774/</id>
    <published>2019-10-28T07:14:35.000Z</published>
    <updated>2019-10-28T07:19:27.576Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://loj.ac/problem/2774" target="_blank" rel="noopener">https://loj.ac/problem/2774</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>这题没有想象中那么麻烦。。</p><p>首先发现要满足题目要求初始边一定是每个点有且只有一条出边，那么这个图就变成了基环树森林。。</p><p>然后考虑树DP的话，显然可以根据当前点的出边有没有改变设状态。再考虑环上的情况，由于只能两两配对，所以能形成配对的只有环上的相邻两点，那么如果在序列上直接DP过去，环上考虑跨环和不跨环，跨环其实就是把头尾配对，然后又变成序列了，所以没什么大碍。。</p><p>最后需要特判一下环大小为 2 和 1 的情况，然后就没了。。</p><p>讨论基本一次覆盖到，然而还是有地方写挫了。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 100005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 1000005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span>&#123;</span><span class="hljs-keyword">int</span> t;edge*next;&#125;e[NM],*h[NM],*o=e;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;o-&gt;t=y;o-&gt;next=h[x];h[x]=o++;&#125;<br><span class="hljs-keyword">int</span> n,d[NM][<span class="hljs-number">2</span>],dp[NM];<br><span class="hljs-keyword">bool</span> v[NM];<br><span class="hljs-built_in">map</span>&lt;<span class="hljs-built_in">string</span>,<span class="hljs-keyword">int</span>&gt;mp;<br><span class="hljs-keyword">int</span> ans;<br><br><span class="hljs-keyword">int</span> low[NM],_x,f[NM],tot,c[NM];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">tar</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br>    low[x]=_x;<br>    link(x)<span class="hljs-keyword">if</span>(low[j-&gt;t]==_x)<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> y=x;y!=f[j-&gt;t];y=f[y])c[++tot]=y,v[y]++;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!low[j-&gt;t])f[j-&gt;t]=x,tar(j-&gt;t);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> s=<span class="hljs-number">0</span>;<br>    v[x]++;<br>    link(x)<span class="hljs-keyword">if</span>(!v[j-&gt;t])&#123;<br>dfs(j-&gt;t);<br>d[x][<span class="hljs-number">0</span>]+=d[j-&gt;t][<span class="hljs-number">1</span>];<br>s=max(s,d[j-&gt;t][<span class="hljs-number">1</span>]-d[j-&gt;t][<span class="hljs-number">0</span>]);<br>    &#125;<br>    d[x][<span class="hljs-number">1</span>]=d[x][<span class="hljs-number">0</span>]-s+<span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();<br>    <span class="hljs-keyword">if</span>(n&amp;<span class="hljs-number">1</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>*<span class="hljs-built_in">printf</span>(<span class="hljs-string">"-1\n"</span>);<br>    inc(i,<span class="hljs-number">1</span>,n)&#123;<br><span class="hljs-built_in">string</span> s,t;<br><span class="hljs-built_in">cin</span>&gt;&gt;s&gt;&gt;t;<br><span class="hljs-keyword">int</span> x=mp.count(s)?mp[s]:mp[s]=++tot;<br><span class="hljs-keyword">int</span> y=mp.count(t)?mp[t]:mp[t]=++tot;<br><span class="hljs-keyword">if</span>(v[x])<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>*<span class="hljs-built_in">printf</span>(<span class="hljs-string">"-1\n"</span>);<br>add(y,x);v[x]++;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp;j:mp)<span class="hljs-built_in">cout</span>&lt;&lt;j.first&lt;&lt;<span class="hljs-string">' '</span>&lt;&lt;j.second&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    mem(v);<br>    inc(k,<span class="hljs-number">1</span>,n)<span class="hljs-keyword">if</span>(!low[k])&#123;<br>tot=<span class="hljs-number">0</span>;<br>tar(_x=k);<br>inc(i,<span class="hljs-number">1</span>,tot)dfs(c[i]);<br><span class="hljs-keyword">if</span>(tot==<span class="hljs-number">1</span>)&#123;<br>    ans+=d[c[<span class="hljs-number">1</span>]][<span class="hljs-number">1</span>];<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(tot==<span class="hljs-number">2</span>)&#123;<br>    ans+=min(d[c[<span class="hljs-number">1</span>]][<span class="hljs-number">1</span>]+d[c[<span class="hljs-number">2</span>]][<span class="hljs-number">1</span>],d[c[<span class="hljs-number">1</span>]][<span class="hljs-number">0</span>]+d[c[<span class="hljs-number">2</span>]][<span class="hljs-number">0</span>]);<br>&#125;<br><span class="hljs-keyword">if</span>(tot&lt;=<span class="hljs-number">2</span>)<span class="hljs-keyword">continue</span>;<br>inc(i,<span class="hljs-number">1</span>,tot)&#123;<br>    dp[i]=dp[i<span class="hljs-number">-1</span>]+d[c[i]][<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">1</span>)dp[i]=min(dp[i],dp[i<span class="hljs-number">-2</span>]+d[c[i]][<span class="hljs-number">0</span>]+d[c[i<span class="hljs-number">-1</span>]][<span class="hljs-number">0</span>]+<span class="hljs-number">1</span>);<br>&#125;<br>tot--;dp[<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br>inc(i,<span class="hljs-number">2</span>,tot)&#123;<br>    dp[i]=dp[i<span class="hljs-number">-1</span>]+d[c[i]][<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">2</span>)dp[i]=min(dp[i],dp[i<span class="hljs-number">-2</span>]+d[c[i]][<span class="hljs-number">0</span>]+d[c[i<span class="hljs-number">-1</span>]][<span class="hljs-number">0</span>]+<span class="hljs-number">1</span>);<br>&#125;<br>ans+=min(dp[tot+<span class="hljs-number">1</span>],dp[tot]+d[c[<span class="hljs-number">1</span>]][<span class="hljs-number">0</span>]+d[c[tot+<span class="hljs-number">1</span>]][<span class="hljs-number">0</span>]+<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://loj.ac/problem/2774&quot; target=&quot;_blank&quot; rel=&quot;noo
      
    
    </summary>
    
    
      <category term="DP" scheme="https://qkoqhh.github.io/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>luogu4495(背包DP)</title>
    <link href="https://qkoqhh.github.io/luogu4495/"/>
    <id>https://qkoqhh.github.io/luogu4495/</id>
    <published>2019-10-27T13:57:54.000Z</published>
    <updated>2019-10-27T14:01:21.391Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.org/problem/P4495" target="_blank" rel="noopener">https://www.luogu.org/problem/P4495</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>题比较水。。</p><p>首先需要和 $P$ 取 $gcd$ 得到最小公差，然后就变成一个背包问题，两个物品合并的体积会变成他们的 $gcd$ 。。</p><p>考虑到 $P$ 的因子只有 $1000+$，所以直接开个容量为 $1000$ 的背包去合并，然后物品个数去重之后仍然为 $1000$ 个，转移的时候考虑乘上 $2^{num}-1$ 就可以了。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 2005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 1000005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><br><span class="hljs-keyword">int</span> n,m,mod,tot;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reduce</span><span class="hljs-params">(<span class="hljs-keyword">int</span>&amp;x)</span></span>&#123;x+=x&gt;&gt;<span class="hljs-number">31</span>&amp;inf;&#125;<br><span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt;mp;<br><span class="hljs-keyword">int</span> b[NM],c[NM],d[NM],p[nm];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();m=read();mod=read();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i*i&lt;mod;i++)<span class="hljs-keyword">if</span>(mod%i==<span class="hljs-number">0</span>)c[++tot]=mod/i;<br>    dec(i,<span class="hljs-built_in">sqrt</span>(mod),<span class="hljs-number">1</span>)<span class="hljs-keyword">if</span>(mod%i==<span class="hljs-number">0</span>)c[++tot]=i;<br>    inc(i,<span class="hljs-number">1</span>,tot)mp[c[i]]=i;<br>    inc(i,<span class="hljs-number">1</span>,n)b[mp[__gcd(mod,read())]]++;<br>    p[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;inc(i,<span class="hljs-number">1</span>,n)p[i]=p[i<span class="hljs-number">-1</span>]*<span class="hljs-number">2</span>%inf;<br>    d[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-comment">//inc(i,1,tot)printf("%d ",c[i]);putchar('\n');</span><br>    inc(i,<span class="hljs-number">1</span>,tot)&#123;<br>dec(j,tot,<span class="hljs-number">1</span>)reduce(d[mp[__gcd(c[j],c[i])]]+=<span class="hljs-number">1l</span>l*d[j]*(p[b[i]]<span class="hljs-number">-1</span>)%inf-inf);<br><span class="hljs-comment">//inc(j,1,tot)printf("%d ",d[j]);putchar('\n');</span><br>    &#125;<br>    <span class="hljs-comment">//inc(j,1,tot)printf("%d ",d[j]);putchar('\n');</span><br>    inc(i,<span class="hljs-number">1</span>,tot)&#123;<br>inc(j,i+<span class="hljs-number">1</span>,tot)<span class="hljs-keyword">if</span>(c[i]%c[j]==<span class="hljs-number">0</span>)reduce(d[i]+=d[j]-inf);<br>    &#125;<br>    <span class="hljs-comment">//inc(j,1,tot)printf("%d ",d[j]);putchar('\n');</span><br>    <span class="hljs-keyword">while</span>(m--)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,d[mp[__gcd(read(),mod)]]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problem/P4495&quot; target=&quot;_blank&quot; 
      
    
    </summary>
    
    
      <category term="DP" scheme="https://qkoqhh.github.io/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>luogu4298(最大反链)</title>
    <link href="https://qkoqhh.github.io/luogu4298/"/>
    <id>https://qkoqhh.github.io/luogu4298/</id>
    <published>2019-10-13T14:21:33.000Z</published>
    <updated>2019-10-13T16:06:00.398Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.org/problem/P4298" target="_blank" rel="noopener">https://www.luogu.org/problem/P4298</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>这个就是求最大反链，由 konig 定理，最大反链等于最小链覆盖 </p><p>然后最小链覆盖和最小路径覆盖不同，他允许路径是重叠的，为了解决这个问题，我们求该图的传递闭包，那么对重叠的路径来说，在传递闭包上就可以表示成为不相交的路径，这样就变成了求最小路径覆盖，直接跑二分图即可。。</p><p>然后问题在输出方案，两边都在二分图最大独立集中的点即为最长反链，所以直接求最大独立集即可，需要在原图的基础上再对未匹配点跑一次 DFS 打标记。。</p><p>然后对于可行点的求解只能暴力枚举，去掉该点以及和他相通的点之后判断对反链大小的影响。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 105</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 200005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pi 3.1415926535897931</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp(x,y) make_pair(x,y)</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">1e9</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br> <br><br><br><span class="hljs-keyword">int</span> n,_x,_y,_ans;<br><span class="hljs-keyword">bool</span> a[NM][NM];<br><span class="hljs-keyword">bool</span> _v[NM],__v[NM],V[NM];<br><span class="hljs-keyword">int</span> v[NM],match[NM],ans,_match[NM];<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br>    inc(j,<span class="hljs-number">1</span>,n)<span class="hljs-keyword">if</span>(V[j]&amp;&amp;a[x][j]&amp;&amp;v[j]!=_x)&#123;<br>v[j]=_x;<br><span class="hljs-keyword">if</span>(!match[j]||dfs(match[j]))&#123;match[j]=x;<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;&#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">void</span> _dfs(<span class="hljs-keyword">int</span> x)&#123;<br>    __v[x]++;<br>    inc(j,<span class="hljs-number">1</span>,n)<span class="hljs-keyword">if</span>(a[x][j]&amp;&amp;!_v[j])&#123;<br>_v[j]++;<br>_dfs(match[j]);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();<span class="hljs-keyword">int</span> _=read();<span class="hljs-keyword">while</span>(_--)&#123;<br>_x=read();_y=read();a[_x][_y]++;<br>    &#125;<br>    inc(k,<span class="hljs-number">1</span>,n)inc(i,<span class="hljs-number">1</span>,n)<span class="hljs-keyword">if</span>(i!=k&amp;&amp;a[i][k])inc(j,<span class="hljs-number">1</span>,n)<span class="hljs-keyword">if</span>(i!=j&amp;&amp;k!=j&amp;&amp;a[k][j])a[i][j]=<span class="hljs-literal">true</span>;<br>    ans=n;<br>    inc(i,<span class="hljs-number">1</span>,n)V[i]=<span class="hljs-literal">true</span>;<br>    inc(i,<span class="hljs-number">1</span>,n)<span class="hljs-keyword">if</span>(dfs(_x=i))ans--;<br>    inc(i,<span class="hljs-number">1</span>,n)_match[match[i]]=i;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,ans);<br>    _ans=ans;<br>    inc(i,<span class="hljs-number">1</span>,n)<span class="hljs-keyword">if</span>(!_match[i])_dfs(i);<br>    inc(i,<span class="hljs-number">1</span>,n)<span class="hljs-keyword">if</span>(__v[i]&amp;&amp;!_v[i])<span class="hljs-built_in">putchar</span>(<span class="hljs-string">'1'</span>);<span class="hljs-keyword">else</span> <span class="hljs-built_in">putchar</span>(<span class="hljs-string">'0'</span>);<span class="hljs-built_in">putchar</span>(<span class="hljs-string">'\n'</span>);<br>    inc(k,<span class="hljs-number">1</span>,n)&#123;<br>inc(i,<span class="hljs-number">1</span>,n)<span class="hljs-keyword">if</span>(a[i][k]||a[k][i])V[i]=<span class="hljs-literal">false</span>;<span class="hljs-keyword">else</span> V[i]=<span class="hljs-literal">true</span>;<br>V[k]=<span class="hljs-literal">false</span>;<br>ans=<span class="hljs-number">0</span>;<br>inc(i,<span class="hljs-number">1</span>,n)<span class="hljs-keyword">if</span>(V[i])ans++;<br>mem(v);mem(match);<br>inc(i,<span class="hljs-number">1</span>,n)<span class="hljs-keyword">if</span>(V[i]&amp;&amp;dfs(_x=i))ans--;<br><span class="hljs-keyword">if</span>(ans+<span class="hljs-number">1</span>==_ans)<span class="hljs-built_in">putchar</span>(<span class="hljs-string">'1'</span>);<span class="hljs-keyword">else</span> <span class="hljs-built_in">putchar</span>(<span class="hljs-string">'0'</span>);<br>    &#125;<br>    <span class="hljs-built_in">putchar</span>(<span class="hljs-string">'\n'</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problem/P4298&quot; target=&quot;_blank&quot; 
      
    
    </summary>
    
    
      <category term="二分图" scheme="https://qkoqhh.github.io/tags/%E4%BA%8C%E5%88%86%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>bzoj2138(hall定理+线段树)</title>
    <link href="https://qkoqhh.github.io/bzoj2138/"/>
    <id>https://qkoqhh.github.io/bzoj2138/</id>
    <published>2019-10-06T11:56:07.000Z</published>
    <updated>2019-10-06T12:02:10.752Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=2138" target="_blank" rel="noopener">https://www.lydsy.com/JudgeOnline/problem.php?id=2138</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>感觉还是比较经典的。。</p><p>对前 $i-1$ 个区间排序，然后选定他们的子集来和 $i$ 并，</p><p>若该子集的并区间不连续，那么把他们分割后必然是更严格的条件，所以这个检验是冗余的。。</p><p>然后如果连续，那么被该并区间包含的区间是必选的，不选的话只会使得条件更加宽松。。</p><p>那么思路就有了，对前 $i-1$ 个区间进行排序，然后直接确定连续的区间作为 hall 定理的判定子集，即选定 $i,j$ ，使</p><script type="math/tex; mode=display">k_i-k_j\le a_{r_i}-a_{l_j-1}</script><p>然后分离变量之后会发现只需要维护最值就可以了，直接线段树做</p><p>由于插入 $i$ 时前 $i-1$ 个已经满足条件，所以我们选定的连续子集必须包含 $i$ ，所以这个最值可以在 $i$ 的两侧直接取得。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 40005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 200005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pi 3.1415926535897931</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp(x,y) make_pair(x,y)</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">1e9</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br> <br><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">P</span>&#123;</span><span class="hljs-keyword">int</span> l,r;&#125;c[NM];<br><span class="hljs-keyword">int</span> n,m,_x,_y,_z,<span class="hljs-keyword">_t</span>,p;<br><span class="hljs-keyword">int</span> a[NM],b[NM],id[NM],tmp[NM];<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<span class="hljs-keyword">return</span> c[x].l&lt;c[y].l||(c[x].l==c[y].l&amp;&amp;c[x].r&lt;c[y].r);&#125;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span>&#123;</span><br>    <span class="hljs-keyword">int</span> x,y,tag,_tag,s,_s;<br>    node*l,*r;<br>    node(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y,node*l=<span class="hljs-number">0</span>,node*r=<span class="hljs-number">0</span>):x(x),y(y),l(l),r(r),tag(<span class="hljs-number">0</span>),_tag(<span class="hljs-number">0</span>)&#123;<span class="hljs-keyword">if</span>(l)upd(),_upd();<span class="hljs-keyword">else</span> s=a[c[tmp[x]].r],_s=a[c[tmp[x]].l<span class="hljs-number">-1</span>];&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">upd</span><span class="hljs-params">()</span></span>&#123;s=min(l-&gt;s,r-&gt;s);&#125;<br>    <span class="hljs-keyword">void</span> _upd()&#123;_s=max(l-&gt;_s,r-&gt;_s);&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">if</span>(tag)&#123;<br>    l-&gt;s+=tag;l-&gt;tag+=tag;<br>    r-&gt;s+=tag;r-&gt;tag+=tag;<br>    tag=<span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(_tag)&#123;<br>    l-&gt;_s+=_tag;l-&gt;_tag+=_tag;<br>    r-&gt;_s+=_tag;r-&gt;_tag+=_tag;<br>    _tag=<span class="hljs-number">0</span>;<br>&#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">mod</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">if</span>(_x&lt;=x)&#123;tag-=<span class="hljs-keyword">_t</span>;s-=<span class="hljs-keyword">_t</span>;<span class="hljs-keyword">return</span>;&#125;<br>push();<span class="hljs-keyword">if</span>(_x&lt;=mid)l-&gt;mod();r-&gt;mod();upd();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ch</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">if</span>(_x&lt;=x)&#123;_tag-=<span class="hljs-keyword">_t</span>;_s-=<span class="hljs-keyword">_t</span>;<span class="hljs-keyword">return</span>;&#125;<br>push();<span class="hljs-keyword">if</span>(_x&lt;=mid)l-&gt;ch();r-&gt;ch();_upd();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">smin</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">if</span>(y&lt;_x)<span class="hljs-keyword">return</span> inf;<br><span class="hljs-keyword">if</span>(_x&lt;=x)<span class="hljs-keyword">return</span> s;<br>push();<span class="hljs-keyword">return</span> min(l-&gt;smin(),r-&gt;smin());<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">smax</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">if</span>(_x&lt;x)<span class="hljs-keyword">return</span> -inf;<br><span class="hljs-keyword">if</span>(y&lt;=_x)<span class="hljs-keyword">return</span> _s;<br>push();<span class="hljs-keyword">return</span> max(l-&gt;smax(),r-&gt;smax());<br>    &#125;<br>&#125;*root;<br><span class="hljs-function">node*<span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<span class="hljs-keyword">return</span> x==y?<span class="hljs-keyword">new</span> node(x,y):<span class="hljs-keyword">new</span> node(x,y,build(x,mid),build(mid+<span class="hljs-number">1</span>,y));&#125;<br><br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();<br>    _x=read();_y=read();_z=read();p=read();<br>    inc(i,<span class="hljs-number">1</span>,n)a[i]=(sqr(i-_x)%p+sqr(i-_y)%p+sqr(i-_z)%p)%p+a[i<span class="hljs-number">-1</span>];<br>    m=read();<span class="hljs-keyword">if</span>(m==<span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    b[<span class="hljs-number">1</span>]=read();b[<span class="hljs-number">2</span>]=read();_x=read();_y=read();_z=read();p=read();<br>    inc(i,<span class="hljs-number">3</span>,m)b[i]=(_x*b[i<span class="hljs-number">-1</span>]+_y*b[i<span class="hljs-number">-2</span>]+_z)%p;<br>    inc(i,<span class="hljs-number">1</span>,m)c[i].l=read(),c[i].r=read(),tmp[i]=i;<br>    sort(tmp+<span class="hljs-number">1</span>,tmp+<span class="hljs-number">1</span>+m,cmp);<br>    inc(i,<span class="hljs-number">1</span>,m)id[tmp[i]]=i;<br>    root=build(<span class="hljs-number">1</span>,m);<br>    <span class="hljs-comment">//inc(i,1,n)printf("%d ",a[i]-a[i-1]);putchar('\n');</span><br>    <span class="hljs-comment">//inc(i,1,m)printf("%d ",b[i]);putchar('\n');</span><br>    <span class="hljs-comment">//inc(i,1,m)printf("%d %d\n",c[i].l,c[i].r);putchar('\n');</span><br>    inc(i,<span class="hljs-number">1</span>,m)&#123;<br>_x=id[i];<br><span class="hljs-keyword">_t</span>=b[i]=min(b[i],root-&gt;smin()-root-&gt;smax());<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,b[i]);<br>root-&gt;mod();_x++;<span class="hljs-keyword">if</span>(_x&lt;=m)root-&gt;ch();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.lydsy.com/JudgeOnline/problem.php?id=2138
      
    
    </summary>
    
    
      <category term="二分图" scheme="https://qkoqhh.github.io/tags/%E4%BA%8C%E5%88%86%E5%9B%BE/"/>
    
      <category term="线段树" scheme="https://qkoqhh.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>arc076F(hall定理+线段树)</title>
    <link href="https://qkoqhh.github.io/arc076F/"/>
    <id>https://qkoqhh.github.io/arc076F/</id>
    <published>2019-10-04T09:40:44.000Z</published>
    <updated>2019-10-04T09:53:48.391Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://arc076.contest.atcoder.jp/tasks/arc076_d" target="_blank" rel="noopener">https://arc076.contest.atcoder.jp/tasks/arc076_d</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定 $m$ 个座位，有 $n$ 个人，他们只能坐在 $a_i$ 的左边或者 $b_i$ 的右边，问需要在 $m$ 个座位的两侧添加多少个座位使得每个人都有座位？</p><p>$n\le2\times10^5$</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>霍尔定理有个推论是这样表述的：</p><p>设二分图的两个点集为 $A、B$，其最大匹配数为 $\displaystyle|X|-\max_{S\subset A}{|S|-|N(S)|}$ ，其中 $N(S)$ 为 $S$ 的相邻点集</p><p>事实上，$\displaystyle\max_{S\subset A}{|S|-|N(S)|$ 为该二分图的最大失配数，也是本题所求</p><p>然而 $S$ 其实比较难枚举，而 $N(S)$ 就非常有特征，为区间前后缀的并，那么枚举$N(S)$ 来确定 $S$ 的大小就可以了。。</p><p>由于 $N(S)$ 有 $n^2$ 个，所以可以考虑枚举左端点用线段树维护右端点</p><p>另外，$N(S)$ 也可以为全集，此时答案为 $n-m$，如果用线段树维护会把前后缀交叉的部分重复计算，十分坑爹。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 200005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 200005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pi 3.1415926535897931</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp(x,y) make_pair(x,y)</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">1e9</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br> <br><br><br><span class="hljs-keyword">int</span> n,m,_x,cnt,ans;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">P</span>&#123;</span><span class="hljs-keyword">int</span> x,y;&#125;a[NM];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span>&#123;</span><br>    <span class="hljs-keyword">int</span> x,y,s,tag;<br>    node*l,*r;<br>    node(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y,node*l=<span class="hljs-number">0</span>,node*r=<span class="hljs-number">0</span>):x(x),y(y),l(l),r(r),s(<span class="hljs-number">0</span>),tag(<span class="hljs-number">0</span>)&#123;<span class="hljs-keyword">if</span>(l)upd();<span class="hljs-keyword">else</span> s=x-m<span class="hljs-number">-1</span>;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">upd</span><span class="hljs-params">()</span></span>&#123;s=max(l-&gt;s,r-&gt;s);&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">if</span>(tag)&#123;<br>    l-&gt;s+=tag;l-&gt;tag+=tag;<br>    r-&gt;s+=tag;r-&gt;tag+=tag;<br>    tag=<span class="hljs-number">0</span>;<br>&#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">mod</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">if</span>(y&lt;=_x)&#123;s++;tag++;<span class="hljs-keyword">return</span>;&#125;<br>push();<span class="hljs-keyword">if</span>(_x&gt;mid)r-&gt;mod();l-&gt;mod();upd();<br>    &#125;<br>&#125;*root;<br><span class="hljs-function">node*<span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<span class="hljs-keyword">return</span> x==y?<span class="hljs-keyword">new</span> node(x,y):<span class="hljs-keyword">new</span> node(x,y,build(x,mid),build(mid+<span class="hljs-number">1</span>,y));&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();m=read();<br>    ans=max(<span class="hljs-number">0</span>,n-m);<br>    inc(i,<span class="hljs-number">1</span>,n)a[i].x=read(),a[i].y=read();<br>    sort(a+<span class="hljs-number">1</span>,a+<span class="hljs-number">1</span>+n,[](P a,P b)&#123;<span class="hljs-keyword">return</span> a.x&lt;b.x;&#125;);<br>    root=build(<span class="hljs-number">1</span>,m+<span class="hljs-number">1</span>);<br>    cnt=<span class="hljs-number">1</span>;<br>    inc(i,<span class="hljs-number">0</span>,m)&#123;<br><span class="hljs-keyword">while</span>(cnt&lt;=n&amp;&amp;a[cnt].x==i)&#123;<br>    _x=a[cnt++].y;<br>    root-&gt;mod();<br>&#125;<br>ans=max(ans,root-&gt;s-i);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://arc076.contest.atcoder.jp/tasks/arc076_d&quot; tar
      
    
    </summary>
    
    
      <category term="二分图" scheme="https://qkoqhh.github.io/tags/%E4%BA%8C%E5%88%86%E5%9B%BE/"/>
    
      <category term="线段树" scheme="https://qkoqhh.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>loj6062(hall定理+线段树)</title>
    <link href="https://qkoqhh.github.io/loj6062/"/>
    <id>https://qkoqhh.github.io/loj6062/</id>
    <published>2019-10-04T07:22:13.000Z</published>
    <updated>2019-10-04T08:32:54.431Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://loj.ac/problem/6062" target="_blank" rel="noopener">https://loj.ac/problem/6062</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>这个题可以看成二分图完美匹配的判定，可以用 hall 定理求解，当固定子集大小，会发现其实最差的情况是选取最小的几个数，那么我们不妨对 $B$ 排序，然后看其前缀的相邻点数。维护相邻点数时，可以用线段树维护</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 150005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 200005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pi 3.1415926535897931</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp(x,y) make_pair(x,y)</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">1e9</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br> <br><br><br><span class="hljs-keyword">int</span> n,m,p,_x,<span class="hljs-keyword">_t</span>;<br><span class="hljs-keyword">int</span> a[NM],b[NM],ans;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span>&#123;</span><br>    <span class="hljs-keyword">int</span> x,y,s,tag;<br>    node*l,*r;<br>    node(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y,node*l=<span class="hljs-number">0</span>,node*r=<span class="hljs-number">0</span>):x(x),y(y),l(l),r(r),s(<span class="hljs-number">0</span>)&#123;<span class="hljs-keyword">if</span>(l)upd();<span class="hljs-keyword">else</span> s=-x;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">upd</span><span class="hljs-params">()</span></span>&#123;s=min(l-&gt;s,r-&gt;s);&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">if</span>(tag)&#123;<br>    l-&gt;s+=tag;l-&gt;tag+=tag;<br>    r-&gt;s+=tag;r-&gt;tag+=tag;<br>    tag=<span class="hljs-number">0</span>;<br>&#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">mod</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">if</span>(_x&lt;=x)&#123;s+=<span class="hljs-keyword">_t</span>;tag+=<span class="hljs-keyword">_t</span>;<span class="hljs-keyword">return</span>;&#125;<br>push();<span class="hljs-keyword">if</span>(_x&lt;=mid)l-&gt;mod();r-&gt;mod();upd();<br>    &#125;<br>&#125;*root;<br><span class="hljs-function">node*<span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<span class="hljs-keyword">return</span> x==y?<span class="hljs-keyword">new</span> node(x,y):<span class="hljs-keyword">new</span> node(x,y,build(x,mid),build(mid+<span class="hljs-number">1</span>,y));&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ins</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br>    _x=lower_bound(b+<span class="hljs-number">1</span>,b+<span class="hljs-number">1</span>+m,p-x)-b;<br>    <span class="hljs-keyword">if</span>(_x&lt;=m)root-&gt;mod();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();m=read();p=read();<br>    inc(i,<span class="hljs-number">1</span>,m)b[i]=read();<br>    inc(i,<span class="hljs-number">1</span>,n)a[i]=read();<br>    sort(b+<span class="hljs-number">1</span>,b+<span class="hljs-number">1</span>+m);<br>    root=build(<span class="hljs-number">1</span>,m);<br>    inc(i,<span class="hljs-number">1</span>,m)<span class="hljs-keyword">_t</span>=<span class="hljs-number">1</span>,ins(a[i]);<br>    <span class="hljs-keyword">if</span>(root-&gt;s&gt;=<span class="hljs-number">0</span>)ans++;<br>    inc(i,m+<span class="hljs-number">1</span>,n)&#123;<br><span class="hljs-keyword">_t</span>=<span class="hljs-number">1</span>;ins(a[i]);<br><span class="hljs-keyword">_t</span>=<span class="hljs-number">-1</span>;ins(a[i-m]);<br><span class="hljs-keyword">if</span>(root-&gt;s&gt;=<span class="hljs-number">0</span>)ans++;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://loj.ac/problem/6062&quot; target=&quot;_blank&quot; rel=&quot;noo
      
    
    </summary>
    
    
      <category term="二分图" scheme="https://qkoqhh.github.io/tags/%E4%BA%8C%E5%88%86%E5%9B%BE/"/>
    
      <category term="线段树" scheme="https://qkoqhh.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>uoj80(KM算法模板)</title>
    <link href="https://qkoqhh.github.io/uoj80/"/>
    <id>https://qkoqhh.github.io/uoj80/</id>
    <published>2019-10-03T07:40:36.000Z</published>
    <updated>2019-10-03T09:22:58.694Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://uoj.ac/problem/80" target="_blank" rel="noopener">http://uoj.ac/problem/80</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>二分图最大权匹配可以用费用流求解，但是当图比较稠密时，费用流的效率就会变得十分低下，因而使用 KM 算法代替</p><p>KM 算法本用于解决二分图完美匹配问题，所以在构造图的时候需要将图补成一个左右节点相同的完全二分图，即补上一些虚点和虚边使得完美匹配一定存在，且最大完美匹配等于原图的最大权匹配</p><p>然后复杂度是 $O(n^3)$ ，其实速度也不是很快，仅适用于完全图</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 405</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 200005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pi 3.1415926535897931</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp(x,y) make_pair(x,y)</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">1e9</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br> <br><br><br><span class="hljs-keyword">int</span> n,m,p,_x,_y,a[NM][NM];<br><span class="hljs-keyword">int</span> pre[NM],match[NM],_match[NM];<br><span class="hljs-keyword">int</span> b[NM],lx[NM],ly[NM];<br><span class="hljs-keyword">bool</span> v[NM];<br>ll ans;<br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">km</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>    inc(i,<span class="hljs-number">1</span>,n)&#123;<br><span class="hljs-keyword">int</span> y=<span class="hljs-number">0</span>;<br>mem(v);match[<span class="hljs-number">0</span>]=i;<br>inc(j,<span class="hljs-number">1</span>,n)b[j]=inf;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> t;match[y];y=t)&#123;<br>    <span class="hljs-keyword">int</span> s=inf,x=match[y];v[y]++;<br>    inc(j,<span class="hljs-number">1</span>,n)<span class="hljs-keyword">if</span>(!v[j])&#123;<br><span class="hljs-keyword">if</span>(b[j]&gt;lx[x]+ly[j]-a[x][j])b[j]=lx[x]+ly[j]-a[x][j],pre[j]=y;<br><span class="hljs-keyword">if</span>(s&gt;b[j])s=b[j],t=j;<br>    &#125;<br>    inc(j,<span class="hljs-number">0</span>,n)<span class="hljs-keyword">if</span>(v[j])lx[match[j]]-=s,ly[j]+=s;<span class="hljs-keyword">else</span> b[j]-=s;<br>&#125;<br><span class="hljs-keyword">for</span>(;y;y=pre[y])match[y]=match[pre[y]];<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();m=read();p=read();<br>    <span class="hljs-keyword">while</span>(p--)&#123;<br>_x=read();_y=read();a[_x][_y]=read();<br>    &#125;<br>    km(max(n,m));<br>    inc(j,<span class="hljs-number">1</span>,m)<span class="hljs-keyword">if</span>(match[j])&#123;<br>ans+=ly[j]+lx[match[j]];<br><span class="hljs-keyword">if</span>(a[match[j]][j])_match[match[j]]=j;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br>    inc(i,<span class="hljs-number">1</span>,n)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d%c"</span>,_match[i],<span class="hljs-string">" \n"</span>[i==n]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://uoj.ac/problem/80&quot; target=&quot;_blank&quot; rel=&quot;noopen
      
    
    </summary>
    
    
      <category term="二分图" scheme="https://qkoqhh.github.io/tags/%E4%BA%8C%E5%88%86%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>gym102059C(DP)</title>
    <link href="https://qkoqhh.github.io/gym102059C/"/>
    <id>https://qkoqhh.github.io/gym102059C/</id>
    <published>2019-09-30T02:32:12.000Z</published>
    <updated>2019-09-30T03:14:22.499Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://codeforces.com/gym/102059/problem/C" target="_blank" rel="noopener">https://codeforces.com/gym/102059/problem/C</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>在一维坐标上，有 $R$ 和 $H$ ，$R$ 向右走，$H$ 向左走，当 $R$ 和 $H$ 相遇时 $R$ 有 $p$ 概率消失，$H$ 有 $1-p$ 概率消失。问最后剩下 $A$ 个 $R$ 和 $B$ 个 $H$ 的概率</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>首先注意到最后会被分成两波，设分界点为 $t$ ，那么小于 $t$ 的一侧只有 $H$ 存活，大于 $t$ 的一侧只有 $R$ 存活</p><p>那么问题就是求前 $i$ 个里面，后面 $B$ 个 $H$ 的概率</p><p>然后就在这里自闭了很久。。</p><p>正解是设 $d[i][j]$ 为到第 $i$ 时，后面还会有 $j$ 个 $H$ 的概率，有</p><script type="math/tex; mode=display">d[i][j]=\left\{\begin{matrix}d[i-1][j+1]&s[i]=H\\d[i-1][j]t+d[i][j-1](1-t)&s[i]=R\end{matrix}\right.</script><p>当接受一个 $H$ 时，显然 $j$ 要减一。当接受一个 $R$ 时，若他被下一个 $H$ 击败，那么过来的还是只有 $j$ 个 $H$ ，若他击败了下一个 $H$ ，相当于需要增多一个 $H$ 。</p><p>然后从 $d[0][B]$ 开始 $DP$ 就可以了。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 5005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 2097152</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">qpow</span><span class="hljs-params">(ll x,ll t)</span></span>&#123;<br>    ll s=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(;t;t&gt;&gt;=<span class="hljs-number">1</span>,x=x*x%inf)<span class="hljs-keyword">if</span>(t&amp;<span class="hljs-number">1</span>)s=s*x%inf;<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br><span class="hljs-keyword">int</span> n;<br>ll <span class="hljs-keyword">_t</span>,d[NM][NM],g[NM][NM],ans;<br><span class="hljs-keyword">char</span> _s[NM];<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();<span class="hljs-keyword">_t</span>=read();<span class="hljs-keyword">_t</span>=<span class="hljs-keyword">_t</span>*qpow(read()+<span class="hljs-keyword">_t</span>,inf<span class="hljs-number">-2</span>)%inf;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>,_s+<span class="hljs-number">1</span>);<br>    g[n+<span class="hljs-number">1</span>][read()]=<span class="hljs-number">1</span>;d[<span class="hljs-number">0</span>][read()]=<span class="hljs-number">1</span>;<br>    inc(i,<span class="hljs-number">1</span>,n)<span class="hljs-keyword">if</span>(_s[i]==<span class="hljs-string">'H'</span>)&#123;<br>inc(j,<span class="hljs-number">0</span>,n)d[i][j]=d[i<span class="hljs-number">-1</span>][j+<span class="hljs-number">1</span>];<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>inc(j,<span class="hljs-number">1</span>,n)d[i][j]=(d[i<span class="hljs-number">-1</span>][j]*<span class="hljs-keyword">_t</span>+d[i][j<span class="hljs-number">-1</span>]*(inf+<span class="hljs-number">1</span>-<span class="hljs-keyword">_t</span>))%inf;<br>    &#125;<br>    dec(i,n,<span class="hljs-number">1</span>)<span class="hljs-keyword">if</span>(_s[i]==<span class="hljs-string">'R'</span>)&#123;<br>inc(j,<span class="hljs-number">0</span>,n)g[i][j]=g[i+<span class="hljs-number">1</span>][j+<span class="hljs-number">1</span>];<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>inc(j,<span class="hljs-number">1</span>,n)g[i][j]=(g[i+<span class="hljs-number">1</span>][j]*(inf+<span class="hljs-number">1</span>-<span class="hljs-keyword">_t</span>)+g[i][j<span class="hljs-number">-1</span>]*<span class="hljs-keyword">_t</span>)%inf;<br>    &#125;<br>    inc(i,<span class="hljs-number">0</span>,n)ans+=d[i][<span class="hljs-number">0</span>]*g[i+<span class="hljs-number">1</span>][<span class="hljs-number">0</span>],ans%=inf;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://codeforces.com/gym/102059/problem/C&quot; target=&quot;
      
    
    </summary>
    
    
      <category term="DP" scheme="https://qkoqhh.github.io/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>luogu4389(多项式指数函数)</title>
    <link href="https://qkoqhh.github.io/luogu4389/"/>
    <id>https://qkoqhh.github.io/luogu4389/</id>
    <published>2019-09-28T14:22:43.000Z</published>
    <updated>2019-09-28T14:27:36.837Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.org/problem/P4389" target="_blank" rel="noopener">https://www.luogu.org/problem/P4389</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>用多项式表示就是</p><script type="math/tex; mode=display">\begin{aligned}\prod_{i=1}^n\frac1{1-x^{v_i}}=&e^{\displaystyle-\sum_{i=1}^n \ln(1-x^i)}\\=&e^{\displaystyle\sum_{i=1}^n\sum_j\frac{x^{ij}}{j}}\end{aligned}</script><p>然后直接按值分类暴力求解指数即可，然后上多项式指数函数</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*<br> *　　　　　　  　　┏┓　　 　┏┓<br> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓<br> * 　　　　　  　　┃　　　　　　　┃ 　<br> * 　　　　　  　　┃　　　━　　 　┃<br> * 　　　　　  　　┃　＞　　　＜　┃<br> * 　　　　　  　　┃　　　　　　　┃<br> * 　　　　　  　　┃...　⌒　... 　┃<br> * 　　　　　　  　┃              ┃<br> * 　　　　　　  　┗━┓          ┏━┛<br> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┃  　　　　　　<br> * 　　　　　　　　　┃          ┃<br> * 　　　　　　　　　┃          ┃　　　　　　　　　　　<br> * 　　　　　　　　　┃          ┗━━━┓<br> * 　　　　　　　　　┃              ┣┓<br> * 　　　　　　　　　┃              ┏┛<br> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛<br> * 　　　　　　　　　　┃┫┫       ┃┫┫<br> * 　　　　　　　　　　┗┻┛       ┗┻┛<br> */</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (x+y&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x)*(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 300000</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nm 2097152</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">998244353</span>;<br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();<br>    <span class="hljs-keyword">return</span> f*x;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reduce</span><span class="hljs-params">(ll&amp;x)</span></span>&#123;x+=x&gt;&gt;<span class="hljs-number">63</span>&amp;inf;&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">qpow</span><span class="hljs-params">(ll x,ll t)</span></span>&#123;<br>    ll s=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(;t;t&gt;&gt;=<span class="hljs-number">1</span>,x=x*x%inf)<span class="hljs-keyword">if</span>(t&amp;<span class="hljs-number">1</span>)s=s*x%inf;<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br><span class="hljs-keyword">int</span> n,m;<br>ll a[NM],b[NM],inv[NM];<br><span class="hljs-keyword">int</span> v[NM];<br><br><br><span class="hljs-keyword">namespace</span> Poly&#123;<br>    <span class="hljs-keyword">int</span> lim,bit,rev[NM],w[NM],W[NM];<br>    ll invn;<br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">clear</span><span class="hljs-params">(ll*a,ll*b)</span></span>&#123;<span class="hljs-keyword">if</span>(a&lt;b)<span class="hljs-built_in">memset</span>(a,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(ll)*(b-a));&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-keyword">int</span> m)</span></span>&#123;<br><span class="hljs-keyword">for</span>(lim=<span class="hljs-number">1</span>,bit=<span class="hljs-number">0</span>;lim&lt;m;lim&lt;&lt;=<span class="hljs-number">1</span>)bit++;invn=qpow(lim,inf<span class="hljs-number">-2</span>);<br>inc(i,<span class="hljs-number">1</span>,lim<span class="hljs-number">-1</span>)rev[i]=(rev[i&gt;&gt;<span class="hljs-number">1</span>]&gt;&gt;<span class="hljs-number">1</span>)|((i&amp;<span class="hljs-number">1</span>)&lt;&lt;(bit<span class="hljs-number">-1</span>));<br>ll t=qpow(<span class="hljs-number">3</span>,(inf<span class="hljs-number">-1</span>)/lim);W[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>inc(i,<span class="hljs-number">1</span>,lim)W[i]=W[i<span class="hljs-number">-1</span>]*t%inf;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fft</span><span class="hljs-params">(ll*a,<span class="hljs-keyword">int</span> f=<span class="hljs-number">0</span>)</span></span>&#123;<br><span class="hljs-keyword">int</span> n=lim;<br>inc(i,<span class="hljs-number">1</span>,n<span class="hljs-number">-1</span>)<span class="hljs-keyword">if</span>(i&lt;rev[i])swap(a[i],a[rev[i]]);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">1</span>;k&lt;n;k&lt;&lt;=<span class="hljs-number">1</span>)&#123;<br>    <span class="hljs-keyword">int</span> t=n/k&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>,j=<span class="hljs-number">0</span>;i&lt;k;i++,j+=t)w[i]=W[f?n-j:j];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i+=k&lt;&lt;<span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;k;j++)&#123;<br>    ll x=a[i+j],y=w[j]*a[i+j+k]%inf;<br>    reduce(a[i+j]=x+y-inf);reduce(a[i+j+k]=x-y);<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(f)inc(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)a[i]=a[i]*invn%inf;<br>    &#125;<br>    ll _a[NM];<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">inv</span><span class="hljs-params">(ll*b,ll*a,<span class="hljs-keyword">int</span> m)</span></span>&#123;<br><span class="hljs-keyword">if</span>(m==<span class="hljs-number">1</span>)&#123;b[<span class="hljs-number">0</span>]=qpow(a[<span class="hljs-number">0</span>],inf<span class="hljs-number">-2</span>);<span class="hljs-keyword">return</span>;&#125;<br>inv(b,a,m+<span class="hljs-number">1</span>&gt;&gt;<span class="hljs-number">1</span>);init(m&lt;&lt;<span class="hljs-number">1</span>);<br>copy(a,a+m,_a);clear(_a+m,_a+lim);clear(b+(m+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>,b+lim);<br>fft(b);fft(_a);<br>inc(i,<span class="hljs-number">0</span>,lim<span class="hljs-number">-1</span>)b[i]=b[i]*(<span class="hljs-number">2</span>-_a[i]*b[i]%inf+inf)%inf;<br>fft(b,<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ln</span><span class="hljs-params">(ll*b,ll*a,<span class="hljs-keyword">int</span> m)</span></span>&#123;<br>inv(b,a,m);<br>inc(i,<span class="hljs-number">0</span>,m<span class="hljs-number">-2</span>)_a[i]=a[i+<span class="hljs-number">1</span>]*(i+<span class="hljs-number">1</span>)%inf;<br>init(m&lt;&lt;<span class="hljs-number">1</span>);<br>clear(_a+m<span class="hljs-number">-1</span>,_a+lim);clear(b+m,b+lim);<br>fft(_a);fft(b);<br>inc(i,<span class="hljs-number">0</span>,lim<span class="hljs-number">-1</span>)b[i]=b[i]*_a[i]%inf;<br>fft(b,<span class="hljs-number">1</span>);<br>dec(i,m<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>)b[i]=b[i<span class="hljs-number">-1</span>]*::inv[i]%inf;b[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br>    &#125;<br>    ll _b[NM];<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">exp</span><span class="hljs-params">(ll*b,ll*a,<span class="hljs-keyword">int</span> m)</span></span>&#123;<br><span class="hljs-keyword">if</span>(m==<span class="hljs-number">1</span>)&#123;b[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<span class="hljs-keyword">return</span>;&#125;<br><span class="hljs-built_in">exp</span>(b,a,m+<span class="hljs-number">1</span>&gt;&gt;<span class="hljs-number">1</span>);<br>clear(b+(m+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>,b+m);<br>ln(_b,b,m);<br>inc(i,<span class="hljs-number">0</span>,m<span class="hljs-number">-1</span>)reduce(_b[i]=a[i]-_b[i]);_b[<span class="hljs-number">0</span>]++;<br>clear(_b+m,_b+lim);clear(b+m,b+lim);<br>fft(_b);fft(b);<br>inc(i,<span class="hljs-number">0</span>,lim<span class="hljs-number">-1</span>)b[i]=b[i]*_b[i]%inf;<br>fft(b,<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n=read();m=read();<br>    inv[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    inc(i,<span class="hljs-number">2</span>,m)inv[i]=inv[inf%i]*(inf-inf/i)%inf;<br>    inc(i,<span class="hljs-number">1</span>,n)v[read()]++;<br>    inc(i,<span class="hljs-number">1</span>,m)<span class="hljs-keyword">if</span>(v[i])<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=i,k=<span class="hljs-number">1</span>;j&lt;=m;j+=i,k++)a[j]+=inv[k]*v[i],a[j]%=inf;<br>    Poly::<span class="hljs-built_in">exp</span>(b,a,m+<span class="hljs-number">1</span>);<br>    inc(i,<span class="hljs-number">1</span>,m)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,b[i]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problem/P4389&quot; target=&quot;_blank&quot; 
      
    
    </summary>
    
    
      <category term="FFT" scheme="https://qkoqhh.github.io/tags/FFT/"/>
    
      <category term="组合数学" scheme="https://qkoqhh.github.io/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>luogu2159(DP+容斥)</title>
    <link href="https://qkoqhh.github.io/luogu2159/"/>
    <id>https://qkoqhh.github.io/luogu2159/</id>
    <published>2019-09-28T08:46:05.000Z</published>
    <updated>2019-09-28T08:53:45.373Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.org/problem/P2159" target="_blank" rel="noopener">https://www.luogu.org/problem/P2159</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>这里发现求大于 $j$ 的方案数是比较好求的</p><p>设 $d[i][j]$ 为到 $i$ 时限定 $j$ 个女生大于男生，其余随意的方案数</p><script type="math/tex; mode=display">d[i][j]=d[i-1][j]+d[i-1][j-1]*(cnt-j+1)</script><p>这里 $cnt$ 为身高小于 $i$ 女生的男生数</p><p>这里会发现方案数是被计重的，设最后的 $DP$ 值为 $f[k]$ ，正好有 $k$ 个女生大于男生的方案数为 $g[k]$ ，则</p><script type="math/tex; mode=display">f[j]=\sum_{k=j}^n\binom kjg[k]</script><p>那么根据二项式反演得到</p><script type="math/tex; mode=display">g[j]=\sum_{k=j}^n(-1)^{j-k}\binom kjf[k]</script><p>这个式子也可以用容斥意义得到</p><p><br></p><p>另外一个方法是依次求出 $g$ ，即</p><script type="math/tex; mode=display">g[j]=f[j]-\sum_{k=j+1}^n\binom kjg[k]</script><p>倒着求解就可以了。。</p><p><br></p><p><br></p><p><br></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python">n,m=map(int,input().split())<br>a=[<span class="hljs-number">0</span>]<br>b=[<span class="hljs-number">0</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(n):<br>    b.append(int(input()))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(n):<br>    a.append(int(input()))<br>a=sorted(a)<br>b=sorted(b)<br>d=[<span class="hljs-number">0</span>]*(n+<span class="hljs-number">1</span>)<br>d[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span><br>cnt=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">while</span> cnt&lt;=n <span class="hljs-keyword">and</span> a[i]&gt;b[cnt]:<br>        cnt+=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(i,<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>):<br>        <span class="hljs-keyword">if</span> cnt-j&gt;<span class="hljs-number">0</span>:<br>        d[j]+=d[j<span class="hljs-number">-1</span>]*(cnt-j)<br><br>p=[<span class="hljs-number">1</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(n):<br>    p.append(p[i]*(i+<span class="hljs-number">1</span>))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(n+<span class="hljs-number">1</span>):<br>    d[i]=d[i]*p[n-i]<br><br><br>c=[[<span class="hljs-number">0</span>]*(n+<span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(n+<span class="hljs-number">1</span>)]<br>c[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(n):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(i+<span class="hljs-number">1</span>):<br>        c[i+<span class="hljs-number">1</span>][j]+=c[i][j]<br>        c[i+<span class="hljs-number">1</span>][j+<span class="hljs-number">1</span>]+=c[i][j]<br><br>f=[<span class="hljs-number">0</span>]*(n+<span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>,n+<span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(i,n+<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> (j-i)&amp;<span class="hljs-number">1</span>:<br>            f[i]-=d[j]*c[j][i]<br>        <span class="hljs-keyword">else</span>:<br>            f[i]+=d[j]*c[j][i]<br>ans=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>,m+<span class="hljs-number">1</span>):<br>    ans+=f[i]<br>print(ans)<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problem/P2159&quot; target=&quot;_blank&quot; 
      
    
    </summary>
    
    
      <category term="DP" scheme="https://qkoqhh.github.io/tags/DP/"/>
    
      <category term="组合数学" scheme="https://qkoqhh.github.io/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
</feed>
